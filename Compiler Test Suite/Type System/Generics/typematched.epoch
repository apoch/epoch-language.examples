//// TYPEMATCHED.EPOCH//// Test of templated type matching//type Optional<type T> : T | nothingstructure WrapsOptional<type T> :	Optional<T> Contained,	string TagMeta<type T> : WrapsOptional<T> ref wrap, WrapsOptional<T> ref other -> boolean ret = false{	ret = Check<T>(wrap.Contained, other)}Check<type T> : T input, WrapsOptional<T> ref other -> trueCheck<type T> : nothing, WrapsOptional<T> ref other -> falseentrypoint :{	Optional<integer> opt = 42	WrapsOptional<integer> wrap = opt, "The Answer"		assert(Meta<integer>(wrap, wrap))		passtest()}