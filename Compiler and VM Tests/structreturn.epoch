//
// STRUCTRETURN.EPOCH
//
// Test case for returning a structure from a function
// Implemented as a unit test for fixing Issue ID #2
//

structure Vector : (real(X), real(Y), real(Z))

structure VectorPair : (Vector(alpha), Vector(bravo))

structure DeepTest : (VectorPair(one), VectorPair(two))


infix(plus)

plus : (Vector(left), Vector(right)) -> (Vector(result, 0.0, 0.0, 0.0))
{
	result.X = left.X + right.X
	result.Y = left.Y + right.Y
	result.Z = left.Z + right.Z
}


entrypoint : () -> ()
{
	Vector(a, 1.0, 1.0, 1.0)
	Vector(b, 2.0, 2.0, 2.0)

	Vector(c, 0.0, 0.0, 0.0)
	c = a plus b
	display(c)

	VectorPair(foo, Vector(0.0, 0.0, 0.0), Vector(5.0, 5.0, 5.0))	
	foo.alpha = foo.bravo
	foo.alpha.X = foo.bravo.X
	foo.alpha.X = foo.bravo.X + foo.bravo.Y
	display(foo.bravo)
	debugwritestring(cast(string, foo.alpha.X))

	DeepTest(deep, VectorPair(Vector(0.0, 0.0, 0.0), Vector(0.0, 0.0, 0.0)), VectorPair(Vector(0.0, 0.0, 0.0), Vector(0.0, 0.0, 0.0)))
	deep.one.alpha.X = 40.0
	deep.two.bravo.Z = 1.0 + 0.0
	deep.one.alpha.Y = deep.one.alpha.X + deep.two.bravo.Z + deep.two.bravo.Z
	debugwritestring(cast(string, deep.one.alpha.Y))
}


display : (Vector(v)) -> ()
{
	debugwritestring(cast(string, v.X))
	debugwritestring(cast(string, v.Y))
	debugwritestring(cast(string, v.Z))
}

