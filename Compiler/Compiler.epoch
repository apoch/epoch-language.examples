//
// Epoch Compiler
// Compiler.epoch
//
// Monolithic self-hosting compiler
//
// Support for separate compilation is desirable so this file is less of a mess.
//

type listnode<type T> : list<T> | nothing

structure list<type T> :
	T value,
	listnode<T> next


prepend<type T> : list<T> ref thelist, T ref value
{
	list<T> newlist = value, thelist
	thelist = newlist
}

map<type T> : list<T> ref thelist, (func : T)
{
	func(thelist.value)
	map<T>(thelist.next, func)
}

map<type T> : nothing, (func : T)
{
}


append_recurse<type T> : list<T> ref thelist, nothing, T ref value
{
	list<T> newlist = value, nothing
	thelist.next = newlist
}

append_recurse<type T> : list<T> ref thelist, list<T> ref tail, T ref value
{
	append_recurse<T>(tail, tail.next, value)
}


append<type T> : list<T> ref thelist, T ref value
{
	append_recurse<T>(thelist, thelist.next, value)
}



//
// API for registering plugins with the C++ compiler
//
RegisterFunc : string name, (funcptr : ) 						[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : integer) 					[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : string) 						[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : boolean) 					[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : real)	 					[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : integer, integer)				[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : integer, string)					[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : integer, string, string)				[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : integer, boolean)				[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : integer, integer, integer)			[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : integer, integer, integer, integer, boolean)	[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : integer, integer, boolean, integer)		[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : integer, integer, boolean, boolean)		[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : integer, integer, integer, boolean, integer)	[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : integer, integer, integer, integer)		[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : boolean, integer, integer, integer)		[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : -> integer) 					[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : -> buffer) 					[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]



//
// Entrypoint - called when the plugin is loaded
//
// Performs function registration with the C++ compiler
//
entrypoint :
{
	RegisterFunc("PluginOnCompileStart", OnCompileStart)

	RegisterBytecodePlugin()
	RegisterCodeGenPlugin()
}


RegisterBytecodePlugin :
{
	RegisterFunc("PluginBytecodeGetBuffer", OnBytecodeGetBuffer)
	RegisterFunc("PluginBytecodeGetSize", OnBytecodeGetSize)

	print("Epoch Compiler - bytecode emitter plugin registered")
}

RegisterCodeGenPlugin :
{
	RegisterFunc("PluginCodeGenProcessProgram", OnCodeGenProcessProgram)

	RegisterFunc("PluginCodeGenRegisterString", OnCodeGenRegisterString)
	RegisterFunc("PluginCodeGenRegisterScope", OnCodeGenRegisterScope)
	RegisterFunc("PluginCodeGenRegisterVariable", OnCodeGenRegisterVariable)
	RegisterFunc("PluginCodeGenRegisterFunction", OnCodeGenRegisterFunction)
	RegisterFunc("PluginCodeGenRegisterLiteralBoolean", OnCodeGenRegisterLiteralBoolean)
	RegisterFunc("PluginCodeGenRegisterLiteralInteger", OnCodeGenRegisterLiteralInteger)
	RegisterFunc("PluginCodeGenRegisterLiteralString", OnCodeGenRegisterLiteralString)
	RegisterFunc("PluginCodeGenRegisterLiteralReal", OnCodeGenRegisterLiteralReal)
	RegisterFunc("PluginCodeGenRegisterAtomIdentifier", OnCodeGenRegisterAtomIdentifier)
	RegisterFunc("PluginCodeGenRegisterAtomIdentifierReference", OnCodeGenRegisterAtomIdentifierReference)
	RegisterFunc("PluginCodeGenRegisterOperatorInvoke", OnCodeGenRegisterOperatorInvoke)
	RegisterFunc("PluginCodeGenRegisterTypeAnnotation", OnCodeGenRegisterTypeAnnotation)
	RegisterFunc("PluginCodeGenRegisterRefBinding", OnCodeGenRegisterRefBinding)

	RegisterFunc("PluginCodeGenRegisterFunctionTag", OnCodeGenRegisterFunctionTag)
	RegisterFunc("PluginCodeGenRegisterFunctionTagParam", OnCodeGenRegisterFunctionTagParam)
	RegisterFunc("PluginCodeGenRegisterFunctionInvokeTag", OnCodeGenRegisterFunctionInvokeTag)

	RegisterFunc("PluginCodeGenRegisterStructureMemVar", OnCodeGenRegisterStructureMemVar)

	RegisterFunc("PluginCodeGenRegisterSumTypeBase", OnCodeGenRegisterSumTypeBase)

	RegisterFunc("PluginCodeGenRegisterTypeMatchParam", OnCodeGenRegisterTypeMatchParam)

	RegisterFunc("PluginCodeGenRegisterConstructors", OnCodeGenRegisterConstructors)

	RegisterFunc("PluginCodeGenEnterFunctionBody", OnCodeGenEnterFunctionBody)
	RegisterFunc("PluginCodeGenEnterFunctionReturn", OnCodeGenEnterFunctionReturn)
	RegisterFunc("PluginCodeGenEnterStatement", OnCodeGenEnterStatement)
	RegisterFunc("PluginCodeGenEnterSubStatement", OnCodeGenEnterSubStatement)

	RegisterFunc("PluginCodeGenEnterAssignment", OnCodeGenEnterAssignment)
	RegisterFunc("PluginCodeGenEnterAssignmentCompound", OnCodeGenEnterAssignmentCompound)
	RegisterFunc("PluginCodeGenAssignmentCompoundMember", OnCodeGenAssignmentCompoundMember)
	RegisterFunc("PluginCodeGenAssignmentCompoundEnd", OnCodeGenAssignmentCompoundEnd)

	RegisterFunc("PluginCodeGenEnterTypeMatcher", OnCodeGenEnterTypeMatcher)
	RegisterFunc("PluginCodeGenExit", OnCodeGenExitContext)

	print("Epoch Compiler - code generation plugin registered")
}


//
// Callback for when compilation on a program begins
//
OnCompileStart :
{
	print("Epoch Compiler - compilation started")
}


//
// Callback used to emit a byte to a bytecode stream
//
OnBytecodeEmitByte : integer b
{
	writebuffer(Hack, HackSize, b)
	++HackSize
}

//
// Callback used to emit a series of bytes to a bytecode stream
//
OnBytecodeEmitBytes : integer bytes, integer size
{
	writebuffer(Hack, HackSize, bytes, size)
	HackSize += size
}


//
// Callback used to retrieve a bytecode stream's pointer
//
OnBytecodeGetBuffer : -> buffer ret = Hack


//
// Callback used to retrieve the size of a bytecode stream
//
OnBytecodeGetSize : -> integer size = HackSize



OnBytecodeEmitInteger : integer value
{
	writebuffer(Hack, HackSize, (value) & 0xff)
	++HackSize
	writebuffer(Hack, HackSize, (value / 0x100) & 0xff)
	++HackSize
	writebuffer(Hack, HackSize, (value / 0x10000) & 0xff)
	++HackSize
	writebuffer(Hack, HackSize, (value / 0x1000000) & 0xff)
	++HackSize
}

OnBytecodeEmitInteger16 : integer16 value
{
	integer v = cast(integer, value)
	writebuffer(Hack, HackSize, (v) & 0xff)
	++HackSize
	writebuffer(Hack, HackSize, (v / 0x100) & 0xff)
	++HackSize
}

OnBytecodeEmitReal : real value
{
	writebuffer(Hack, HackSize, value)
	HackSize = HackSize + 4
}

OnBytecodeEmitString : string value
{
	integer len = (length(value) + 1) * 2
	writebuffer(Hack, HackSize, value, len)
	HackSize += len
}

OnBytecodeEmitBoolean : boolean value
{
	OnBytecodeEmitByte(cast(integer, value))
}


OnBytecodePoolString : integer handle, string data
{
	OnBytecodeEmitByte(0x10)			// PoolString instruction
	OnBytecodeEmitInteger(handle)
	OnBytecodeEmitString(data)
}

OnBytecodeLexicalScope : integer name, integer parent, integer count
{
	OnBytecodeEmitByte(0x11)			// DefineLexicalScope instruction
	OnBytecodeEmitInteger(name)
	OnBytecodeEmitInteger(parent)
	OnBytecodeEmitInteger(count)
}

OnBytecodeLexicalScopeEntry : integer varname, integer vartype, boolean isreference, integer origin
{
	OnBytecodeEmitInteger(varname)
	OnBytecodeEmitInteger(vartype)
	OnBytecodeEmitInteger(origin)
	OnBytecodeEmitBoolean(isreference)
}

OnBytecodeInvokeOffset : integer name
{
	OnBytecodeEmitByte(0x27)			// InvokeOffset instruction
	OnBytecodeEmitInteger(name)
	OnBytecodeEmitInteger(0)
}

OnBytecodeHalt :
{
	OnBytecodeEmitByte(0x00)			// Halt instruction
}

OnBytecodeEnterFunction : integer name
{
	OnBytecodeEmitByte(0x0b)			// BeginEntity instruction
	OnBytecodeEmitInteger(0x01)			// EntityTags::Function
	OnBytecodeEmitInteger(name)
}

OnBytecodeExitFunction :
{
	OnBytecodeEmitByte(0x09)			// Return instruction
	OnBytecodeEmitByte(0x0c)			// EndEntity instruction
}

OnBytecodeInvoke : integer target
{
	OnBytecodeEmitByte(0x07)			// Invoke instruction
	OnBytecodeEmitInteger(target)
}

OnBytecodeEnterEntity : integer tag, integer name
{
	OnBytecodeEmitByte(0x0b)			// BeginEntity instruction
	OnBytecodeEmitInteger(tag)
	OnBytecodeEmitInteger(name)
}

OnBytecodeExitEntity :
{
	OnBytecodeEmitByte(0x0c)			// EndEntity instruction
}

OnBytecodeBeginChain :
{
	OnBytecodeEmitByte(0x0d)			// BeginChain instruction
}

OnBytecodeEndChain :
{
	OnBytecodeEmitByte(0x0e)			// EndChain instruction
}

OnBytecodeDefineStructure : integer typeid, integer nummembers
{
	OnBytecodeEmitByte(0x14)			// DefineStructure instruction
	OnBytecodeEmitInteger(typeid)
	OnBytecodeEmitInteger(nummembers)
}

OnBytecodeStructureMember : integer name, integer typeid
{
	OnBytecodeEmitInteger(name)
	OnBytecodeEmitInteger(typeid)
}

OnBytecodeReadReference :
{
	OnBytecodeEmitByte(0x17)			// ReadRef instruction
}

OnBytecodeReadReferenceAnnotated :
{
	OnBytecodeEmitByte(0x24)			// ReadRefAnnotated instruction
}

OnBytecodeAllocStructure : integer typeid
{
	OnBytecodeEmitByte(0x13)			// AllocStructure instruction
	OnBytecodeEmitInteger(typeid)
}

OnBytecodeBindReference : integer frameskip, integer index
{
	OnBytecodeEmitByte(0x03)			// BindRef instruction
	OnBytecodeEmitInteger(frameskip)
	OnBytecodeEmitInteger(index)
}

OnBytecodeAssign :
{
	OnBytecodeEmitByte(0x06)			// Assign instruction
}

OnBytecodePushVarValue : integer name, integer typeid
{
	OnBytecodeEmitByte(0x05)			// Read instruction
	OnBytecodeEmitInteger(name)

	integer family = typeid & 0xff000000

	if(typeid == 0x02000001)			// Buffer type signature
	{
		OnBytecodeCopyBuffer()
	}
	elseif(family == 0x03000000)			// Structure family signature
	{
		OnBytecodeCopyStructure()
	}
	elseif(family == 0x08000000)			// Template instance family signature
	{
		OnBytecodeCopyStructure()
	}
}

OnBytecodeCopyBuffer :
{
	OnBytecodeEmitByte(0x19)			// CopyBuffer instruction
}

OnBytecodeCopyStructure :
{
	OnBytecodeEmitByte(0x1b)			// CopyStructure instruction
}

OnBytecodeCopyToStructure : integer structurename, integer membername
{
	OnBytecodeEmitByte(0x16)			// CopyToStructure instruction
	OnBytecodeEmitInteger(structurename)
	OnBytecodeEmitInteger(membername)
}

OnBytecodeSetReturnRegister : integer varindex
{
	OnBytecodeEmitByte(0x0a)			// SetRetVal instruction
	OnBytecodeEmitInteger(varindex)
}

OnBytecodePushVarNoCopy : integer varname
{
	OnBytecodeEmitByte(0x05)			// Read instruction
	OnBytecodeEmitInteger(varname)
}

OnBytecodeInvokeIndirect : integer varname
{
	OnBytecodeEmitByte(0x08)			// InvokeIndirect instruction
	OnBytecodeEmitInteger(varname)
}

OnBytecodeEnterPatternResolver : integer name
{
	OnBytecodeEmitByte(0x0b)			// BeginEntity instruction
	OnBytecodeEmitInteger(0x02)			// EntityTags::PatternMatchingResolver
	OnBytecodeEmitInteger(name)
}

OnBytecodeExitPatternResolver :
{
	OnBytecodeHalt()
	OnBytecodeEmitByte(0x0c)			// EndEntity instruction
}

OnBytecodeConstructSumType :
{
	OnBytecodeEmitByte(0x21)			// ConstructSumType instruction
}

OnBytecodeEnterTypeResolver : integer name
{
	OnBytecodeEmitByte(0x0b)			// BeginEntity instruction
	OnBytecodeEmitInteger(0x05)			// EntityTags::TypeResolver
	OnBytecodeEmitInteger(name)
}

OnBytecodeExitTypeResolver :
{
	OnBytecodeHalt()
	OnBytecodeEmitByte(0x0c)			// EndEntity instruction
}

OnBytecodePopStack : integer bytes
{
	OnBytecodeEmitByte(0x04)			// Pop instruction
	OnBytecodeEmitInteger(bytes)
}

OnBytecodeBindRefByHandle : integer id
{
	OnBytecodeEmitByte(0x1d)
	OnBytecodeEmitInteger(id)
}

OnBytecodeBindStructReference : integer membertype, integer memberoffset
{
	OnBytecodeEmitByte(0x18)			// BindMemberRef instruction
	OnBytecodeEmitInteger(membertype)
	OnBytecodeEmitInteger(memberoffset)
}

OnBytecodePushType : integer typeid
{
	OnBytecodeEmitByte(0x02)			// Push instruction
	OnBytecodeEmitInteger(0x01000001)		// Integer type signature
	OnBytecodeEmitInteger(typeid)
}

OnBytecodeAssignSumType :
{
	OnBytecodeEmitByte(0x23)			// AssignSumType instruction
}

OnBytecodePushLocal : boolean isparam, integer frameskip, integer offset, integer size
{
	if(isparam)
	{
		OnBytecodeEmitByte(0x26)		// ReadParam instruction
	}
	else
	{
		OnBytecodeEmitByte(0x25)		// ReadStack instruction
	}

	OnBytecodeEmitInteger(frameskip)
	OnBytecodeEmitInteger(offset)
	OnBytecodeEmitInteger(size)
}

OnBytecodePushBoolean : boolean literal
{
	OnBytecodeEmitByte(0x02)			// Push instruction
	OnBytecodeEmitInteger(0x01000003)		// Boolean type signature
	OnBytecodeEmitBoolean(literal)
}

OnBytecodePushLiteralString : integer literalhandle
{
	OnBytecodeEmitByte(0x02)			// Push instruction
	OnBytecodeEmitInteger(0x02000000)		// String type signature
	OnBytecodeEmitInteger(literalhandle)
}

OnBytecodePushLiteralInteger : integer literal
{
	OnBytecodeEmitByte(0x02)			// Push instruction
	OnBytecodeEmitInteger(0x01000001)		// Integer type signature
	OnBytecodeEmitInteger(literal)
}

OnBytecodePushLiteralInteger16 : integer16 literal
{
	OnBytecodeEmitByte(0x02)			// Push instruction
	OnBytecodeEmitInteger(0x01000002)		// Integer16 type signature
	OnBytecodeEmitInteger16(literal)
}

OnBytecodePushTypeAnnotation : integer annotation
{
	OnBytecodeEmitByte(0x02)			// Push instruction
	OnBytecodeEmitInteger(0x01000001)		// Integer type signature
	OnBytecodeEmitInteger(annotation)
}

OnBytecodePushLiteralFunction : integer name
{
	OnBytecodeEmitByte(0x02)			// Push instruction
	OnBytecodeEmitInteger(0x09000000)		// Function family signature (N.B. not the actual function type!)
	OnBytecodeEmitInteger(name)
}

OnBytecodePushLiteralReal : real value
{
	OnBytecodeEmitByte(0x02)			// Push instruction
	OnBytecodeEmitInteger(0x01000004)		// Real type signature
	OnBytecodeEmitReal(value)
}


GetTypeSize : integer typeid -> integer size = 0
{
	if(typeid == 0x01000001)
	{
		size = 4
	}
	else
	{
		print("Undefined type for size retrieval")
		assert(false)
	}
}



//
// Code generation
//


structure StringTableEntry :
	integer Handle,
	string Data

structure StructureMemberVariable :
	integer Name,
	integer Type

// TODO - support for function signatures
structure StructureMemberFunctionRef :
	integer Name


type StructureMember : StructureMemberVariable | StructureMemberFunctionRef

structure StructureDefinition :
	integer Name,
	integer Type,
	integer ConstructorName,
	integer AnonConstructorName,
	integer CopyConstructorName,
	list<StructureMember> Members


structure IdentifierAtom :
	integer Handle,
	integer Type,
	boolean IsReference

structure StringHandleAtom :
	integer Handle

structure OperatorInvokeAtom :
	integer OperatorName

structure TypeAnnotationAtom :
	integer Type

structure RefBinding :
	integer Identifier,
	integer StructureName,
	boolean IsReference,
	boolean InputIsReference

structure AtomSentinel :
	integer dummy


type ExpressionAtom : 	integer | integer16 | boolean | real | StringHandleAtom |
			IdentifierAtom | OperatorInvokeAtom | TypeAnnotationAtom | RefBinding |
			Statement |
			AtomSentinel


structure Expression :
	list<ExpressionAtom> Atoms

type OptionalExpression : Expression | nothing

structure ExpressionList :
	list<Expression> Expressions

type OptionalExpressionList : ExpressionList | nothing


structure Statement :
	integer Name,
	OptionalExpressionList Parameters,
	integer Type

structure Assignment :
	integer LHSName,
	Expression RHS

structure AssignmentCompound :
	list<integer> LHS,
	Expression RHS


type CodeBlockEntry : Statement | Assignment | AssignmentCompound


structure CodeBlock :
	list<CodeBlockEntry> Entries

type OptionalCodeBlock : CodeBlock | nothing


structure FunctionDefinition :
	integer Name,
	OptionalExpression Return,
	OptionalCodeBlock Code,
	boolean AnonymousReturn,
	integer InvokeTag


structure Variable :
	integer Name,
	integer VarType,
	boolean IsReference,
	integer Origin,
	integer Offset

structure Scope :
	integer Name,
	integer ParentName,
	list<Variable> Variables,
	integer ParamOffset,
	integer LocalOffset



structure ContextStackEntry :
	integer EntryType,
	integer EntryName


structure SumType :
	integer Name,
	integer Type,
	list<integer> Bases


structure Parameter :
	integer Name,
	integer Type,
	boolean IsReference


structure FunctionSignature :
	integer Name,
	list<Parameter> Parameters,
	integer ReturnType

structure TypeMatcher :
	integer Name,
	list<FunctionSignature> Overloads


structure FunctionTag :
	integer FunctionName,
	string TagName,
	list<string> Parameters


OnCodeGenProcessProgram :
{
	print("Emitting program...")
	CodeGenEmitStrings(GlobalStrings)
	CodeGenEmitStructures(Structures)
	CodeGenEmitSumTypes(SumTypes)
	CodeGenEmitScopes(Scopes)
	CodeGenEmitFunctionTags(FunctionTags)
	CodeGenEmitFunctions(Functions)
	CodeGenEmitTypeMatchers(TypeMatchers)
	CodeGenEmitConstructors(Structures)
	print("Done.")
}

OnCodeGenRegisterString : integer handle, string data
{
	StringTableEntry entry = handle, data
	prepend<StringTableEntry>(GlobalStrings, entry)
}

OnCodeGenRegisterStructureMemVar : integer structurename, integer structuretype, integer membername, integer membertype
{
	StructureMemberVariable member = membername, membertype
	StructureMember memwrap = member
	FindStructureAndAddMember(Structures, structurename, structuretype, memwrap)
}

FindStructureAndAddMember : list<StructureDefinition> ref structures, integer structurename, integer structuretype, StructureMember ref member
{
	if(structures.value.Name == structurename)
	{
		AppendStructureMember(structures.value.Members, structures.value.Members.next, member)
	}
	else
	{
		FindStructureAndAddMember(structures.next, structurename, structuretype, member)
	}
}

FindStructureAndAddMember : nothing, integer structurename, integer structuretype, StructureMember ref member
{
	list<StructureMember> members = member, nothing
	StructureDefinition def = structurename, structuretype, 0, 0, 0, members

	AppendStructure(Structures, Structures.next, def)
}

AppendStructure : list<StructureDefinition> ref structures, list<StructureDefinition> ref tail, StructureDefinition ref def
{
	AppendStructure(tail, tail.next, def)
}

AppendStructure : list<StructureDefinition> ref structures, nothing, StructureDefinition ref def
{
	list<StructureDefinition> newtail = def, nothing
	structures.next = newtail
}

AppendStructureMember : list<StructureMember> ref members, list<StructureMember> ref tail, StructureMember ref member
{
	AppendStructureMember(tail, tail.next, member)
}

AppendStructureMember : list<StructureMember> ref members, nothing, StructureMember ref member
{
	list<StructureMember> newtail = member, nothing
	members.next = newtail
}


OnCodeGenRegisterConstructors : integer structurename, integer constructorname, integer anonname, integer copyname
{
	FindStructureAndSetConstructors(Structures, structurename, constructorname, anonname, copyname)
	prepend<integer>(AutoGeneratedFunctionNames, constructorname)
	prepend<integer>(AutoGeneratedFunctionNames, anonname)
	prepend<integer>(AutoGeneratedFunctionNames, copyname)
}

FindStructureAndSetConstructors : list<StructureDefinition> ref structures, integer structurename, integer constructorname, integer anonname, integer copyname
{
	if(structures.value.Name == structurename)
	{
		structures.value.ConstructorName = constructorname
		structures.value.AnonConstructorName = anonname
		structures.value.CopyConstructorName = copyname
	}
	else
	{
		FindStructureAndSetConstructors(structures.next, structurename, constructorname, anonname, copyname)
	}
}

FindStructureAndSetConstructors : nothing, integer structurename, integer constructorname, integer anonname, integer copyname



OnCodeGenRegisterSumTypeBase : integer sumtypename, integer sumtypeid, integer basetypeid
{
	FindSumTypeAndAddBase(SumTypes, sumtypename, sumtypeid, basetypeid)
}


FindSumTypeAndAddBase : list<SumType> ref sumtypes, integer sumtypename, integer sumtypeid, integer basetypeid
{
	if(sumtypes.value.Type == sumtypeid)
	{
		prepend<integer>(sumtypes.value.Bases, basetypeid)
	}
	else
	{
		FindSumTypeAndAddBase(sumtypes.next, sumtypename, sumtypeid, basetypeid)
	}
}

FindSumTypeAndAddBase : nothing, integer sumtypename, integer sumtypeid, integer basetypeid
{
	list<integer> bases = basetypeid, nothing
	SumType st = sumtypename, sumtypeid, bases
	prepend<SumType>(SumTypes, st)
}



OnCodeGenRegisterScope : integer scopename, integer parentname
{
	Scope scope = scopename, parentname, dummyvarlist, 0, 0
	prepend<Scope>(Scopes, scope)
}

OnCodeGenRegisterVariable : integer scopename, integer varname, integer vartype, boolean isref, integer origin
{
	StoreVariableInScope(Scopes, scopename, varname, vartype, isref, origin)
}

StoreVariableInScope : list<Scope> ref scopes, integer scopename, integer varname, integer vartype, boolean isref, integer origin
{
	if(scopes.value.Name == scopename)
	{
		integer size = 4		// TODO - actual variable sizes

		if((vartype & 0xff000000) == 0x07000000)		// Sum type family signature
		{
			size = 8
		}

		integer offset = -1
		if(origin == 1)			// VARIABLE_ORIGIN_PARAMETER
		{
			offset = scopes.value.ParamOffset
			scopes.value.ParamOffset = scopes.value.ParamOffset + size
		}
		else
		{
			offset = scopes.value.LocalOffset
			scopes.value.LocalOffset = scopes.value.LocalOffset + size
		}

		Variable var = varname, vartype, isref, origin, offset
		append<Variable>(scopes.value.Variables, var)
	}
	else
	{
		StoreVariableInScope(scopes.next, scopename, varname, vartype, isref, origin)
	}
}

StoreVariableInScope : nothing, integer scopename, integer varname, integer vartype, boolean isref, integer origin
{
	print("No scope available")
	assert(false)
}


OnCodeGenRegisterFunction : integer funcname
{
	FunctionDefinition func = funcname, nothing, nothing, false, 0
	prepend<FunctionDefinition>(Functions, func)
}

OnCodeGenEnterFunctionBody : integer funcname
{
	ContextStackEntry entry = STACK_TYPE_FUNCTION, funcname
	prepend<ContextStackEntry>(ContextStack, entry)
}

OnCodeGenEnterFunctionReturn : integer funcname, boolean anonymous
{
	ContextStackEntry entry = STACK_TYPE_FUNCRET, funcname
	prepend<ContextStackEntry>(ContextStack, entry)

	Functions.value.AnonymousReturn = anonymous
}

OnCodeGenExitContext :
{
	integer entrytype = ContextStack.value.EntryType
	PopContext(ContextStack, ContextStack.next)

	if(entrytype == STACK_TYPE_STATEMENT)
	{
		if(ContextStack.value.EntryType == STACK_TYPE_FUNCRET)
		{
			AppendExpressionToSubStatement(ScratchExpressions.value)
		}
		elseif(ContextStack.value.EntryType != STACK_TYPE_SUBSTATEMENT)
		{
			FindCurrentStatementAndAppendExpression(Functions, ScratchExpressions.value)
		}
	}
	elseif(entrytype == STACK_TYPE_ASSIGNMENT)
	{
		FindCurrentAssignmentAndSetExpression(Functions, ScratchExpressions.value)
	}
	elseif(entrytype == STACK_TYPE_SUBSTATEMENT)
	{
		AppendExpressionToSubStatement(ScratchExpressions.value)
		PopCurrentStatementAndAppendToScratchExpression(ScratchExpressions, ScratchExpressions.next)
	}
	elseif(entrytype == STACK_TYPE_FUNCRET)
	{
		SetReturnExpression(Functions.value, ScratchExpressions.value)
	}
}

PopContext : list<ContextStackEntry> ref stack, list<ContextStackEntry> ref next
{
	stack = next
}

PopContext : list<ContextStackEntry> ref stack, nothing
{
	print("No contexts available")
	assert(false)
}


PopCurrentStatementAndAppendToScratchExpression : list<Expression> ref expressions, list<Expression> ref tail
{
	Statement stmt = SubStatements.value
	ExpressionAtom atom = stmt

	expressions = tail

	PlaceAtomInScratchExpression(atom)
	PopSubStatement(SubStatements, SubStatements.next)
}

SetReturnExpression : FunctionDefinition ref funcdef, Expression ref expr
{
	funcdef.Return = expr
	ScratchExpressions.value = dummyexpression
}

PopSubStatement : list<Statement> ref statements, list<Statement> ref tail
{
	statements = tail
}



AppendExpressionToSubStatement : Expression ref expr
{
	AppendExpressionToStatement(SubStatements.value, expr)
}


OnCodeGenEnterTypeMatcher : integer matchername
{
	ContextStackEntry entry = STACK_TYPE_TYPEMATCH, matchername
	prepend<ContextStackEntry>(ContextStack, entry)

	TypeMatcher matcher = matchername, dummysignaturelist
	prepend<TypeMatcher>(TypeMatchers, matcher)
}


PlaceAtomInScratchExpression : ExpressionAtom ref atom
{
	if(ExpressionAtomIsSentinel(ScratchExpressions.value.Atoms.value))
	{
		list<ExpressionAtom> atoms = atom, nothing
		ScratchExpressions.value = Expression(atoms)
	}
	else
	{
		AppendAtomToExpression(ScratchExpressions.value.Atoms, ScratchExpressions.value.Atoms.next, atom)
	}
}


OnCodeGenRegisterLiteralBoolean : boolean value
{
	ExpressionAtom atom = value
	PlaceAtomInScratchExpression(atom)
}

OnCodeGenRegisterLiteralInteger : integer value, integer literaltype
{
	if(literaltype == 0x01000001)		// Integer32 type signature
	{
		ExpressionAtom atom = value
		PlaceAtomInScratchExpression(atom)
	}
	else
	{
		integer16 i16value = cast(integer16, value)
		ExpressionAtom atom = i16value
		PlaceAtomInScratchExpression(atom)
	}
}

OnCodeGenRegisterLiteralString : integer handle
{
	StringHandleAtom sha = handle
	ExpressionAtom atom = sha
	PlaceAtomInScratchExpression(atom)
}

OnCodeGenRegisterLiteralReal : real value
{
	ExpressionAtom atom = value
	PlaceAtomInScratchExpression(atom)
}

OnCodeGenRegisterOperatorInvoke : integer ophandle
{
	OperatorInvokeAtom oia = ophandle
	ExpressionAtom atom = oia
	PlaceAtomInScratchExpression(atom)
}

OnCodeGenRegisterAtomIdentifier : integer idhandle, integer idtype
{
	IdentifierAtom id = idhandle, idtype, false
	ExpressionAtom atom = id
	PlaceAtomInScratchExpression(atom)
}

OnCodeGenRegisterAtomIdentifierReference : integer idhandle
{
	IdentifierAtom id = idhandle, 0, true
	ExpressionAtom atom = id
	PlaceAtomInScratchExpression(atom)
}

OnCodeGenRegisterTypeAnnotation : integer annotationtype
{
	TypeAnnotationAtom taa = annotationtype
	ExpressionAtom atom = taa
	PlaceAtomInScratchExpression(atom)
}


OnCodeGenRegisterRefBinding : integer id, integer structureid, boolean isref, boolean inputref
{
	RefBinding binding = id, structureid, isref, inputref
	ExpressionAtom atom = binding
	PlaceAtomInScratchExpression(atom)
}


ExpressionAtomIsSentinel : AtomSentinel 	  ref sentinel    -> boolean ret = true
ExpressionAtomIsSentinel : StringHandleAtom 	  ref nonsentinel -> boolean ret = false
ExpressionAtomIsSentinel : IdentifierAtom 	  ref nonsentinel -> boolean ret = false
ExpressionAtomIsSentinel : OperatorInvokeAtom 	  ref nonsentinel -> boolean ret = false
ExpressionAtomIsSentinel : TypeAnnotationAtom 	  ref nonsentinel -> boolean ret = false
ExpressionAtomIsSentinel : integer 		  ref nonsentinel -> boolean ret = false
ExpressionAtomIsSentinel : integer16 		  ref nonsentinel -> boolean ret = false
ExpressionAtomIsSentinel : boolean 		  ref nonsentinel -> boolean ret = false
ExpressionAtomIsSentinel : real 		  ref nonsentinel -> boolean ret = false
ExpressionAtomIsSentinel : Statement		  ref nonsentinel -> boolean ret = false
ExpressionAtomIsSentinel : RefBinding             ref nonsentinel -> boolean ret = false


AppendAtomToExpression : list<ExpressionAtom> ref atoms, list<ExpressionAtom> ref tail, ExpressionAtom ref atom
{
	AppendAtomToExpression(tail, tail.next, atom)
}

AppendAtomToExpression : list<ExpressionAtom> ref atoms, nothing, ExpressionAtom ref atom
{
	list<ExpressionAtom> newatoms = atom, nothing
	atoms.next = newatoms
}


OnCodeGenEnterStatement : integer statementname, integer statementtype
{
	Statement statement = statementname, nothing, statementtype

	if(ContextStack.value.EntryType == STACK_TYPE_FUNCTION)
	{
		CodeBlockEntry cbe = statement
		AppendEntryToCurrentCodeBlock(cbe)
	}
	elseif(ContextStack.value.EntryType == STACK_TYPE_SUBSTATEMENT)
	{
		prepend<Statement>(SubStatements, statement)
	}
	elseif(ContextStack.value.EntryType == STACK_TYPE_FUNCRET)
	{
		prepend<Statement>(SubStatements, statement)
	}

	ContextStackEntry entry = STACK_TYPE_STATEMENT, statementname
	prepend<ContextStackEntry>(ContextStack, entry)

	Expression expr = dummyatomlist
	prepend<Expression>(ScratchExpressions, expr)
}

OnCodeGenEnterAssignment : integer lhsname
{
	Assignment assignment = lhsname, Expression(dummyatomlist)
	CodeBlockEntry cbe = assignment
	AppendEntryToCurrentCodeBlock(cbe)

	ContextStackEntry entry = STACK_TYPE_ASSIGNMENT, lhsname
	prepend<ContextStackEntry>(ContextStack, entry)

	ScratchExpressions.value = Expression(dummyatomlist)
}


OnCodeGenEnterAssignmentCompound : integer lhsname
{
	list<integer> idlist = lhsname, nothing
	AssignmentCompound assignment = idlist, Expression(dummyatomlist)
	CodeBlockEntry cbe = assignment
	AppendEntryToCurrentCodeBlock(cbe)
}

OnCodeGenAssignmentCompoundMember : integer membername
{
	FindCurrentFunctionAndAppendCompoundMember(Functions, membername)
}

OnCodeGenAssignmentCompoundEnd :
{
	ContextStackEntry entry = STACK_TYPE_ASSIGNMENT, 0
	prepend<ContextStackEntry>(ContextStack, entry)

	ScratchExpressions.value = Expression(dummyatomlist)	
}


OnCodeGenEnterSubStatement :
{
	ContextStackEntry entry = STACK_TYPE_SUBSTATEMENT, 0
	prepend<ContextStackEntry>(ContextStack, entry)
}



AppendEntryToCurrentCodeBlock : CodeBlockEntry ref cbe
{
	if(ContextStack.value.EntryType == STACK_TYPE_FUNCTION)
	{
		FindCurrentFunctionAndAppendEntry(Functions, cbe)
	}
	else
	{
		print("TODO - support other code body types on context stack")
		assert(false)
	}
}

FindCurrentFunctionAndAppendEntry : list<FunctionDefinition> ref functions, CodeBlockEntry ref entry
{
	assert(ContextStack.value.EntryType == STACK_TYPE_FUNCTION)
	if(functions.value.Name == ContextStack.value.EntryName)
	{
		AppendEntryToCodeBlock(functions.value, functions.value.Code, entry)
	}
	else
	{
		FindCurrentFunctionAndAppendEntry(functions.next, entry)
	}
}

FindCurrentFunctionAndAppendEntry : nothing, CodeBlockEntry ref entry
{
	print("No function is being processed")
	assert(false)
}


FindCurrentFunctionAndAppendCompoundMember : list<FunctionDefinition> ref functions, integer membername
{
	assert(ContextStack.value.EntryType == STACK_TYPE_FUNCTION)
	if(functions.value.Name == ContextStack.value.EntryName)
	{
		FindLastAssignmentAndAppendCompoundMemberHelper(functions.value.Code, membername)
	}
	else
	{
		FindCurrentFunctionAndAppendCompoundMember(functions.next, membername)
	}	
}

FindCurrentFunctionAndAppendCompoundMember : nothing, integer membername
{
	print("No function is being processed")
	assert(false)
}


FindLastAssignmentAndAppendCompoundMemberHelper : CodeBlock ref code, integer membername
{
	FindLastAssignmentAndAppendCompoundMember(code.Entries, code.Entries.next, membername)
}



AppendEntryToCodeBlock : FunctionDefinition ref funcdef, CodeBlock ref code, CodeBlockEntry ref entry
{
	AppendEntryToCodeBlock(code.Entries, entry)
}

AppendEntryToCodeBlock : FunctionDefinition ref funcdef, nothing, CodeBlockEntry ref entry
{
	list<CodeBlockEntry> stmtlist = entry, nothing
	CodeBlock block = stmtlist

	SetFunctionCodeBlock(funcdef, block)
}

AppendEntryToCodeBlock : list<CodeBlockEntry> ref entries, CodeBlockEntry ref entry
{
	AppendEntryToCodeBlock(entries, entries.next, entry)
}

AppendEntryToCodeBlock : list<CodeBlockEntry> ref entries, nothing, CodeBlockEntry ref entry
{
	list<CodeBlockEntry> newlist = entry, nothing
	entries.next = newlist
}

AppendEntryToCodeBlock : list<CodeBlockEntry> ref entries, list<CodeBlockEntry> ref tail, CodeBlockEntry ref value
{
	AppendEntryToCodeBlock(tail, tail.next, value)
}


FindLastAssignmentAndAppendCompoundMember : list<CodeBlockEntry> ref entries, list<CodeBlockEntry> ref tail, integer membername
{
	FindLastAssignmentAndAppendCompoundMember(tail, tail.next, membername)
}

FindLastAssignmentAndAppendCompoundMember : list<CodeBlockEntry> ref entries, nothing, integer membername
{
	AppendCompoundMemberHelper(entries.value, membername)
}

AppendCompoundMemberHelper : AssignmentCompound ref a, integer membername
{
	AppendCompoundMember(a.LHS, a.LHS.next, membername)
}

AppendCompoundMember : list<integer> ref members, list<integer> ref tail, integer membername
{
	AppendCompoundMember(tail, tail.next, membername)
}

AppendCompoundMember : list<integer> ref members, nothing, integer membername
{
	list<integer> newtail = membername, nothing
	members.next = newtail
}



FindCurrentStatementAndAppendExpression : list<FunctionDefinition> ref functions, Expression ref expression
{
	assert(ContextStack.value.EntryType == STACK_TYPE_FUNCTION)
	if(functions.value.Name == ContextStack.value.EntryName)
	{
		FindLastStatementInBlockAndAppendExpression(functions.value.Code, expression)
	}
	else
	{
		FindCurrentStatementAndAppendExpression(functions.next, expression)
	}
}

FindCurrentStatementAndAppendExpression : nothing, Statement ref statement
{
	print("No function available")
	assert(false)
}


FindCurrentAssignmentAndSetExpression : list<FunctionDefinition> ref functions, Expression ref expression
{
	assert(ContextStack.value.EntryType == STACK_TYPE_FUNCTION)
	if(functions.value.Name == ContextStack.value.EntryName)
	{
		FindLastAssignmentInBlockAndSetExpression(functions.value.Code, expression)
	}
	else
	{
		FindCurrentAssignmentAndSetExpression(functions.next, expression)
	}
}

FindCurrentAssignmentAndSetExpression : nothing, Statement ref statement
{
	print("No function available")
	assert(false)
}



FindLastStatementInBlockAndAppendExpression : CodeBlock ref codeblock, Expression ref expression
{
	FindLastStatementAndAppendExpression(codeblock.Entries, codeblock.Entries.next, expression)
}

FindLastStatementAndAppendExpression : list<CodeBlockEntry> ref codeblockentries, list<CodeBlockEntry> ref tail, Expression ref expression
{
	FindLastStatementAndAppendExpression(tail, tail.next, expression)
}

FindLastStatementAndAppendExpression : list<CodeBlockEntry> ref codeblockentries, nothing, Expression ref expression
{
	AppendExpressionToStatement(codeblockentries.value, expression)
}

AppendExpressionToStatement : Statement ref statement, Expression ref expression
{
	AppendExpressionToStatementParams(statement, statement.Parameters, expression)
}

AppendExpressionToStatementParams : Statement ref statement, ExpressionList ref parameters, Expression ref expression
{
	AppendExpression(parameters.Expressions, parameters.Expressions.next, expression)
}

AppendExpressionToStatementParams : Statement ref statement, nothing, Expression ref expression
{
	list<Expression> newlist = expression, nothing
	ExpressionList params = newlist
	statement.Parameters = params
}

AppendExpression : list<Expression> ref expressions, list<Expression> ref tail, Expression ref expression
{
	AppendExpression(tail, tail.next, expression)
}

AppendExpression : list<Expression> ref expressions, nothing, Expression ref expression
{
	list<Expression> newlist = expression, nothing
	expressions.next = newlist
}


FindLastAssignmentInBlockAndSetExpression : CodeBlock ref codeblock, Expression ref expression
{
	FindLastAssignmentAndSetExpression(codeblock.Entries, codeblock.Entries.next, expression)
}

FindLastAssignmentAndSetExpression : list<CodeBlockEntry> ref codeblockentries, list<CodeBlockEntry> ref tail, Expression ref expression
{
	FindLastAssignmentAndSetExpression(tail, tail.next, expression)
}

FindLastAssignmentAndSetExpression : list<CodeBlockEntry> ref codeblockentries, nothing, Expression ref expression
{
	SetAssignmentExpression(codeblockentries.value, expression)
}

SetAssignmentExpression : Assignment ref assignment, Expression ref expression
{
	assignment.RHS = expression
}

SetAssignmentExpression : AssignmentCompound ref assignment, Expression ref expression
{
	assignment.RHS = expression
}



SetFunctionCodeBlock : FunctionDefinition ref funcdef, CodeBlock ref block
{
	funcdef.Code = block
}

SetFunctionCodeBlock : nothing, CodeBlock ref block
{
	print("Error - missing function definition")
	assert(false)
}


CodeGenEmitStrings : list<StringTableEntry> ref table
{
	map<StringTableEntry>(table, CodeGenEmitSingleString)
}

CodeGenEmitSingleString : StringTableEntry entry			// TODO - this should be passed by ref
{
	if(entry.Handle != 0)
	{
		OnBytecodePoolString(entry.Handle, entry.Data)
	}
}


CodeGenEmitStructures : list<StructureDefinition> ref structures
{
	CodeGenEmitSingleStructure(structures.value)
	CodeGenEmitStructures(structures.next)
}

CodeGenEmitStructures : nothing


CodeGenEmitSingleStructure : StructureDefinition ref def
{
	if(def.Name != 0)
	{
		integer membercount = CountMembers(def.Members)
		OnBytecodeDefineStructure(def.Type, membercount)
		CodeGenEmitMembers(def.Members)
	}
}

CodeGenEmitMembers : list<StructureMember> ref members
{
	CodeGenEmitMember(members.value)
	CodeGenEmitMembers(members.next)
}

CodeGenEmitMembers : nothing

CodeGenEmitMember : StructureMemberVariable ref memvar
{
	OnBytecodeStructureMember(memvar.Name, memvar.Type)
}


CountMembers : list<StructureMember> ref members -> integer count = 0
{
	CountMembers(members, count)
}

CountMembers : list<StructureMember> ref members, integer ref count
{
	++count
	CountMembers(members.next, count)
}

CountMembers : nothing, integer ref count





CodeGenEmitScopes : list<Scope> ref scopes
{
	CodeGenEmitSingleScope(scopes.value)
	CodeGenEmitScopes(scopes.next)
}

CodeGenEmitScopes : nothing


CodeGenEmitSingleScope : Scope ref scope
{
	if(scope.Name != 0)
	{
		integer varcount = CountScopeVariables(scope)
		OnBytecodeLexicalScope(scope.Name, scope.ParentName, varcount)
		CodeGenEmitVariables(scope.Variables)
	}
}


CountScopeVariables : Scope ref scope -> integer count = 0
{
	CountScopeVariables(scope.Variables, count)
}

CountScopeVariables : list<Variable> ref variables, integer ref count
{
	if(variables.value.Name != 0)
	{
		++count
	}

	CountScopeVariables(variables.next, count)
}

CountScopeVariables : nothing, integer ref count


CodeGenEmitVariables : list<Variable> ref vars
{
	CodeGenEmitSingleVariable(vars.value)
	CodeGenEmitVariables(vars.next)
}

CodeGenEmitVariables : nothing


CodeGenEmitSingleVariable : Variable ref var
{
	if(var.Name != 0)
	{
		OnBytecodeLexicalScopeEntry(var.Name, var.VarType, var.IsReference, var.Origin)
	}
}


CodeGenEmitFunctions : list<FunctionDefinition> ref table
{
	CodeGenEmitSingleFunction(table.value)
	CodeGenEmitFunctions(table.next)
}

CodeGenEmitFunctions : nothing


CodeGenEmitSingleFunction : FunctionDefinition ref def
{
	if(def.Name != 0)
	{
		EmittingFunctionName = def.Name
		OnBytecodeEnterFunction(def.Name)
		CodeGenEmitFunctionReturn(def.Return)

		if(def.InvokeTag != 0)
		{
			OnBytecodeInvoke(def.InvokeTag)
		}

		CodeGenEmitCodeBlock(def.Code)
		if(def.AnonymousReturn)
		{
			CodeGenEmitReturnRegisterAnonymous(def.Return)
		}
		else
		{
			CodeGenEmitReturnRegister(def.Return)
		}
		OnBytecodeExitFunction()
	}
}

CodeGenEmitFunctionReturn : Expression ref expr
{
	CodeGenEmitExpressionAtoms(expr.Atoms)
}

CodeGenEmitFunctionReturn : nothing


CodeGenEmitReturnRegister : Expression ref expr
{
	integer index = FindReturnVariableIndex()
	OnBytecodeSetReturnRegister(index)
}

CodeGenEmitReturnRegister : nothing


CodeGenEmitReturnRegisterAnonymous : Expression ref expr
{
	integer index = FindReturnVariableIndex()

	OnBytecodeBindReference(0, index)
	OnBytecodeAssign()

	OnBytecodeSetReturnRegister(index)
}

CodeGenEmitReturnRegisterAnonymous : nothing



CodeGenEmitCodeBlock : CodeBlock ref block
{
	CodeGenEmitCodeBlockEntries(block.Entries)
}

CodeGenEmitCodeBlock : nothing


CodeGenEmitCodeBlockEntries : list<CodeBlockEntry> ref entries
{
	CodeGenEmitSingleCodeBlockEntry(entries.value)
	CodeGenEmitCodeBlockEntries(entries.next)
}

CodeGenEmitCodeBlockEntries : nothing


CodeGenEmitSingleCodeBlockEntry : Statement ref s
{
	CodeGenEmitExpressionList(s.Parameters)

	// TODO - other types of invoke may be needed depending on context!
	if(SumTypeExists(s.Name))
	{
		OnBytecodeConstructSumType()
	}
	elseif(FunctionIsAutoGenOrHasIR(s.Name))
	{
		OnBytecodeInvokeOffset(s.Name)
	}
	else
	{
		OnBytecodeInvoke(s.Name)
	}
}

CodeGenEmitSingleCodeBlockEntry : Assignment ref a
{
	CodeGenEmitExpressionAtoms(a.RHS.Atoms)

	integer frames = 0
	integer index = FindVariable(a.LHSName, frames)
	OnBytecodeBindReference(frames, index)

	OnBytecodeAssign()
}

CodeGenEmitSingleCodeBlockEntry : AssignmentCompound ref a
{
	CodeGenEmitExpressionAtoms(a.RHS.Atoms)

	integer frames = 0
	integer index = FindVariable(a.LHS.value, frames)
	OnBytecodeBindReference(frames, index)


	integer structurename = GetNameOfStructureByType(FindVariableType(a.LHS.value))
	BindAssignmentMembers(a.LHS.next, structurename)
	OnBytecodeAssign()
}


BindAssignmentMembers : list<integer> ref lhsmembers, integer structurename
{
	integer membertype = GetStructureMemberType(Structures, structurename, lhsmembers.value)
	integer memberoffset = GetStructureMemberOffset(Structures, structurename, lhsmembers.value)
	OnBytecodeBindStructReference(membertype, memberoffset)

	// Recurse
	BindAssignmentMembers(lhsmembers.next, GetNameOfType(membertype))
}

BindAssignmentMembers : nothing, integer structurename



CodeGenEmitExpressionList : nothing

CodeGenEmitExpressionList : ExpressionList ref expressions
{
	CodeGenEmitExpressionList(expressions.Expressions)
}

CodeGenEmitExpressionList : list<Expression> ref expressions
{
	CodeGenEmitExpressionAtoms(expressions.value.Atoms)
	CodeGenEmitExpressionList(expressions.next)
}

CodeGenEmitExpressionAtoms : list<ExpressionAtom> ref atoms
{
	CodeGenEmitSingleAtom(atoms.value)
	if(CodeGenCheckAtomForReadRef(atoms.value))
	{
		OnBytecodeReadReference()
	}
	CodeGenEmitExpressionAtoms(atoms.next)
}

CodeGenEmitExpressionAtoms : nothing


CodeGenCheckAtomForReadRef : RefBinding ref atom -> true
CodeGenCheckAtomForReadRef : integer ref atom -> false
CodeGenCheckAtomForReadRef : integer16 ref atom -> false
CodeGenCheckAtomForReadRef : boolean ref atom -> false
CodeGenCheckAtomForReadRef : real ref atom -> false
CodeGenCheckAtomForReadRef : StringHandleAtom ref atom -> false
CodeGenCheckAtomForReadRef : OperatorInvokeAtom ref atom -> false
CodeGenCheckAtomForReadRef : IdentifierAtom ref atom -> false
CodeGenCheckAtomForReadRef : TypeAnnotationAtom ref atom -> false
CodeGenCheckAtomForReadRef : Statement ref atom -> false
CodeGenCheckAtomForReadRef : AtomSentinel ref atom -> false




CodeGenEmitSingleAtom : integer ref literalinteger
{
	OnBytecodePushLiteralInteger(literalinteger)
}

CodeGenEmitSingleAtom : integer16 ref literalinteger16
{
	OnBytecodePushLiteralInteger16(literalinteger16)
}

CodeGenEmitSingleAtom : boolean ref literalboolean
{
	OnBytecodePushBoolean(literalboolean)
}

CodeGenEmitSingleAtom : real ref literalreal
{
	OnBytecodePushLiteralReal(literalreal)
}

CodeGenEmitSingleAtom : StringHandleAtom ref atom
{
	OnBytecodePushLiteralString(atom.Handle)
}

CodeGenEmitSingleAtom : OperatorInvokeAtom ref atom
{
	OnBytecodeInvoke(atom.OperatorName)
}

CodeGenEmitSingleAtom : IdentifierAtom ref idatom
{
	if(idatom.IsReference)
	{
		integer frames = 0
		integer index = FindVariable(idatom.Handle, frames)
		OnBytecodeBindReference(frames, index)
	}
	else
	{
		// TODO - this is a totally sloppy hack
		if(idatom.Type == 0x01000000)					// Identifier type signature
		{
			OnBytecodePushLiteralString(idatom.Handle)
		}
		elseif(idatom.Type == 0x00000004)				// Nothing type signature
		{
			OnBytecodePushLiteralInteger(0)
		}
		elseif((idatom.Type & 0xff000000) == 0x09000000)		// Function type family signature
		{
			OnBytecodePushLiteralFunction(idatom.Handle)
		}
		else
		{
			Variable var = 0, 0, false, -1, -1
			if(!FindVariableDataInScope(EmittingFunctionName, idatom.Handle, var))
			{
				print("Variable undefined")
				assert(false)
			}

			if(var.IsReference)
			{
				OnBytecodePushVarValue(idatom.Handle, idatom.Type)
			}
			else
			{
				integer frames = 0		// TODO - globals support
				boolean isparam = false
				if(var.Origin == 1)		// VARIABLE_ORIGIN_PARAMETER
				{
					isparam = true
				}

				OnBytecodePushLocal(isparam, frames, var.Offset, 0)	// TODO - actual size? Or does this param even make sense any more?
			}
		}
	}
}

CodeGenEmitSingleAtom : TypeAnnotationAtom ref atom
{
	OnBytecodePushTypeAnnotation(atom.Type)
}

CodeGenEmitSingleAtom : Statement ref atom
{
	CodeGenEmitSingleCodeBlockEntry(atom)
}

CodeGenEmitSingleAtom : RefBinding ref atom
{
	integer memtype = GetStructureMemberType(Structures, atom.StructureName, atom.Identifier)
	integer memoffset = GetStructureMemberOffset(Structures, atom.StructureName, atom.Identifier)
	OnBytecodeBindStructReference(memtype, memoffset)
}

CodeGenEmitSingleAtom : AtomSentinel ref sentinel


GetNameOfStructureByType : integer typeid -> integer name = 0
{
	name = GetNameOfStructureByType(Structures, typeid)
}

GetNameOfStructureByType : list<StructureDefinition> ref structures, integer typeid -> integer name = 0
{
	if(structures.value.Type == typeid)
	{
		name = structures.value.Name
	}
	else
	{
		name = GetNameOfStructureByType(structures.next, typeid)
	}
}

GetNameOfStructureByType : nothing, integer typeid -> integer name = 0


GetStructureMemberType : list<StructureDefinition> ref structures, integer structurename, integer membername -> integer rtype = 0
{
	if(structures.value.Name == structurename)
	{
		rtype = GetMemberType(structures.value.Members, membername)
	}
	else
	{
		rtype = GetStructureMemberType(structures.next, structurename, membername)
	}
}

GetStructureMemberType : nothing, integer structurename, integer membername -> integer rtype = 0

GetMemberType : list<StructureMember> ref members, integer membername -> integer rtype = 0
{
	if(GetMemberName(members.value) == membername)
	{
		rtype = GetMemberTypeDecompose(members.value)
	}
	else
	{
		rtype = GetMemberType(members.next, membername)
	}
}

GetMemberType : nothing, integer membername -> integer rtype = 0

GetMemberTypeDecompose : StructureMemberVariable ref memvar -> integer rtype = memvar.Type


GetMemberName : StructureMemberVariable ref memvar -> integer name = memvar.Name


GetMemberOffset : list<StructureMember> ref members, integer membername -> integer offset = 0
{
	integer counter = 0
	GetMemberOffset(members, membername, counter)
	offset = counter
}

GetMemberOffset : list<StructureMember> ref members, integer membername, integer ref counter
{
	if(GetMemberName(members.value) != membername)
	{
		counter += GetMemberSize(members.value)
		GetMemberOffset(members.next, membername, counter)
	}
}

GetMemberOffset : nothing, integer membername, integer ref counter

GetMemberSize : StructureMemberVariable ref memvar -> integer rtype = GetTypeSize(memvar.Type)




GetStructureMemberOffset : list<StructureDefinition> ref structures, integer structurename, integer membername -> integer offset = 0
{
	if(structures.value.Name == structurename)
	{
		offset = GetMemberOffset(structures.value.Members, membername)
	}
	else
	{
		offset = GetStructureMemberOffset(structures.next, structurename, membername)
	}
}

GetStructureMemberOffset : nothing, integer structurename, integer membername -> 0



CodeGenEmitSumTypes : list<SumType> ref sumtypes
{
	CodeGenEmitSingleSumType(sumtypes.value)
	CodeGenEmitSumTypes(sumtypes.next)
}

CodeGenEmitSumTypes : nothing


CodeGenEmitSingleSumType : SumType ref sumtype
{
	if(sumtype.Type != 0)
	{
		OnBytecodeEmitByte(0x1f)			// SumTypeDef instruction
		OnBytecodeEmitInteger(sumtype.Type)
		OnBytecodeEmitInteger(CountSumTypeBases(sumtype.Bases))
		CodeGenEmitSumTypeBase(sumtype.Bases)
	}
}

CountSumTypeBases : list<integer> ref bases -> integer count = 0
{
	count = CountSumTypeBases(bases.next)

	if(bases.value != 0)	
	{
		++count
	}
}

CountSumTypeBases : nothing -> integer count = 0

CodeGenEmitSumTypeBase : list<integer> ref bases
{
	if(bases.value != 0)
	{
		OnBytecodeEmitInteger(bases.value)
	}

	CodeGenEmitSumTypeBase(bases.next)
}

CodeGenEmitSumTypeBase : nothing


SumTypeExists : integer typename -> boolean exists = SumTypeExists(SumTypes, typename)

SumTypeExists : list<SumType> ref sumtypes, integer typename -> boolean exists = false
{
	if(sumtypes.value.Name == typename)
	{
		exists = true
	}
	else
	{
		exists = SumTypeExists(sumtypes.next, typename)
	}
}

SumTypeExists : nothing, integer typename -> boolean exists = false



FunctionIsAutoGenOrHasIR : integer funcname -> boolean ret = false
{
	if(FunctionExists(Functions, funcname))
	{
		ret = true
	}
	elseif(TypeMatcherExists(TypeMatchers, funcname))
	{
		ret = true
	}
	elseif(FunctionIsAutoGen(AutoGeneratedFunctionNames, funcname))
	{
		ret = true
	}
}

FunctionExists : list<FunctionDefinition> ref funcs, integer funcname -> boolean ret = false
{
	if(funcs.value.Name == funcname)
	{
		ret = true
	}
	else
	{
		ret = FunctionExists(funcs.next, funcname)
	}
}

FunctionExists : nothing, integer funcname -> boolean ret = false


FunctionIsAutoGen : list<integer> ref genlist, integer target -> boolean ret = false
{
	if(genlist.value == target)
	{
		ret = true
	}
	else
	{
		ret = FunctionIsAutoGen(genlist.next, target)
	}
}

FunctionIsAutoGen : nothing, integer target -> boolean ret = false



TypeMatcherExists : list<TypeMatcher> ref matchers, integer matchername -> boolean ret = false
{
	if(matchers.value.Name == matchername)
	{
		ret = true
	}
	else
	{
		ret = TypeMatcherExists(matchers.next, matchername)
	}
}

TypeMatcherExists : nothing, integer matchername -> boolean ret = false



FindVariable : integer name, integer ref frames -> integer index = FindVariableInScope(EmittingFunctionName, name)
{
	// TODO - check parent aka global scope; set frames
}



FindVariableInScope : integer scopename, integer varname -> integer index = FindVariableInScopeList(Scopes, scopename, varname)

FindVariableInScopeList : list<Scope> ref scopes, integer scopename, integer varname -> integer index = -1
{
	if(scopes.value.Name == scopename)
	{
		index = 0
		FindVariableInSingleScope(scopes.value.Variables, varname, index)
	}
	else
	{
		index = FindVariableInScopeList(scopes.next, scopename, varname)
	}
}

FindVariableInScopeList : nothing, integer scopename, integer varname -> integer index = -1

FindVariableInSingleScope : list<Variable> ref vars, integer varname, integer ref index
{
	if(vars.value.Name != varname)
	{
		if(vars.value.Name != 0)
		{
			++index
		}

		FindVariableInSingleScope(vars.next, varname, index)
	}
}

FindVariableInSingleScope : nothing, integer varname, integer ref index
{
	index = -1
}


FindReturnVariableIndex : -> integer index = FindReturnVariableInScopeList(Scopes, EmittingFunctionName)

FindReturnVariableInScopeList : list<Scope> ref scopes, integer scopename -> integer index = -1
{
	if(scopes.value.Name == scopename)
	{
		index = 0
		FindReturnVariableInSingleScope(scopes.value.Variables, index)
	}
	else
	{
		index = FindReturnVariableInScopeList(scopes.next, scopename)
	}
}

FindReturnVariableInSingleScope : list<Variable> ref vars, integer ref index
{
	if(vars.value.Origin != 2)		// VARIABLE_ORIGIN_RETURN
	{
		if(vars.value.Name != 0)
		{
			++index
		}

		FindReturnVariableInSingleScope(vars.next, index)
	}
}

FindReturnVariableInSingleScope : nothing, integer ref index
{
	index = -1
}


FindVariableType : integer varname -> integer rettype = 0
{
	Variable var = 0, 0, false, 0, 0
	FindVariableDataInScope(EmittingFunctionName, varname, var)
	rettype = var.VarType
}


FindVariableDataInScope : integer scopename, integer varname, Variable ref outvar 
	->
	boolean found = FindVariableDataInScopeList(Scopes, scopename, varname, outvar)

FindVariableDataInScopeList : list<Scope> ref scopes, integer scopename, integer varname, Variable ref outvar -> boolean found = false
{
	if(scopes.value.Name == scopename)
	{
		found = FindVariableDataInSingleScope(scopes.value.Variables, varname, outvar)
	}
	else
	{
		found = FindVariableDataInScopeList(scopes.next, scopename, varname, outvar)
	}
}

FindVariableDataInScopeList : nothing, integer scopename, integer varname, Variable ref outvar -> boolean found = false

FindVariableDataInSingleScope : list<Variable> ref vars, integer varname, Variable ref outvar -> boolean found = false
{
	if(vars.value.Name == varname)
	{
		outvar = vars.value
		found = true
	}
	else
	{
		found = FindVariableDataInSingleScope(vars.next, varname, outvar)
	}
}

FindVariableDataInSingleScope : nothing, integer varname, Variable ref outvar -> boolean found = false



CodeGenEmitTypeMatchers : list<TypeMatcher> ref matchers
{
	if(matchers.value.Name != 0)
	{
		CodeGenEmitSingleTypeMatcher(matchers.value)
	}

	CodeGenEmitTypeMatchers(matchers.next)
}

CodeGenEmitTypeMatchers : nothing


CodeGenEmitSingleTypeMatcher : TypeMatcher ref matcher
{
	OnBytecodeLexicalScope(matcher.Name, 0, 0)
	OnBytecodeEnterTypeResolver(matcher.Name)
	CodeGenEmitTypeMatcherOverloads(matcher.Overloads)
	OnBytecodeExitTypeResolver()
}


OnCodeGenRegisterTypeMatchParam : integer matchername, integer overloadname, integer varname, integer vartype, boolean isref
{
	Parameter p = varname, vartype, isref
	FindTypeMatcherAndAppendOverloadParameter(TypeMatchers, matchername, overloadname, p)
}

FindTypeMatcherAndAppendOverloadParameter : list<TypeMatcher> ref matchers, integer matchername, integer overloadname, Parameter ref p
{
	if(matchers.value.Name == matchername)
	{
		FindTMOverloadAndAppendParameter(matchers.value.Overloads, matchers.value.Overloads, overloadname, p)
	}
	else
	{
		FindTypeMatcherAndAppendOverloadParameter(matchers.next, matchername, overloadname, p)
	}
}

FindTypeMatcherAndAppendOverloadParameter : nothing, integer matchername, integer overloadname, Parameter ref p
{
	print("No type matcher available")
	assert(false)
}

FindTMOverloadAndAppendParameter : list<FunctionSignature> ref originallist, list<FunctionSignature> ref signatures, integer overloadname, Parameter ref p
{
	if(signatures.value.Name == overloadname)
	{
		AppendParameter(signatures.value.Parameters, p)
	}
	else
	{
		FindTMOverloadAndAppendParameter(originallist, signatures.next, overloadname, p)
	}
}

FindTMOverloadAndAppendParameter : list<FunctionSignature> ref originallist, nothing, integer overloadname, Parameter ref p
{
	list<Parameter> paramlist = p, nothing
	FunctionSignature sig = overloadname, paramlist, 0
	prepend<FunctionSignature>(originallist, sig)
}

AppendParameter : list<Parameter> ref params, Parameter ref p
{
	AppendParameterRecurse(params, params.next, p)
}

AppendParameterRecurse : list<Parameter> ref params, list<Parameter> ref tail, Parameter ref p
{
	AppendParameterRecurse(tail, tail.next, p)
}

AppendParameterRecurse : list<Parameter> ref params, nothing, Parameter ref p
{
	list<Parameter> newlist = p, nothing
	params.next = newlist
}


CodeGenEmitTypeMatcherOverloads : list<FunctionSignature> ref signatures
{
	if(signatures.value.Name != 0)
	{
		OnBytecodeEmitByte(0x20)				// TypeMatch instruction
		OnBytecodeEmitInteger(signatures.value.Name)
		OnBytecodeEmitInteger(0)
		OnBytecodeEmitInteger(CountParameters(signatures.value.Parameters))
		
		CodeGenEmitTypeMatcherParams(signatures.value.Parameters)
	}

	CodeGenEmitTypeMatcherOverloads(signatures.next)
}

CodeGenEmitTypeMatcherOverloads : nothing


CountParameters : list<Parameter> ref params -> integer count = 0
{
	count = CountParameters(params.next)

	if(params.value.Name != 0)
	{
		++count
	}
}

CountParameters : nothing -> integer count = 0


CodeGenEmitTypeMatcherParams : list<Parameter> ref params
{
	if(params.value.Name != 0)
	{
		integer refflag = 0
		if(params.value.IsReference)
		{
			refflag = 1
		}

		OnBytecodeEmitByte(refflag)
		OnBytecodeEmitInteger(params.value.Type)
	}

	CodeGenEmitTypeMatcherParams(params.next)
}

CodeGenEmitTypeMatcherParams : nothing



OnCodeGenRegisterFunctionInvokeTag : integer funcname, integer invoketarget
{
	FindFunctionAndSetInvokeTag(Functions, funcname, invoketarget)
}

FindFunctionAndSetInvokeTag : list<FunctionDefinition> ref functions, integer funcname, integer invoketarget
{
	if(functions.value.Name == funcname)
	{
		functions.value.InvokeTag = invoketarget
	}
	else
	{
		FindFunctionAndSetInvokeTag(functions.next, funcname, invoketarget)
	}
}

FindFunctionAndSetInvokeTag : nothing, integer funcname, integer invoketarget
{
	print("Cannot tag non-existent function")
	assert(false)
}

OnCodeGenRegisterFunctionTag : integer funcname, string tagname
{
	FunctionTag tag = funcname, tagname, dummytagparams
	prepend<FunctionTag>(FunctionTags, tag)
}

OnCodeGenRegisterFunctionTagParam : integer funcname, string tagname, string param
{
	// TODO - less lazy implementation (find function and tag)
	AppendFunctionTagParam(FunctionTags.value.Parameters, FunctionTags.value.Parameters.next, param)
}

AppendFunctionTagParam : list<string> ref params, list<string> ref tail, string param
{
	AppendFunctionTagParam(tail, tail.next, param)
}

AppendFunctionTagParam : list<string> ref params, nothing, string param
{
	list<string> newlist = param, nothing
	params.next = newlist
}


CodeGenEmitFunctionTags : list<FunctionTag> ref tags
{
	CodeGenEmitSingleFunctionTag(tags.value)
	CodeGenEmitFunctionTags(tags.next)
}

CodeGenEmitFunctionTags : nothing


CodeGenEmitSingleFunctionTag : FunctionTag ref tag
{
	if(tag.FunctionName != 0)
	{
		if(tag.TagName != "")
		{
			OnBytecodeEmitByte(0x1a)
			OnBytecodeEmitInteger(tag.FunctionName)
			OnBytecodeEmitInteger(CountTagParams(tag.Parameters))
			OnBytecodeEmitString(tag.TagName)

			CodeGenEmitFunctionTagParams(tag.Parameters)
		}
	}
}


CodeGenEmitFunctionTagParams : list<string> ref params
{
	if(params.value != "")
	{
		OnBytecodeEmitString(params.value)
	}

	CodeGenEmitFunctionTagParams(params.next)
}

CodeGenEmitFunctionTagParams : nothing


CountTagParams : list<string> ref params -> integer count = 0
{
	count = CountTagParams(params.next)
	if(params.value != "")
	{
		++count
	}
}

CountTagParams : nothing -> integer count = 0


CodeGenEmitConstructors : list<StructureDefinition> ref structures
{
	if(structures.value.Name != 0)
	{
		EmitCtorTag(structures.value.ConstructorName)
		EmitCtorTag(structures.value.AnonConstructorName)
		EmitCtorTag(structures.value.CopyConstructorName)

		EmitConstructor(structures.value)
		//EmitAnonConstructor(structures.value)
		//EmitCopyConstructor(structures.value)
	}

	CodeGenEmitConstructors(structures.next)
}

CodeGenEmitConstructors : nothing

EmitCtorTag : integer funcname
{
	OnBytecodeEmitByte(0x1a)
	OnBytecodeEmitInteger(funcname)
	OnBytecodeEmitInteger(0)
	OnBytecodeEmitString("@@autogen@constructor")
}


EmitConstructor : StructureDefinition ref def
{
	integer idhandle = FindString(GlobalStrings, "identifier")

	OnBytecodeLexicalScope(def.ConstructorName, 0, CountMembers(def.Members) + 1)
	OnBytecodeLexicalScopeEntry(idhandle, 0x01000000, true, 1)
	EmitScopeEntriesForMembers(def.Members)

	OnBytecodeEnterFunction(def.ConstructorName)
	OnBytecodeAllocStructure(def.Type)
	OnBytecodeBindReference(0, 0)
	OnBytecodeAssign()

	EmitMemberDataCopies(def.Members, idhandle)

	OnBytecodeExitFunction()
}

EmitScopeEntriesForMembers : list<StructureMember> ref members
{
	EmitScopeEntryForMember(members.value)
	EmitScopeEntriesForMembers(members.next)
}

EmitScopeEntriesForMembers : nothing


EmitScopeEntryForMember : StructureMemberVariable ref memvar
{
	if(memvar.Name != 0)
	{
		OnBytecodeLexicalScopeEntry(memvar.Name, memvar.Type, false, 1)
	}
}


EmitMemberDataCopies : list<StructureMember> ref members, integer idhandle
{
	EmitMemberDataCopy(members.value, idhandle)
	EmitMemberDataCopies(members.next, idhandle)
}

EmitMemberDataCopies : nothing, integer idhandle

EmitMemberDataCopy : StructureMemberVariable ref memvar, integer idhandle
{
	if(memvar.Name != 0)
	{
		OnBytecodePushVarValue(memvar.Name, memvar.Type)
		OnBytecodeCopyToStructure(idhandle, memvar.Name)
	}
}


FindString : list<StringTableEntry> ref strings, string target -> integer handle = 0
{
	if(strings.value.Data == target)
	{
		handle = strings.value.Handle
	}
	else
	{
		handle = FindString(strings.next, target)
	}
}

FindString : nothing, string target -> integer handle = 0



GetNameOfType : integer typeid -> integer name = 0
{
	if(typeid == 0x01000001)
	{
		name = FindString(GlobalStrings, "integer")
	}
	elseif(typeid == 0x02000000)
	{
		name = FindString(GlobalStrings, "string")
	}
	else
	{
		print("Unknown type")
		assert(false)
	}
}



//
// Global state (just a hack while we bootstrap!)
//

global
{
	buffer Hack = 102400
	integer HackSize = 0

	list<StringTableEntry> GlobalStrings = StringTableEntry(0, ""), nothing

	Variable dummyvar = 0, 0, false, 0, 0
	list<Variable> dummyvarlist = dummyvar, nothing
	Scope dummyscope = 0, 0, dummyvarlist, 0, 0
	list<Scope> Scopes = dummyscope, nothing

	FunctionDefinition dummyfunc = 0, nothing, nothing, false, 0
	list<FunctionDefinition> Functions = dummyfunc, nothing


	list<integer> dummybases = 0, nothing
	SumType dummysumtype = 0, 0, dummybases
	list<SumType> SumTypes = dummysumtype, nothing


	StructureMemberVariable dummymember = 0, 0
	list<StructureMember> dummymembers = dummymember, nothing
	StructureDefinition dummystruct = 0, 0, 0, 0, 0, dummymembers
	list<StructureDefinition> Structures = dummystruct, nothing


	// TODO - convert to an enumeration
	integer STACK_TYPE_GLOBAL = 0
	integer STACK_TYPE_FUNCTION = 1
	integer STACK_TYPE_CODEBLOCK = 2
	integer STACK_TYPE_STATEMENT = 3
	integer STACK_TYPE_ASSIGNMENT = 4
	integer STACK_TYPE_TYPEMATCH = 5
	integer STACK_TYPE_SUBSTATEMENT = 6
	integer STACK_TYPE_FUNCRET = 7

	ContextStackEntry GlobalStackEntry = STACK_TYPE_GLOBAL, 0
	list<ContextStackEntry> ContextStack = GlobalStackEntry, nothing

	AtomSentinel dummysentinel = 0
	list<ExpressionAtom> dummyatomlist = dummysentinel, nothing
	Expression dummyexpression = dummyatomlist
	list<Expression> ScratchExpressions = dummyexpression, nothing
	Statement dummystatement = 0, nothing, 0
	list<Statement> SubStatements = dummystatement, nothing

	Parameter dummyparam = 0, 0, false
	list<Parameter> dummyparamlist = dummyparam, nothing
	FunctionSignature dummysignature = 0, dummyparamlist, 0
	list<FunctionSignature> dummysignaturelist = dummysignature, nothing
	TypeMatcher dummytypematch = 0, dummysignaturelist
	list<TypeMatcher> TypeMatchers = dummytypematch, nothing


	list<string> dummytagparams = "", nothing
	FunctionTag dummytag = 0, "", dummytagparams
	list<FunctionTag> FunctionTags = dummytag, nothing

	integer EmittingFunctionName = 0


	list<integer> AutoGeneratedFunctionNames = 0, nothing
}

