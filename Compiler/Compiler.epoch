//
// Epoch Compiler
// Compiler.epoch
//
// Monolithic self-hosting compiler
//
// Support for separate compilation is desirable so this file is less of a mess.
//

type listnode<type T> : list<T> | nothing

structure list<type T> :
	T value,
	listnode<T> next


prepend<type T> : list<T> ref thelist, T ref value
{
	list<T> newlist = value, thelist
	thelist = newlist
}

map<type T> : list<T> ref thelist, (func : T)
{
	func(thelist.value)
	map<T>(thelist.next, func)
}

map<type T> : nothing, (func : T)
{
}



//
// API for registering plugins with the C++ compiler
//
RegisterFunc : string name, (funcptr : ) 						[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : integer) 					[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : string) 						[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : boolean) 					[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : integer, integer)				[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : integer, string)					[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : integer, integer, integer)			[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : integer, integer, boolean, integer)		[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : integer, integer, integer, boolean, integer)	[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : boolean, integer, integer, integer)		[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : -> integer) 					[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]
RegisterFunc : string name, (funcptr : -> buffer) 					[external("EpochCompiler.dll", "RegisterPluginFunction", "stdcall")]



//
// Entrypoint - called when the plugin is loaded
//
// Performs function registration with the C++ compiler
//
entrypoint :
{
	RegisterFunc("PluginOnCompileStart", OnCompileStart)

	RegisterBytecodePlugin()
	RegisterCodeGenPlugin()
}


RegisterBytecodePlugin :
{
	RegisterFunc("PluginBytecodeEmitByte", OnBytecodeEmitByte)
	RegisterFunc("PluginBytecodeEmitBytes", OnBytecodeEmitBytes)
	RegisterFunc("PluginBytecodeEmitString", OnBytecodeEmitString)
	RegisterFunc("PluginBytecodeEmitInteger", OnBytecodeEmitInteger)
	RegisterFunc("PluginBytecodeEmitBoolean", OnBytecodeEmitBoolean)

	RegisterFunc("PluginBytecodeGetBuffer", OnBytecodeGetBuffer)
	RegisterFunc("PluginBytecodeGetSize", OnBytecodeGetSize)

	RegisterFunc("PluginBytecodePoolString", OnBytecodePoolString)
	RegisterFunc("PluginBytecodeLexicalScope", OnBytecodeLexicalScope)
	RegisterFunc("PluginBytecodeLexicalScopeEntry", OnBytecodeLexicalScopeEntry)
	RegisterFunc("PluginBytecodeInvokeOffset", OnBytecodeInvokeOffset)
	RegisterFunc("PluginBytecodeHalt", OnBytecodeHalt)
	RegisterFunc("PluginBytecodeEnterFunction", OnBytecodeEnterFunction)
	RegisterFunc("PluginBytecodeExitFunction", OnBytecodeExitFunction)
	RegisterFunc("PluginBytecodeInvoke", OnBytecodeInvoke)
	RegisterFunc("PluginBytecodeEnterEntity", OnBytecodeEnterEntity)
	RegisterFunc("PluginBytecodeExitEntity", OnBytecodeExitEntity)
	RegisterFunc("PluginBytecodeBeginChain", OnBytecodeBeginChain)
	RegisterFunc("PluginBytecodeEndChain", OnBytecodeEndChain)
	RegisterFunc("PluginBytecodeDefineStructure", OnBytecodeDefineStructure)
	RegisterFunc("PluginBytecodeStructureMember", OnBytecodeStructureMember)
	RegisterFunc("PluginBytecodeReadReference", OnBytecodeReadReference)
	RegisterFunc("PluginBytecodeReadReferenceAnnotated", OnBytecodeReadReferenceAnnotated)
	RegisterFunc("PluginBytecodeAllocStructure", OnBytecodeAllocStructure)
	RegisterFunc("PluginBytecodeBindReference", OnBytecodeBindReference)
	RegisterFunc("PluginBytecodeAssign", OnBytecodeAssign)
	RegisterFunc("PluginBytecodePushVarValue", OnBytecodePushVarValue)
	RegisterFunc("PluginBytecodeCopyBuffer", OnBytecodeCopyBuffer)
	RegisterFunc("PluginBytecodeCopyStructure", OnBytecodeCopyStructure)
	RegisterFunc("PluginBytecodeCopyToStructure", OnBytecodeCopyToStructure)
	RegisterFunc("PluginBytecodeSetReturnRegister", OnBytecodeSetReturnRegister)
	RegisterFunc("PluginBytecodePushVarNoCopy", OnBytecodePushVarNoCopy)
	RegisterFunc("PluginBytecodeInvokeIndirect", OnBytecodeInvokeIndirect)
	RegisterFunc("PluginBytecodeEnterPatternResolver", OnBytecodeEnterPatternResolver)
	RegisterFunc("PluginBytecodeExitPatternResolver", OnBytecodeExitPatternResolver)
	RegisterFunc("PluginBytecodeConstructSumType", OnBytecodeConstructSumType)
	RegisterFunc("PluginBytecodeEnterTypeResolver", OnBytecodeEnterTypeResolver)
	RegisterFunc("PluginBytecodeExitTypeResolver", OnBytecodeExitTypeResolver)
	RegisterFunc("PluginBytecodePopStack", OnBytecodePopStack)
	RegisterFunc("PluginBytecodeBindStructReference", OnBytecodeBindStructReference)
	RegisterFunc("PluginBytecodePushType", OnBytecodePushType)
	RegisterFunc("PluginBytecodeAssignSumType", OnBytecodeAssignSumType)
	RegisterFunc("PluginBytecodePushLocal", OnBytecodePushLocal)

	print("Epoch Compiler - bytecode emitter plugin registered")
}

RegisterCodeGenPlugin :
{
	RegisterFunc("PluginCodeGenProcessProgram", OnCodeGenProcessProgram)

	RegisterFunc("PluginCodeGenRegisterString", OnCodeGenRegisterString)
	RegisterFunc("PluginCodeGenRegisterScope", OnCodeGenRegisterScope)
	RegisterFunc("PluginCodeGenRegisterVariable", OnCodeGenRegisterVariable)
	RegisterFunc("PluginCodeGenRegisterFunction", OnCodeGenRegisterFunction)

	RegisterFunc("PluginCodeGenEnterFunctionBody", OnCodeGenEnterFunctionBody)
	RegisterFunc("PluginCodeGenEnterStatement", OnCodeGenEnterStatement)
	RegisterFunc("PluginCodeGenExit", OnCodeGenExitContext)

	print("Epoch Compiler - code generation plugin registered")
}


//
// Callback for when compilation on a program begins
//
OnCompileStart :
{
	print("Epoch Compiler - compilation started")
}


//
// Callback used to emit a byte to a bytecode stream
//
OnBytecodeEmitByte : integer b
{
	writebuffer(Hack, HackSize, b)
	++HackSize
}

//
// Callback used to emit a series of bytes to a bytecode stream
//
OnBytecodeEmitBytes : integer bytes, integer size
{
	writebuffer(Hack, HackSize, bytes, size)
	HackSize += size
}


//
// Callback used to retrieve a bytecode stream's pointer
//
OnBytecodeGetBuffer : -> buffer ret = Hack


//
// Callback used to retrieve the size of a bytecode stream
//
OnBytecodeGetSize : -> integer size = HackSize



OnBytecodeEmitInteger : integer value
{
	writebuffer(Hack, HackSize, (value) & 0xff)
	++HackSize
	writebuffer(Hack, HackSize, (value / 0x100) & 0xff)
	++HackSize
	writebuffer(Hack, HackSize, (value / 0x10000) & 0xff)
	++HackSize
	writebuffer(Hack, HackSize, (value / 0x1000000) & 0xff)
	++HackSize
}

OnBytecodeEmitString : string value
{
	integer len = (length(value) + 1) * 2
	writebuffer(Hack, HackSize, value, len)
	HackSize += len
}

OnBytecodeEmitBoolean : boolean value
{
	OnBytecodeEmitByte(cast(integer, value))
}


OnBytecodePoolString : integer handle, string data
{
	OnBytecodeEmitByte(0x10)			// PoolString instruction
	OnBytecodeEmitInteger(handle)
	OnBytecodeEmitString(data)
}

OnBytecodeLexicalScope : integer name, integer parent, integer count
{
	OnBytecodeEmitByte(0x11)			// DefineLexicalScope instruction
	OnBytecodeEmitInteger(name)
	OnBytecodeEmitInteger(parent)
	OnBytecodeEmitInteger(count)
}

OnBytecodeLexicalScopeEntry : integer varname, integer vartype, boolean isreference, integer origin
{
	OnBytecodeEmitInteger(varname)
	OnBytecodeEmitInteger(vartype)
	OnBytecodeEmitInteger(origin)
	OnBytecodeEmitBoolean(isreference)
}

OnBytecodeInvokeOffset : integer name
{
	OnBytecodeEmitByte(0x27)			// InvokeOffset instruction
	OnBytecodeEmitInteger(name)
	OnBytecodeEmitInteger(0)
}

OnBytecodeHalt :
{
	OnBytecodeEmitByte(0x00)			// Halt instruction
}

OnBytecodeEnterFunction : integer name
{
	OnBytecodeEmitByte(0x0b)			// BeginEntity instruction
	OnBytecodeEmitInteger(0x01)			// EntityTags::Function
	OnBytecodeEmitInteger(name)
}

OnBytecodeExitFunction :
{
	OnBytecodeEmitByte(0x09)			// Return instruction
	OnBytecodeEmitByte(0x0c)			// EndEntity instruction
}

OnBytecodeInvoke : integer target
{
	OnBytecodeEmitByte(0x07)			// Invoke instruction
	OnBytecodeEmitInteger(target)
}

OnBytecodeEnterEntity : integer tag, integer name
{
	OnBytecodeEmitByte(0x0b)			// BeginEntity instruction
	OnBytecodeEmitInteger(tag)
	OnBytecodeEmitInteger(name)
}

OnBytecodeExitEntity :
{
	OnBytecodeEmitByte(0x0c)			// EndEntity instruction
}

OnBytecodeBeginChain :
{
	OnBytecodeEmitByte(0x0d)			// BeginChain instruction
}

OnBytecodeEndChain :
{
	OnBytecodeEmitByte(0x0e)			// EndChain instruction
}

OnBytecodeDefineStructure : integer typeid, integer nummembers
{
	OnBytecodeEmitByte(0x14)			// DefineStructure instruction
	OnBytecodeEmitInteger(typeid)
	OnBytecodeEmitInteger(nummembers)
}

OnBytecodeStructureMember : integer name, integer typeid
{
	OnBytecodeEmitInteger(name)
	OnBytecodeEmitInteger(typeid)
}

OnBytecodeReadReference :
{
	OnBytecodeEmitByte(0x17)			// ReadRef instruction
}

OnBytecodeReadReferenceAnnotated :
{
	OnBytecodeEmitByte(0x24)			// ReadRefAnnotated instruction
}

OnBytecodeAllocStructure : integer typeid
{
	OnBytecodeEmitByte(0x13)			// AllocStructure instruction
	OnBytecodeEmitInteger(typeid)
}

OnBytecodeBindReference : integer frameskip, integer index
{
	OnBytecodeEmitByte(0x03)			// BindRef instruction
	OnBytecodeEmitInteger(frameskip)
	OnBytecodeEmitInteger(index)
}

OnBytecodeAssign :
{
	OnBytecodeEmitByte(0x06)			// Assign instruction
}

OnBytecodePushVarValue : integer name, integer typeid
{
	OnBytecodeEmitByte(0x05)			// Read instruction
	OnBytecodeEmitInteger(name)

	integer family = typeid & 0xff000000

	if(typeid == 0x02000001)			// Buffer type signature
	{
		OnBytecodeCopyBuffer()
	}
	elseif(family == 0x03000000)			// Structure family signature
	{
		OnBytecodeCopyStructure()
	}
	elseif(family == 0x08000000)			// Template instance family signature
	{
		OnBytecodeCopyStructure()
	}
}

OnBytecodeCopyBuffer :
{
	OnBytecodeEmitByte(0x19)			// CopyBuffer instruction
}

OnBytecodeCopyStructure :
{
	OnBytecodeEmitByte(0x1b)			// CopyStructure instruction
}

OnBytecodeCopyToStructure : integer structurename, integer membername
{
	OnBytecodeEmitByte(0x16)			// CopyToStructure instruction
	OnBytecodeEmitInteger(structurename)
	OnBytecodeEmitInteger(membername)
}

OnBytecodeSetReturnRegister : integer varindex
{
	OnBytecodeEmitByte(0x0a)			// SetRetVal instruction
	OnBytecodeEmitInteger(varindex)
}

OnBytecodePushVarNoCopy : integer varname
{
	OnBytecodeEmitByte(0x05)			// Read instruction
	OnBytecodeEmitInteger(varname)
}

OnBytecodeInvokeIndirect : integer varname
{
	OnBytecodeEmitByte(0x08)			// InvokeIndirect instruction
	OnBytecodeEmitInteger(varname)
}

OnBytecodeEnterPatternResolver : integer name
{
	OnBytecodeEmitByte(0x0b)			// BeginEntity instruction
	OnBytecodeEmitInteger(0x02)			// EntityTags::PatternMatchingResolver
	OnBytecodeEmitInteger(name)
}

OnBytecodeExitPatternResolver :
{
	OnBytecodeHalt()
	OnBytecodeEmitByte(0x0c)			// EndEntity instruction
}

OnBytecodeConstructSumType :
{
	OnBytecodeEmitByte(0x21)			// ConstructSumType instruction
}

OnBytecodeEnterTypeResolver : integer name
{
	OnBytecodeEmitByte(0x0b)			// BeginEntity instruction
	OnBytecodeEmitInteger(0x05)			// EntityTags::TypeResolver
	OnBytecodeEmitInteger(name)
}

OnBytecodeExitTypeResolver :
{
	OnBytecodeHalt()
	OnBytecodeEmitByte(0x0c)			// EndEntity instruction
}

OnBytecodePopStack : integer bytes
{
	OnBytecodeEmitByte(0x04)			// Pop instruction
	OnBytecodeEmitInteger(bytes)
}

OnBytecodeBindStructReference : integer membertype, integer memberoffset
{
	OnBytecodeEmitByte(0x18)			// BindMemberRef instruction
	OnBytecodeEmitInteger(membertype)
	OnBytecodeEmitInteger(memberoffset)
}

OnBytecodePushType : integer typeid
{
	OnBytecodeEmitByte(0x02)			// Push instruction
	OnBytecodeEmitInteger(0x01000001)		// Integer type signature
	OnBytecodeEmitInteger(typeid)
}

OnBytecodeAssignSumType :
{
	OnBytecodeEmitByte(0x23)			// AssignSumType instruction
}

OnBytecodePushLocal : boolean isparam, integer frameskip, integer offset, integer size
{
	if(isparam)
	{
		OnBytecodeEmitByte(0x26)		// ReadParam instruction
	}
	else
	{
		OnBytecodeEmitByte(0x25)		// ReadStack instruction
	}

	OnBytecodeEmitInteger(frameskip)
	OnBytecodeEmitInteger(offset)
	OnBytecodeEmitInteger(size)
}


//
// Code generation
//


structure StringTableEntry :
	integer Handle,
	string Data

structure StructureMemberVariable :
	integer Name,
	integer Type

// TODO - support for function signatures
structure StructureMemberFunctionRef :
	integer Name


type StructureMember : StructureMemberVariable | StructureMemberFunctionRef

structure StructureDefinition :
	list<StructureMember> Members


structure Expression :
	boolean dummy

type OptionalExpression : Expression | nothing


structure Statement :
	integer Name


structure CodeBlock :
	list<Statement> Entries

type OptionalCodeBlock : CodeBlock | nothing


structure FunctionDefinition :
	integer Name,
	OptionalExpression Return,
	OptionalCodeBlock Code


structure Variable :
	integer Name,
	integer VarType,
	boolean IsReference,
	integer Origin

structure Scope :
	integer Name,
	integer ParentName,
	list<Variable> Variables



OnCodeGenProcessProgram :
{
	print("Emitting program...")
	CodeGenEmitStrings(GlobalStrings)
	CodeGenEmitScopes(Scopes)
	CodeGenEmitFunctions(Functions)
	print("Done.")
}

OnCodeGenRegisterString : integer handle, string data
{
	StringTableEntry entry = handle, data
	prepend<StringTableEntry>(GlobalStrings, entry)
}

OnCodeGenRegisterStructureMemVar : integer structurename, integer membername, integer membertype
{
	// TODO - find structure and append member
}

OnCodeGenRegisterScope : integer scopename, integer parentname
{
	Scope scope = scopename, parentname, dummyvarlist
	prepend<Scope>(Scopes, scope)
}

OnCodeGenRegisterVariable : integer scopename, integer varname, integer vartype, boolean isref, integer origin
{
	// TODO - store variable metadata
}

OnCodeGenRegisterFunction : integer funcname
{
	FunctionDefinition func = funcname, nothing, nothing
	prepend<FunctionDefinition>(Functions, func)
}

OnCodeGenEnterFunctionBody : integer funcname
{
	// TODO - set up a stack of contexts
}

OnCodeGenExitContext :
{
	// TODO - pop context off stack
}


OnCodeGenEnterStatement : integer statementname
{
	// TODO - this is a total hack!

	list<Statement> stmtlist = Statement(statementname), nothing
	CodeBlock block = stmtlist

	SetFunctionCodeBlock(Functions.value, block)
}


SetFunctionCodeBlock : FunctionDefinition ref funcdef, CodeBlock ref block
{
	funcdef.Code = block
}

SetFunctionCodeBlock : nothing, CodeBlock ref block
{
	print("Error - missing function definition")
	assert(false)
}


CodeGenEmitStrings : list<StringTableEntry> ref table
{
	map<StringTableEntry>(table, CodeGenEmitSingleString)
}

CodeGenEmitSingleString : StringTableEntry entry			// TODO - this should be passed by ref
{
	if(entry.Handle != 0)
	{
		OnBytecodePoolString(entry.Handle, entry.Data)
	}
}


CodeGenEmitScopes : list<Scope> ref scopes
{
	CodeGenEmitSingleScope(scopes.value)
	CodeGenEmitScopes(scopes.next)
}

CodeGenEmitScopes : nothing
{
}

CodeGenEmitSingleScope : Scope ref scope
{
	OnBytecodeLexicalScope(scope.Name, scope.ParentName, 0)		// TODO - support scopes with variables in them
}


CodeGenEmitFunctions : list<FunctionDefinition> ref table
{
	CodeGenEmitSingleFunction(table.value)
	CodeGenEmitFunctions(table.next)
}

CodeGenEmitFunctions : nothing
{
}


CodeGenEmitSingleFunction : FunctionDefinition ref def
{
	if(def.Name != 0)
	{
		OnBytecodeEnterFunction(def.Name)
		CodeGenEmitCodeBlock(def.Code)
		OnBytecodeExitFunction()
	}
}


CodeGenEmitCodeBlock : CodeBlock ref block
{
	CodeGenEmitStatements(block.Entries)
}

CodeGenEmitCodeBlock : nothing
{
}



CodeGenEmitStatements : list<Statement> ref entries
{
	CodeGenEmitSingleStatement(entries.value)
	CodeGenEmitStatements(entries.next)
}

CodeGenEmitStatements : nothing
{
}


CodeGenEmitSingleStatement : Statement ref s
{
	OnBytecodeInvoke(s.Name)
}


//
// Global state (just a hack while we bootstrap!)
//

global
{
	buffer Hack = 102400
	integer HackSize = 0

	list<StringTableEntry> GlobalStrings = StringTableEntry(0, ""), nothing

	Variable dummyvar = 0, 0, false, 0
	list<Variable> dummyvarlist = dummyvar, nothing
	Scope dummyscope = 0, 0, dummyvarlist
	list<Scope> Scopes = dummyscope, nothing

	FunctionDefinition dummyfunc = 0, nothing, nothing
	list<FunctionDefinition> Functions = dummyfunc, nothing
}
