//
// EXE generation stuff
//

RoundUp : integer in -> integer out = ((in / 0x1000) + 1) * 0x1000			// TODO - this over-estimates if in is a perfect multiple of 0x1000

WriteFile : integer handle, buffer ref data, integer numbytes, integer ref written, integer ignored2 -> boolean ret = false [external("Kernel32.dll", "WriteFile", "stdcall")]



structure ResourceDirectoryHeader :
	integer Characteristics,
	integer TimeDateStamp,
	integer MajorVersion,				// TODO - compiler bug? JIT bug? If these are integer16 the Children node is misinterpreted during type matching
	integer MinorVersion,
	listnode<ResourceDirectoryEntry> Children
	
structure ResourceDirectoryEntry :
	integer Name,
	integer OffsetToData,
	listnode<ResourceDirectoryHeader> HeaderChildren,
	listnode<ResourceDirectoryLeaf> LeafChildren
	
structure ResourceDirectoryLeaf :
	integer OffsetToData,
	integer Size,
	integer CodePage,
	integer Reserved

	
structure ResourceHandler :
	ResourceDirectoryHeader ref DirectoryRoot,
	integer DirectorySize,
	integer DataSize,
	list<IconReference> ref Icons,
	integer IconCounter,
	integer IconGroupCounter
	
	
structure IconReference :
	string FileName,
	integer GroupID,
	integer ID,
	integer BeginOffset,
	integer Size,
	IconDirectoryEntry ref Details
	

structure IconDirectoryEntry :
	integer PackedWHCR,
	integer16 Planes,
	integer16 BitCount,
	integer BytesInResource,
	integer ImageOffset
	
structure IconDirectoryHeader :
	integer16 Reserved,
	integer16 Type,
	integer16 Count
	
	
ResourceAdd : ResourceHandler ref res, integer typeid, integer resid, integer langid, integer size
{
	ResourceAddResID(res, typeid, resid)
	
	if(ResourceLangExists(res.DirectoryRoot.Children, typeid, resid, langid))
	{
		return()
	}
	
	ResourceWalkToAddResLang(res.DirectoryRoot.Children, typeid, resid, langid, size)
}


ResourceLangExists : list<ResourceDirectoryEntry> ref typeentries, integer typeid, integer resid, integer langid -> boolean found = false
{
	if(typeentries.value.Name == typeid)
	{
		found = ResourceLangExistsUnderTypeHeader(typeentries.value.HeaderChildren, resid, langid)
	}
	else
	{
		found = ResourceLangExists(typeentries.next, typeid, resid, langid)
	}
}


ResourceLangExistsUnderTypeHeader : list<ResourceDirectoryHeader> ref residheaders, integer resid, integer langid -> boolean found = false
{
	if(ResourceLangExistsUnderType(residheaders.value.Children, resid, langid))
	{
		found = true
	}
	else
	{
		found = ResourceLangExistsUnderTypeHeader(residheaders.next, resid, langid)
	}
}

ResourceLangExistsUnderTypeHeader : nothing, integer resid, integer langid -> false


ResourceLangExistsUnderType : list<ResourceDirectoryEntry> ref residentries, integer resid, integer langid -> boolean found = false
{
	if(residentries.value.Name == resid)
	{
		found = ResourceLangExistsUnderLangHeader(residentries.value.HeaderChildren, langid)
	}
	else
	{
		found = ResourceLangExistsUnderType(residentries.next, resid, langid)
	}
}

ResourceLangExistsUnderType : nothing, integer resid, integer langid -> false


ResourceLangExistsUnderLangHeader : list<ResourceDirectoryHeader> ref langheaders, integer langid -> boolean found = false
{
	if(ResourceLangExistsUnderLang(langheaders.value.Children, langid))
	{
		found = true
	}
	else
	{
		found = ResourceLangExistsUnderLangHeader(langheaders.next, langid)
	}
}

ResourceLangExistsUnderLangHeader : nothing, integer langid -> false


ResourceLangExistsUnderLang : list<ResourceDirectoryEntry> ref langs, integer langid -> boolean found = false
{
	if(langs.value.Name == langid)
	{
		found = true
	}
	else
	{
		found = ResourceLangExistsUnderLang(langs.next, langid)
	}
}

ResourceLangExistsUnderLang : nothing, integer langid -> false


ResourceLangExists : nothing, integer typeid, integer resid, integer langid -> false


ResourceWalkToAddResLang : list<ResourceDirectoryEntry> ref entries, integer typeid, integer resid, integer langid, integer size
{
	if(entries.value.Name == typeid)
	{
		ResourceAddLangToType(entries.value.HeaderChildren, resid, langid, size)
	}
	else
	{
		ResourceWalkToAddResLang(entries.next, typeid, resid, langid, size)
	}
}

ResourceAddLangToType : list<ResourceDirectoryHeader> ref headers, integer resid, integer langid, integer size
{
	if(ResourceWalkHeadersToAddLang(headers.value.Children, resid, langid, size))
	{
		return()
	}
	
	ResourceAddLangToType(headers.next, resid, langid, size)
}

ResourceWalkHeadersToAddLang : list<ResourceDirectoryEntry> ref entries, integer resid, integer langid, integer size -> boolean added = false
{
	if(entries.value.Name == resid)
	{
		ResourceDirectoryLeaf newleaf = 0, size, 0, 0
		list<ResourceDirectoryLeaf> leaflist = newleaf, nothing
		listnode<ResourceDirectoryLeaf> leafnode = leaflist
	
		ResourceDirectoryEntry newentry = langid, 0, nothing, leafnode
		list<ResourceDirectoryEntry> newentries = newentry, nothing
		listnode<ResourceDirectoryEntry> newentrynode = newentries
	
		ResourceDirectoryHeader newchild = 0, 0, 0, 0, newentrynode
		list<ResourceDirectoryHeader> newchildren = newchild, entries.value.HeaderChildren
		listnode<ResourceDirectoryHeader> newchildrennode = newchildren
		entries.value.HeaderChildren = newchildrennode
		
		added = true
	}
	else
	{
		added = ResourceWalkHeadersToAddLang(entries.next, resid, langid, size)
	}
}

ResourceWalkHeadersToAddLang : nothing, integer resid, integer langid, integer size -> false

	
	
ResourceAddResID : ResourceHandler ref res, integer typeid, integer resid
{
	ResourceAddTypeGroup(res, typeid)
	
	if(ResourceIDExists(res.DirectoryRoot.Children, typeid, resid))
	{
		return()
	}
	
	ResourceWalkToAddResID(res.DirectoryRoot.Children, typeid, resid)
}

ResourceWalkToAddResID : list<ResourceDirectoryEntry> ref entries, integer typeid, integer resid
{
	if(entries.value.Name == typeid)
	{
		ResourceAddIDToType(entries.value.HeaderChildren, resid)
	}
	else
	{
		ResourceWalkToAddResID(entries.next, typeid, resid)
	}
}


ResourceAddIDToType : list<ResourceDirectoryHeader> ref headers, integer resid
{
	ResourceDirectoryEntry newchild = resid, 0, nothing, nothing
	list<ResourceDirectoryEntry> newchildren = newchild, headers.value.Children
	listnode<ResourceDirectoryEntry> newchildrennode = newchildren
	
	headers.value.Children = newchildrennode
}


ResourceIDExists : list<ResourceDirectoryEntry> ref entries, integer typeid, integer resid -> boolean found = false
{
	if(entries.value.Name == typeid)
	{
		found = ResourceHasChildOfName(entries.value.HeaderChildren, resid)
	}
	else
	{
		found = ResourceIDExists(entries.next, typeid, resid)
	}
}

ResourceIDExists : nothing, integer typeid, integer resid -> false


ResourceHasChildOfName : list<ResourceDirectoryHeader> ref headers, integer resid -> boolean found = false
{
	if(ResourceHasChildOfType(headers.value.Children, resid))
	{
		found = true
	}
	else
	{
		found = ResourceHasChildOfName(headers.next, resid)
	}
}

ResourceHasChildOfName : nothing, integer resid -> false

	
ResourceAddTypeGroup : ResourceHandler ref res, integer typeid
{
	if(ResourceHasChildOfType(res.DirectoryRoot.Children, typeid))
	{
		return()
	}
	
	ResourceDirectoryHeader newheader = 0, 0, 0, 0, nothing
	list<ResourceDirectoryHeader> newheaderlist = newheader, nothing
	listnode<ResourceDirectoryHeader> newheaderlistnode = newheaderlist
	ResourceDirectoryEntry newentry = typeid, 0, newheaderlistnode, nothing
	
	list<ResourceDirectoryEntry> newlist = newentry, res.DirectoryRoot.Children
	res.DirectoryRoot.Children = newlist
}

ResourceHasChildOfType : list<ResourceDirectoryEntry> ref entries, integer typeid -> boolean found = false
{
	if(entries.value.Name == typeid)
	{
		found = true
	}
	else
	{
		found = ResourceHasChildOfType(entries.next, typeid)
	}
}

ResourceHasChildOfType : nothing, integer typeid -> false


ComputeResourceOffsets : ResourceHandler ref res
{
	res.DirectorySize = 0
	res.DataSize = 0
	
	integer temp = 0
	SetResourceDirectoryOffsets(temp, res.DirectoryRoot)
	AccumulateResourceOffsets(res, res.DirectoryRoot)
	SetResourceDataOffsets(res, res.DirectoryRoot)
}


GetResourceDirectorySizes : list<ResourceDirectoryEntry> ref entries -> integer size = 8 + GetResourceDirectorySizes(entries.next)
GetResourceDirectorySizes : nothing -> 0


SetResourceDirectoryOffsets : integer ref offset, ResourceDirectoryHeader ref header
{
	SetResourceOffsetSelf(offset, header)
	offset += GetResourceDirectorySizes(header.Children)
	
	WalkResourceDirectoryEntriesToSetOffsets(offset, header.Children)
}

SetResourceOffsetSelf : integer ref offset, ResourceDirectoryHeader ref header
{
	offset += 16
}

SetResourceOffsetSelf : integer ref offset, ResourceDirectoryEntry ref entry
{
	entry.OffsetToData = offset
}

WalkResourceDirectoryEntriesToSetOffsets : integer ref offset, list<ResourceDirectoryEntry> ref entries
{
	SetResourceOffsetSelf(offset, entries.value)
	WalkResourceDirectoryHeadersToSetOffsets(offset, entries.value.HeaderChildren)
	WalkResourceDirectoryLeavesToSetOffsets(offset, entries.value.LeafChildren)
	WalkResourceDirectoryEntriesToSetOffsets(offset, entries.next)
}

WalkResourceDirectoryEntriesToSetOffsets : integer ref offset, nothing

WalkResourceDirectoryHeadersToSetOffsets : integer ref offset, list<ResourceDirectoryHeader> ref headers
{
	SetResourceOffsetSelf(offset, headers.value)
	offset += GetResourceDirectorySizes(headers.value.Children)
	
	WalkResourceDirectoryEntriesToSetOffsets(offset, headers.value.Children)

	WalkResourceDirectoryHeadersToSetOffsets(offset, headers.next)
}

WalkResourceDirectoryHeadersToSetOffsets : integer ref offset, nothing

WalkResourceDirectoryLeavesToSetOffsets : integer ref offset, list<ResourceDirectoryLeaf> ref leaves
{
	offset += 16
	WalkResourceDirectoryLeavesToSetOffsets(offset, leaves.next)
}

WalkResourceDirectoryLeavesToSetOffsets : integer ref offset, nothing


AccumulateResourceOffsets : ResourceHandler ref res, ResourceDirectoryHeader ref header
{
	res.DirectorySize = res.DirectorySize + 16			// TODO - += here trips a compiler bug
	AccumulateResourceOffsets(res, header.Children)
}

AccumulateResourceOffsets : ResourceHandler ref res, list<ResourceDirectoryHeader> ref headers
{
	res.DirectorySize = res.DirectorySize + 16
	AccumulateResourceOffsets(res, headers.value.Children)
	AccumulateResourceOffsets(res, headers.next)
}

AccumulateResourceOffsets : ResourceHandler ref res, list<ResourceDirectoryEntry> ref entries
{
	res.DirectorySize = res.DirectorySize + 8
	AccumulateResourceOffsets(res, entries.value.HeaderChildren)
	AccumulateResourceOffsets(res, entries.value.LeafChildren)
	AccumulateResourceOffsets(res, entries.next)
}

AccumulateResourceOffsets : ResourceHandler ref res, list<ResourceDirectoryLeaf> ref leaves
{
	res.DirectorySize = res.DirectorySize + 16
	AccumulateResourceOffsets(res, leaves.next)
}

AccumulateResourceOffsets : ResourceHandler ref res, nothing



SetResourceDataOffsets : ResourceHandler ref res, ResourceDirectoryHeader ref header
{
	SetResourceDataOffsets(res, header.Children)
}

SetResourceDataOffsets : ResourceHandler ref res, list<ResourceDirectoryHeader> ref headers
{
	SetResourceDataOffsets(res, headers.value.Children)
	SetResourceDataOffsets(res, headers.next)
}

SetResourceDataOffsets : ResourceHandler ref res, list<ResourceDirectoryEntry> ref entries
{
	SetResourceDataOffsets(res, entries.value.HeaderChildren)
	SetResourceDataOffsets(res, entries.value.LeafChildren)
	SetResourceDataOffsets(res, entries.next)
}

SetResourceDataOffsets : ResourceHandler ref res, list<ResourceDirectoryLeaf> ref leaves
{
	leaves.value.OffsetToData = res.DirectorySize + res.DataSize
	res.DataSize = res.DataSize + leaves.value.Size

	SetResourceDataOffsets(res, leaves.next)
}

SetResourceDataOffsets : ResourceHandler ref res, nothing


	
AddResourceIcon : string filename, ResourceHandler ref res
{
	integer INVALID_HANDLE_VALUE = 0xffffffff
	integer FILE_SHARE_READ = 0x01
	integer OPEN_EXISTING = 3
	integer GENERIC_READ = 0x80000000

	integer filehandle = CreateFile(filename, GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0)
	if(filehandle != INVALID_HANDLE_VALUE)
	{
		integer PAGE_READONLY = 0x02
		integer len = GetFileSize(filehandle, 0)

		if(len > 0)
		{
			integer mappinghandle = CreateFileMapping(filehandle, 0, PAGE_READONLY, 0, 0, 0)
			if(mappinghandle != 0)
			{
				integer FILE_MAP_READ = 0x04
				integer ptr = MapViewOfFile(mappinghandle, FILE_MAP_READ, 0, 0, len)

				if(ptr != 0)
				{
					IconDirectoryHeader hdr = 0, 0, 0
					marshalstructure(hdr, ptr)
					
					// TODO - validate .ico
					
					res.IconGroupCounter = res.IconGroupCounter + 1

					ptr += 6
					integer hdrcount = cast(integer, hdr.Count)
					ResourceAdd(res, 0x0e, res.IconGroupCounter * 100 + 1, 1033, 6 + (hdrcount * 14))

					integer imagecount = hdrcount
					while(imagecount > 0)
					{
						IconDirectoryEntry entry = 0, 0, 0, 0, 0
						marshalstructure(entry, ptr)
						
						ResourceAdd(res, 0x03, imagecount + res.IconCounter, 1033, entry.BytesInResource)
						
						IconReference iconref = filename, res.IconGroupCounter * 100 + 1, imagecount + res.IconCounter, entry.ImageOffset, entry.BytesInResource, entry
						prepend<IconReference>(res.Icons, iconref)
					
						ptr += 16
						--imagecount
					}
										
					res.IconCounter = res.IconCounter + hdrcount
				}
				CloseHandle(mappinghandle)
			}
			else
			{
				print("Failed to map file!")
			}
		}
		else
		{
			print("File is empty!")
		}
		CloseHandle(filehandle)
	}
	else
	{
		print("Couldn't open that icon file!")
	}
}
	

MakeExe : string filename
{
	IconDirectoryEntry dummydetails = 0, 0, 0, 0, 0
	IconReference dummyicon = "", 0, 0, 0, 0, dummydetails
	list<IconReference> dummyiconlist = dummyicon, nothing

	ResourceDirectoryHeader resroot = 0, 0, 0, 0, nothing
	ResourceHandler res = resroot, 0, 0, dummyiconlist, 0, 0
	
	
	AddResourceIcon("epoch.ico", res)
	ComputeResourceOffsets(res)
	

	integer resourcesize = res.DirectorySize + res.DataSize + 1
	integer imagesize = 0x4000 + RoundUp(resourcesize) + RoundUp(HackSize)

	integer GENERIC_WRITE = 0x40000000
	integer CREATE_ALWAYS = 2

	integer filehandle = CreateFile(filename, GENERIC_WRITE, 0, 0, CREATE_ALWAYS, 0, 0)
	if(filehandle == -1)
	{
		print("Cannot open " ; filename ; " to emit .EXE!")
		return()
	}


	integer position = 0
	position += WritePEHeader(filehandle, imagesize, resourcesize)

	position += WriteSectionHeader(filehandle, ".idata", 0x400, 0x1000, 0x344, 0x400, 0xc0000040)
	position += WriteSectionHeader(filehandle, ".text", 0x800, 0x2000, 0x150, 0x200, 0x60000020)
	position += WriteSectionHeader(filehandle, ".data", 0xa00, 0x3000, 0x29e, 0x400, 0x40000040)
	position += WriteSectionHeader(filehandle, ".rsrc", 0xe00, 0x4000, resourcesize, resourcesize, 0x40000040)
	position += WriteSectionHeader(filehandle, ".epoch", RoundUp(resourcesize + 0xe00), RoundUp(0x4000 + resourcesize), HackSize, HackSize, 0x40000040)

	print("Writing thunk table...")
	position += WritePadding(filehandle, position, 0x400)
	position += WriteThunkTable(filehandle)
	position += WritePadding(filehandle, position, 0x600)
	position += WriteThunkAddresses(filehandle)

	print("Writing bootstrap code...")
	position += WritePadding(filehandle, position, 0x800)
	position += WriteBootstrapCode(filehandle, RoundUp(resourcesize + 0xe00))

	position += WritePadding(filehandle, position, 0xa00)
	position += WriteStringTable(filehandle)

	print("Writing resources...")
	position += WritePadding(filehandle, position, 0xe00)
	position += WriteResources(filehandle, res)

	// Output the Epoch bytecode section
	position += WritePadding(filehandle, position, RoundUp(resourcesize + 0xe00))
	print("Writing Epoch code block...")
	integer written = 0
	WriteFile(filehandle, Hack, HackSize, written, 0)

	CloseHandle(filehandle)

	print("Compilation complete.")
}



WriteResourceDirectory : buffer ref rb, integer ref rs, ResourceDirectoryHeader ref header
{
	EmitInteger(rb, rs, 0)
	EmitInteger(rb, rs, 0)
	EmitInteger16(rb, rs, 0)
	EmitInteger16(rb, rs, 0)
	EmitInteger16(rb, rs, 0)
	EmitInteger16(rb, rs, cast(integer16, ResourceCountEntries(header.Children)))
	
	WriteResourceDirectorySelf(rb, rs, header.Children)
	WriteResourceDirectoryChildren(rb, rs, header.Children)
}

WriteResourceDirectorySelf : buffer ref rb, integer ref rs, list<ResourceDirectoryEntry> ref entries
{
	integer offset = entries.value.OffsetToData
	if(ResourceCountLeaves(entries.value.LeafChildren) != 1)
	{
		offset += 0x80000000
	}

	EmitInteger(rb, rs, entries.value.Name)
	EmitInteger(rb, rs, offset)
	
	WriteResourceDirectorySelf(rb, rs, entries.next)
}

WriteResourceDirectorySelf : buffer ref rb, integer ref rs, nothing

WriteResourceDirectoryChildren : buffer ref rb, integer ref rs, list<ResourceDirectoryEntry> ref entries
{
	WriteResourceDirectory(rb, rs, entries.value.HeaderChildren)
	WriteResourceDirectoryChildren(rb, rs, entries.value.LeafChildren)
	
	WriteResourceDirectoryChildren(rb, rs, entries.next)
}

WriteResourceDirectory : buffer ref rb, integer ref rs, list<ResourceDirectoryHeader> ref headers
{
	EmitInteger(rb, rs, 0)
	EmitInteger(rb, rs, 0)
	EmitInteger16(rb, rs, 0)
	EmitInteger16(rb, rs, 0)
	EmitInteger16(rb, rs, 0)
	EmitInteger16(rb, rs, cast(integer16, ResourceCountEntries(headers.value.Children)))
	
	WriteResourceDirectory(rb, rs, headers.next)
	
	WriteResourceDirectorySelf(rb, rs, headers.value.Children)
	WriteResourceDirectoryChildren(rb, rs, headers.value.Children)	
}

WriteResourceDirectory : buffer ref rb, integer ref rs, nothing


WriteResourceDirectoryChildren : buffer ref rb, integer ref rs, list<ResourceDirectoryLeaf> ref leaves
{
	EmitInteger(rb, rs, leaves.value.OffsetToData + 0x4000)
	EmitInteger(rb, rs, leaves.value.Size)
	EmitInteger(rb, rs, leaves.value.CodePage)
	EmitInteger(rb, rs, leaves.value.Reserved)
	
	WriteResourceDirectoryChildren(rb, rs, leaves.next)
}

WriteResourceDirectoryChildren : buffer ref rb, integer ref rs, nothing


ResourceCountEntries : list<ResourceDirectoryEntry> ref entries -> integer count = 1 + ResourceCountEntries(entries.next)
ResourceCountEntries : nothing -> 0

ResourceCountLeaves : list<ResourceDirectoryLeaf> ref leaves -> integer count = 1 + ResourceCountLeaves(leaves.next)
ResourceCountLeaves : nothing -> 0


WriteResourceData : buffer ref rb, integer ref rs, ResourceHandler ref res
{	
	WriteEachResourceType(rb, rs, res, res.DirectoryRoot.Children)
}

WriteEachResourceType : buffer ref rb, integer ref rs, ResourceHandler ref res, list<ResourceDirectoryEntry> ref typeentries
{
	WriteEachResourceIDHeader(rb, rs, res, typeentries.value.HeaderChildren, typeentries.value.Name)
	WriteEachResourceType(rb, rs, res, typeentries.next)
}

WriteEachResourceType : buffer ref rb, integer ref rs, ResourceHandler ref res, nothing


WriteEachResourceIDHeader : buffer ref rb, integer ref rs, ResourceHandler ref res, list<ResourceDirectoryHeader> ref idheaders, integer restype
{
	WriteEachResourceID(rb, rs, res, idheaders.value.Children, restype)
	WriteEachResourceIDHeader(rb, rs, res, idheaders.next, restype)
}

WriteEachResourceIDHeader : buffer ref rb, integer ref rs, ResourceHandler ref res, nothing, integer restype


WriteEachResourceID : buffer ref rb, integer ref rs, ResourceHandler ref res, list<ResourceDirectoryEntry> ref identries, integer restype
{
	WriteEachResourceLangHeader(rb, rs, res, identries.value.HeaderChildren, restype, identries.value.Name)
	WriteEachResourceID(rb, rs, res, identries.next, restype)
}

WriteEachResourceID : buffer ref rb, integer ref rs, ResourceHandler ref res, nothing, integer restype


WriteEachResourceLangHeader : buffer ref rb, integer ref rs, ResourceHandler ref res, list<ResourceDirectoryHeader> ref langheaders, integer restype, integer resid
{
	WriteEachResourceLang(rb, rs, res, langheaders.value.Children, restype, resid)
	WriteEachResourceLangHeader(rb, rs, res, langheaders.next, restype, resid)
}

WriteEachResourceLangHeader : buffer ref rb, integer ref rs, ResourceHandler ref res, nothing, integer restype, integer resid


WriteEachResourceLang : buffer ref rb, integer ref rs, ResourceHandler ref res, list<ResourceDirectoryEntry> ref langs, integer restype, integer resid
{
	WriteEachResourceLeaf(rb, rs, res, langs.value.LeafChildren, restype, resid, langs.value.Name)
	WriteEachResourceLang(rb, rs, res, langs.next, restype, resid)
}

WriteEachResourceLang : buffer ref rb, integer ref rs, ResourceHandler ref res, nothing, integer restype, integer resid


WriteEachResourceLeaf : buffer ref rb, integer ref rs, ResourceHandler ref res, list<ResourceDirectoryLeaf> ref leaves, integer restype, integer resid, integer reslang
{
	if(restype == 0x03)
	{
		CopyIconFromReference(rb, rs, res.Icons, resid)
	}
	elseif(restype == 0x0e)
	{
		EmitInteger16(rb, rs, 0)
		EmitInteger16(rb, rs, 1)
		EmitInteger16(rb, rs, cast(integer16, CountIconsInGroup(res.Icons, resid)))
	
		EmitIconGroupData(rb, rs, res.Icons, resid)
	}
	
	WriteEachResourceLeaf(rb, rs, res, leaves.next, restype, resid, reslang)
}

WriteEachResourceLeaf : buffer ref rb, integer ref rs, ResourceHandler ref res, nothing, integer restype, integer resid, integer reslang


CountIconsInGroup : list<IconReference> ref icons, integer targetid -> integer count = 0
{
	if(icons.value.GroupID == targetid)
	{
		++count
	}
	
	count += CountIconsInGroup(icons.next, targetid)
}

CountIconsInGroup : nothing, integer targetid -> 0


EmitIconGroupData : buffer ref rb, integer ref rs, list<IconReference> ref reflist, integer targetid
{
	if(reflist.value.GroupID == targetid)
	{
		EmitInteger(rb, rs, reflist.value.Details.PackedWHCR)
		EmitInteger16(rb, rs, reflist.value.Details.Planes)
		EmitInteger16(rb, rs, reflist.value.Details.BitCount)
		EmitInteger(rb, rs, reflist.value.Details.BytesInResource)
		EmitInteger16(rb, rs, cast(integer16, reflist.value.ID))
	}

	EmitIconGroupData(rb, rs, reflist.next, targetid)
}

EmitIconGroupData : buffer ref rb, integer ref rs, nothing, integer targetid


CopyIconFromReference : buffer ref rb, integer ref rs, list<IconReference> ref reflist, integer targetid
{
	if(reflist.value.ID == targetid)
	{
		CopyIconFromFile(rb, rs, reflist.value.FileName, reflist.value.BeginOffset, reflist.value.Size)
	}
	else
	{
		CopyIconFromReference(rb, rs, reflist.next, targetid)
	}
}

CopyIconFromFile : buffer ref rb, integer ref rs, string filename, integer beginoffset, integer size
{
	integer INVALID_HANDLE_VALUE = 0xffffffff
	integer FILE_SHARE_READ = 0x01
	integer OPEN_EXISTING = 3
	integer GENERIC_READ = 0x80000000

	integer filehandle = CreateFile(filename, GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0)
	if(filehandle != INVALID_HANDLE_VALUE)
	{
		integer PAGE_READONLY = 0x02
		integer len = GetFileSize(filehandle, 0)

		if(len > 0)
		{
			integer mappinghandle = CreateFileMapping(filehandle, 0, PAGE_READONLY, 0, 0, 0)
			if(mappinghandle != 0)
			{
				integer FILE_MAP_READ = 0x04
				integer ptr = MapViewOfFile(mappinghandle, FILE_MAP_READ, 0, 0, len)

				if(ptr != 0)
				{
					writebuffer(rb, rs, ptr + beginoffset, size)
					rs = rs + size
				}
				else
				{
					print("Failed to copy icon!")
				}
				
				CloseHandle(mappinghandle)
			}
			else
			{
				print("Failed to map file!")
			}
		}
		else
		{
			print("File is empty!")
		}
		CloseHandle(filehandle)
	}
	else
	{
		print("Couldn't open that icon file!")
	}
}



WriteResources : integer filehandle, ResourceHandler ref res -> integer writtenbytes = 0
{
	buffer resourcebuffer = 1024 * 1024
	integer resourcesize = 0
	
	WriteResourceDirectory(resourcebuffer, resourcesize, res.DirectoryRoot)
	WriteResourceData(resourcebuffer, resourcesize, res)
	
	integer written = 0
	WriteFile(filehandle, resourcebuffer, resourcesize, written, 0)

	writtenbytes = resourcesize
}


WriteStringTable : integer filehandle -> integer writtenbytes = 0
{
	buffer tablebuffer = 1024
	integer tablesize = 0


	EmitInteger(tablebuffer, tablesize, 0x63657845)
	EmitInteger(tablebuffer, tablesize, 0x42657475)
	EmitInteger(tablebuffer, tablesize, 0x43657479)
	EmitInteger(tablebuffer, tablesize, 0x0065646f)

	EmitInteger(tablebuffer, tablesize, 0x00700065)
	EmitInteger(tablebuffer, tablesize, 0x0063006f)
	EmitInteger(tablebuffer, tablesize, 0x00720068)
	EmitInteger(tablebuffer, tablesize, 0x006e0075)
	EmitInteger(tablebuffer, tablesize, 0x00690074)
	EmitInteger(tablebuffer, tablesize, 0x0065006d)
	EmitInteger(tablebuffer, tablesize, 0x0064002e)
	EmitInteger(tablebuffer, tablesize, 0x006c006c)
	EmitInteger16(tablebuffer, tablesize, 0x0000)

	// TODO - embed error strings


	integer written = 0
	WriteFile(filehandle, tablebuffer, tablesize, written, 0)

	writtenbytes = tablesize
}


WriteThunkAddresses : integer filehandle -> integer writtenbytes = 0
{
	buffer thunkbuffer = 1024
	integer thunksize = 0


	EmitInteger(thunkbuffer, thunksize, 0x000010bc)
	EmitInteger(thunkbuffer, thunksize, 0x00000000)
	EmitInteger(thunkbuffer, thunksize, 0x00000000)
	EmitInteger(thunkbuffer, thunksize, 0x00001096)
	EmitInteger(thunkbuffer, thunksize, 0x000010ec)
	EmitInteger(thunkbuffer, thunksize, 0x000010e4)
	EmitInteger(thunkbuffer, thunksize, 0x00000000)
	EmitInteger(thunkbuffer, thunksize, 0x00000000)
	EmitInteger(thunkbuffer, thunksize, 0x000010b1)
	EmitInteger(thunkbuffer, thunksize, 0x00001114)


	integer written = 0
	WriteFile(filehandle, thunkbuffer, thunksize, written, 0)

	writtenbytes = thunksize
}


WriteBootstrapCode : integer filehandle, integer codebeginoffset -> integer writtenbytes = 0
{
	buffer codebuffer = 1024
	integer codesize = 0

	EmitInteger(codebuffer, codesize, 0x81ec8b55)
	EmitInteger(codebuffer, codesize, 0x000404ec)
	EmitInteger(codebuffer, codesize, 0x10685600)
	EmitInteger(codebuffer, codesize, 0xff004030)
	EmitInteger(codebuffer, codesize, 0x40110415)
	EmitInteger(codebuffer, codesize, 0x3bf63300)
	EmitInteger(codebuffer, codesize, 0x6a1a75c6)
	EmitInteger(codebuffer, codesize, 0x30326810)
	EmitInteger(codebuffer, codesize, 0x52680040)
	EmitInteger(codebuffer, codesize, 0x56004030)
	EmitInteger(codebuffer, codesize, 0x111415ff)
	EmitInteger(codebuffer, codesize, 0xc0330040)
	EmitInteger(codebuffer, codesize, 0x00008be9)
	EmitInteger(codebuffer, codesize, 0x30006800)
	EmitInteger(codebuffer, codesize, 0xff500040)
	EmitInteger(codebuffer, codesize, 0x40110015)
	EmitInteger(codebuffer, codesize, 0xfc458900)
	EmitInteger(codebuffer, codesize, 0x0e75c63b)
	EmitInteger(codebuffer, codesize, 0x3268106a)
	EmitInteger(codebuffer, codesize, 0x68004030)
	EmitInteger(codebuffer, codesize, 0x004030e8)
	EmitInteger(codebuffer, codesize, 0x6853d1eb)
	EmitInteger(codebuffer, codesize, 0x000001ff)
	EmitInteger(codebuffer, codesize, 0xfbfc858d)
	EmitInteger(codebuffer, codesize, 0x5650ffff)
	EmitInteger(codebuffer, codesize, 0x10fc15ff)
	EmitInteger(codebuffer, codesize, 0x6a560040)
	EmitInteger(codebuffer, codesize, 0x56036a20)
	EmitInteger(codebuffer, codesize, 0x0068016a)
	EmitInteger(codebuffer, codesize, 0x8d800000)
	EmitInteger(codebuffer, codesize, 0xfffbfc85)
	EmitInteger(codebuffer, codesize, 0x15ff50ff)
	EmitInteger(codebuffer, codesize, 0x004010f4)
	EmitInteger(codebuffer, codesize, 0xfb83d88b)
	EmitInteger(codebuffer, codesize, 0x6a0e75ff)
	EmitInteger(codebuffer, codesize, 0x30326810)
	EmitInteger(codebuffer, codesize, 0xf2680040)
	EmitInteger(codebuffer, codesize, 0xeb004031)
	EmitInteger(codebuffer, codesize, 0x5656561d)
	EmitInteger(codebuffer, codesize, 0x5356026a)
	EmitInteger(codebuffer, codesize, 0x10f015ff)
	EmitInteger(codebuffer, codesize, 0xc63b0040)
	EmitInteger(codebuffer, codesize, 0x106a1975)
	EmitInteger(codebuffer, codesize, 0x40303268)
	EmitInteger(codebuffer, codesize, 0x32326800)
	EmitInteger(codebuffer, codesize, 0xff560040)
	EmitInteger(codebuffer, codesize, 0x40111415)
	EmitInteger(codebuffer, codesize, 0x5bc03300)
	EmitInteger(codebuffer, codesize, 0x57c3c95e)
	EmitInteger(codebuffer, codesize, 0x6a565656)
	EmitInteger(codebuffer, codesize, 0x15ff5001)
	EmitInteger(codebuffer, codesize, 0x00401108)
	EmitInteger(codebuffer, codesize, 0xfe3bf88b)
	EmitInteger(codebuffer, codesize, 0x106a1875)
	EmitInteger(codebuffer, codesize, 0x40303268)
	EmitInteger(codebuffer, codesize, 0x326c6800)
	EmitInteger(codebuffer, codesize, 0xff560040)
	EmitInteger(codebuffer, codesize, 0x40111415)
	EmitInteger(codebuffer, codesize, 0x5fc03300)

	EmitByte(codebuffer, codesize, 0xeb)
	EmitByte(codebuffer, codesize, 0xd1)
	EmitByte(codebuffer, codesize, 0x68)
	EmitInteger(codebuffer, codesize, HackSize)
	EmitByte(codebuffer, codesize, 0x8d)
	EmitByte(codebuffer, codesize, 0x87)
	EmitInteger(codebuffer, codesize, codebeginoffset)
	EmitByte(codebuffer, codesize, 0x50)
	EmitByte(codebuffer, codesize, 0xff)
	EmitByte(codebuffer, codesize, 0x55)

	EmitInteger(codebuffer, codesize, 0x15ff57fc)
	EmitInteger(codebuffer, codesize, 0x0040110c)
	EmitInteger(codebuffer, codesize, 0xec15ff53)
	EmitInteger(codebuffer, codesize, 0x56004010)
	EmitInteger(codebuffer, codesize, 0x10f815ff)
	EmitInteger(codebuffer, codesize, 0x00000040)
	EmitInteger(codebuffer, codesize, 0x00000000)

	integer written = 0
	WriteFile(filehandle, codebuffer, codesize, written, 0)

	writtenbytes = codesize
}


WriteThunkTable : integer filehandle -> integer writtenbytes = 0
{
	buffer thunkbuffer = 1024
	integer thunksize = 0

	// CloseHandle
	EmitInteger16(thunkbuffer, thunksize, 0)
	EmitByte(thunkbuffer, thunksize, 0x43)
	EmitByte(thunkbuffer, thunksize, 0x6c)
	EmitByte(thunkbuffer, thunksize, 0x6f)
	EmitByte(thunkbuffer, thunksize, 0x73)
	EmitByte(thunkbuffer, thunksize, 0x65)
	EmitByte(thunkbuffer, thunksize, 0x48)
	EmitByte(thunkbuffer, thunksize, 0x61)
	EmitByte(thunkbuffer, thunksize, 0x6e)
	EmitByte(thunkbuffer, thunksize, 0x64)
	EmitByte(thunkbuffer, thunksize, 0x6c)
	EmitByte(thunkbuffer, thunksize, 0x65)
	EmitByte(thunkbuffer, thunksize, 0x00)

	// CreateFileMappingW
	EmitInteger16(thunkbuffer, thunksize, 0)
	EmitByte(thunkbuffer, thunksize, 0x43)
	EmitByte(thunkbuffer, thunksize, 0x72)
	EmitByte(thunkbuffer, thunksize, 0x65)
	EmitByte(thunkbuffer, thunksize, 0x61)
	EmitByte(thunkbuffer, thunksize, 0x74)
	EmitByte(thunkbuffer, thunksize, 0x65)
	EmitByte(thunkbuffer, thunksize, 0x46)
	EmitByte(thunkbuffer, thunksize, 0x69)
	EmitByte(thunkbuffer, thunksize, 0x6c)
	EmitByte(thunkbuffer, thunksize, 0x65)
	EmitByte(thunkbuffer, thunksize, 0x4d)
	EmitByte(thunkbuffer, thunksize, 0x61)
	EmitByte(thunkbuffer, thunksize, 0x70)
	EmitByte(thunkbuffer, thunksize, 0x70)
	EmitByte(thunkbuffer, thunksize, 0x69)
	EmitByte(thunkbuffer, thunksize, 0x6e)
	EmitByte(thunkbuffer, thunksize, 0x67)
	EmitByte(thunkbuffer, thunksize, 0x57)
	EmitByte(thunkbuffer, thunksize, 0x00)

	// CreateFileW
	EmitInteger16(thunkbuffer, thunksize, 0)
	EmitByte(thunkbuffer, thunksize, 0x43)
	EmitByte(thunkbuffer, thunksize, 0x72)
	EmitByte(thunkbuffer, thunksize, 0x65)
	EmitByte(thunkbuffer, thunksize, 0x61)
	EmitByte(thunkbuffer, thunksize, 0x74)
	EmitByte(thunkbuffer, thunksize, 0x65)
	EmitByte(thunkbuffer, thunksize, 0x46)
	EmitByte(thunkbuffer, thunksize, 0x69)
	EmitByte(thunkbuffer, thunksize, 0x6c)
	EmitByte(thunkbuffer, thunksize, 0x65)
	EmitByte(thunkbuffer, thunksize, 0x57)
	EmitByte(thunkbuffer, thunksize, 0x00)

	// ExitProcess
	EmitInteger16(thunkbuffer, thunksize, 0)
	EmitByte(thunkbuffer, thunksize, 0x45)
	EmitByte(thunkbuffer, thunksize, 0x78)
	EmitByte(thunkbuffer, thunksize, 0x69)
	EmitByte(thunkbuffer, thunksize, 0x74)
	EmitByte(thunkbuffer, thunksize, 0x50)
	EmitByte(thunkbuffer, thunksize, 0x72)
	EmitByte(thunkbuffer, thunksize, 0x6f)
	EmitByte(thunkbuffer, thunksize, 0x63)
	EmitByte(thunkbuffer, thunksize, 0x65)
	EmitByte(thunkbuffer, thunksize, 0x73)
	EmitByte(thunkbuffer, thunksize, 0x73)
	EmitByte(thunkbuffer, thunksize, 0x00)

	// GetModuleFileNameW
	EmitInteger16(thunkbuffer, thunksize, 0)
	EmitByte(thunkbuffer, thunksize, 0x47)
	EmitByte(thunkbuffer, thunksize, 0x65)
	EmitByte(thunkbuffer, thunksize, 0x74)
	EmitByte(thunkbuffer, thunksize, 0x4d)
	EmitByte(thunkbuffer, thunksize, 0x6f)
	EmitByte(thunkbuffer, thunksize, 0x64)
	EmitByte(thunkbuffer, thunksize, 0x75)
	EmitByte(thunkbuffer, thunksize, 0x6c)
	EmitByte(thunkbuffer, thunksize, 0x65)
	EmitByte(thunkbuffer, thunksize, 0x46)
	EmitByte(thunkbuffer, thunksize, 0x69)
	EmitByte(thunkbuffer, thunksize, 0x6c)
	EmitByte(thunkbuffer, thunksize, 0x65)
	EmitByte(thunkbuffer, thunksize, 0x4e)
	EmitByte(thunkbuffer, thunksize, 0x61)
	EmitByte(thunkbuffer, thunksize, 0x6d)
	EmitByte(thunkbuffer, thunksize, 0x65)
	EmitByte(thunkbuffer, thunksize, 0x57)
	EmitByte(thunkbuffer, thunksize, 0x00)

	// GetProcAddress
	EmitInteger16(thunkbuffer, thunksize, 0)
	EmitByte(thunkbuffer, thunksize, 0x47)
	EmitByte(thunkbuffer, thunksize, 0x65)
	EmitByte(thunkbuffer, thunksize, 0x74)
	EmitByte(thunkbuffer, thunksize, 0x50)
	EmitByte(thunkbuffer, thunksize, 0x72)
	EmitByte(thunkbuffer, thunksize, 0x6f)
	EmitByte(thunkbuffer, thunksize, 0x63)
	EmitByte(thunkbuffer, thunksize, 0x41)
	EmitByte(thunkbuffer, thunksize, 0x64)
	EmitByte(thunkbuffer, thunksize, 0x64)
	EmitByte(thunkbuffer, thunksize, 0x72)
	EmitByte(thunkbuffer, thunksize, 0x65)
	EmitByte(thunkbuffer, thunksize, 0x73)
	EmitByte(thunkbuffer, thunksize, 0x73)
	EmitByte(thunkbuffer, thunksize, 0x00)

	// LoadLibraryW
	EmitInteger16(thunkbuffer, thunksize, 0)
	EmitByte(thunkbuffer, thunksize, 0x4c)
	EmitByte(thunkbuffer, thunksize, 0x6f)
	EmitByte(thunkbuffer, thunksize, 0x61)
	EmitByte(thunkbuffer, thunksize, 0x64)
	EmitByte(thunkbuffer, thunksize, 0x4c)
	EmitByte(thunkbuffer, thunksize, 0x69)
	EmitByte(thunkbuffer, thunksize, 0x62)
	EmitByte(thunkbuffer, thunksize, 0x72)
	EmitByte(thunkbuffer, thunksize, 0x61)
	EmitByte(thunkbuffer, thunksize, 0x72)
	EmitByte(thunkbuffer, thunksize, 0x79)
	EmitByte(thunkbuffer, thunksize, 0x57)
	EmitByte(thunkbuffer, thunksize, 0x00)

	// MapViewOfFile
	EmitInteger16(thunkbuffer, thunksize, 0)
	EmitByte(thunkbuffer, thunksize, 0x4d)
	EmitByte(thunkbuffer, thunksize, 0x61)
	EmitByte(thunkbuffer, thunksize, 0x70)
	EmitByte(thunkbuffer, thunksize, 0x56)
	EmitByte(thunkbuffer, thunksize, 0x69)
	EmitByte(thunkbuffer, thunksize, 0x65)
	EmitByte(thunkbuffer, thunksize, 0x77)
	EmitByte(thunkbuffer, thunksize, 0x4f)
	EmitByte(thunkbuffer, thunksize, 0x66)
	EmitByte(thunkbuffer, thunksize, 0x46)
	EmitByte(thunkbuffer, thunksize, 0x69)
	EmitByte(thunkbuffer, thunksize, 0x6c)
	EmitByte(thunkbuffer, thunksize, 0x65)
	EmitByte(thunkbuffer, thunksize, 0x00)

	// UnmapViewOfFile
	EmitInteger16(thunkbuffer, thunksize, 0)
	EmitByte(thunkbuffer, thunksize, 0x55)
	EmitByte(thunkbuffer, thunksize, 0x6e)
	EmitByte(thunkbuffer, thunksize, 0x6d)
	EmitByte(thunkbuffer, thunksize, 0x61)
	EmitByte(thunkbuffer, thunksize, 0x70)
	EmitByte(thunkbuffer, thunksize, 0x56)
	EmitByte(thunkbuffer, thunksize, 0x69)
	EmitByte(thunkbuffer, thunksize, 0x65)
	EmitByte(thunkbuffer, thunksize, 0x77)
	EmitByte(thunkbuffer, thunksize, 0x4f)
	EmitByte(thunkbuffer, thunksize, 0x66)
	EmitByte(thunkbuffer, thunksize, 0x46)
	EmitByte(thunkbuffer, thunksize, 0x69)
	EmitByte(thunkbuffer, thunksize, 0x6c)
	EmitByte(thunkbuffer, thunksize, 0x65)
	EmitByte(thunkbuffer, thunksize, 0x00)

	// kernel32.dll
	EmitByte(thunkbuffer, thunksize, 0x6b)
	EmitByte(thunkbuffer, thunksize, 0x65)
	EmitByte(thunkbuffer, thunksize, 0x72)
	EmitByte(thunkbuffer, thunksize, 0x6e)
	EmitByte(thunkbuffer, thunksize, 0x65)
	EmitByte(thunkbuffer, thunksize, 0x6c)
	EmitByte(thunkbuffer, thunksize, 0x33)
	EmitByte(thunkbuffer, thunksize, 0x32)
	EmitByte(thunkbuffer, thunksize, 0x2e)
	EmitByte(thunkbuffer, thunksize, 0x64)
	EmitByte(thunkbuffer, thunksize, 0x6c)
	EmitByte(thunkbuffer, thunksize, 0x6c)
	EmitByte(thunkbuffer, thunksize, 0x00)

	// MessageBoxW
	EmitInteger16(thunkbuffer, thunksize, 0)
	EmitByte(thunkbuffer, thunksize, 0x4d)
	EmitByte(thunkbuffer, thunksize, 0x65)
	EmitByte(thunkbuffer, thunksize, 0x73)
	EmitByte(thunkbuffer, thunksize, 0x73)
	EmitByte(thunkbuffer, thunksize, 0x61)
	EmitByte(thunkbuffer, thunksize, 0x67)
	EmitByte(thunkbuffer, thunksize, 0x65)
	EmitByte(thunkbuffer, thunksize, 0x42)
	EmitByte(thunkbuffer, thunksize, 0x6f)
	EmitByte(thunkbuffer, thunksize, 0x78)
	EmitByte(thunkbuffer, thunksize, 0x57)
	EmitByte(thunkbuffer, thunksize, 0x00)

	// user32.dll
	EmitByte(thunkbuffer, thunksize, 0x75)
	EmitByte(thunkbuffer, thunksize, 0x73)
	EmitByte(thunkbuffer, thunksize, 0x65)
	EmitByte(thunkbuffer, thunksize, 0x72)
	EmitByte(thunkbuffer, thunksize, 0x33)
	EmitByte(thunkbuffer, thunksize, 0x32)
	EmitByte(thunkbuffer, thunksize, 0x2e)
	EmitByte(thunkbuffer, thunksize, 0x64)
	EmitByte(thunkbuffer, thunksize, 0x6c)
	EmitByte(thunkbuffer, thunksize, 0x6c)
	EmitByte(thunkbuffer, thunksize, 0x00)

	EmitInteger(thunkbuffer, thunksize, 0x00001000)
	EmitInteger(thunkbuffer, thunksize, 0x0000100e)
	EmitInteger(thunkbuffer, thunksize, 0x00001023)
	EmitInteger(thunkbuffer, thunksize, 0x00001031)
	EmitInteger(thunkbuffer, thunksize, 0x0000103f)
	EmitInteger(thunkbuffer, thunksize, 0x00001054)
	EmitInteger(thunkbuffer, thunksize, 0x00001065)
	EmitInteger(thunkbuffer, thunksize, 0x00001074)
	EmitInteger(thunkbuffer, thunksize, 0x00001084)
	EmitInteger(thunkbuffer, thunksize, 0x00000000)

	EmitInteger(thunkbuffer, thunksize, 0x000010a3)
	EmitInteger(thunkbuffer, thunksize, 0x00000000)

	// Yes, this appears twice.
	EmitInteger(thunkbuffer, thunksize, 0x00001000)
	EmitInteger(thunkbuffer, thunksize, 0x0000100e)
	EmitInteger(thunkbuffer, thunksize, 0x00001023)
	EmitInteger(thunkbuffer, thunksize, 0x00001031)
	EmitInteger(thunkbuffer, thunksize, 0x0000103f)
	EmitInteger(thunkbuffer, thunksize, 0x00001054)
	EmitInteger(thunkbuffer, thunksize, 0x00001065)
	EmitInteger(thunkbuffer, thunksize, 0x00001074)
	EmitInteger(thunkbuffer, thunksize, 0x00001084)
	EmitInteger(thunkbuffer, thunksize, 0x00000000)

	EmitInteger(thunkbuffer, thunksize, 0x000010a3)
	EmitInteger(thunkbuffer, thunksize, 0x00000000)

	integer written = 0
	WriteFile(filehandle, thunkbuffer, thunksize, written, 0)

	writtenbytes = thunksize
}


WritePadding : integer filehandle, integer startpos, integer desiredpos -> integer writtenbytes = 0
{
	writtenbytes = desiredpos - startpos
	buffer empty = writtenbytes
	integer written = 0
	WriteFile(filehandle, empty, writtenbytes, written, 0)
}


WriteSectionHeader : integer filehandle, string sectionname, integer location, integer virtuallocation, integer sectionsize, integer sectionvirtualsize, integer flags -> integer writtenbytes = 0
{
	print("Writing header for section '" ; sectionname ; "'...")

	buffer headerbuffer = 256
	integer headersize = 0

	// This is a pitiful hack.

	integer count = 0
	assert(length(sectionname) < 8)

	while(count < length(sectionname))
	{
		string char = charat(sectionname, count)
		EmitSubstring(headerbuffer, headersize, char, 1)

		++count
	}

	while(count < 8)
	{
		EmitByte(headerbuffer, headersize, 0)
		++count
	}

	// End hack.

	EmitInteger(headerbuffer, headersize, sectionsize)
	EmitInteger(headerbuffer, headersize, virtuallocation)
	EmitInteger(headerbuffer, headersize, sectionvirtualsize)
	EmitInteger(headerbuffer, headersize, location)
	EmitInteger(headerbuffer, headersize, 0)
	EmitInteger(headerbuffer, headersize, 0)
	EmitInteger16(headerbuffer, headersize, 0)
	EmitInteger16(headerbuffer, headersize, 0)
	EmitInteger(headerbuffer, headersize, flags)

	integer written = 0
	WriteFile(filehandle, headerbuffer, headersize, written, 0)

	writtenbytes = headersize
}


WritePEHeader : integer filehandle, integer imagesize, integer resourcesize -> integer writtenbytes = 0
{
	print("Writing PE headers...")

	buffer headerbuffer = 1024
	integer headersize = 0

	// Begin DOS header
	EmitInteger16(headerbuffer, headersize, 0x5a4d)		// e_magic
	EmitInteger16(headerbuffer, headersize, 0x90)		// e_cblp
	EmitInteger16(headerbuffer, headersize, 0x03)		// e_cp
	EmitInteger16(headerbuffer, headersize, 0)		// e_crlc
	EmitInteger16(headerbuffer, headersize, 0x04)		// e_cparhdr
	EmitInteger16(headerbuffer, headersize, 0)		// e_minalloc
	EmitInteger16(headerbuffer, headersize, 0xffff)		// e_maxalloc
	EmitInteger16(headerbuffer, headersize, 0)		// e_ss
	EmitInteger16(headerbuffer, headersize, 0xb8)		// e_sp
	EmitInteger16(headerbuffer, headersize, 0)		// e_csum
	EmitInteger16(headerbuffer, headersize, 0)		// e_ip
	EmitInteger16(headerbuffer, headersize, 0)		// e_cs
	EmitInteger16(headerbuffer, headersize, 0x40)		// e_lfarlc
	EmitInteger16(headerbuffer, headersize, 0)		// e_ovno

	EmitInteger16(headerbuffer, headersize, 0)		// e_res[0]
	EmitInteger16(headerbuffer, headersize, 0)		// e_res[1]
	EmitInteger16(headerbuffer, headersize, 0)		// e_res[2]
	EmitInteger16(headerbuffer, headersize, 0)		// e_res[3]

	EmitInteger16(headerbuffer, headersize, 0)		// e_oemid
	EmitInteger16(headerbuffer, headersize, 0)		// e_oeminfo

	EmitInteger16(headerbuffer, headersize, 0)		// e_res2[0]
	EmitInteger16(headerbuffer, headersize, 0)		// e_res2[1]
	EmitInteger16(headerbuffer, headersize, 0)		// e_res2[2]
	EmitInteger16(headerbuffer, headersize, 0)		// e_res2[3]
	EmitInteger16(headerbuffer, headersize, 0)		// e_res2[4]
	EmitInteger16(headerbuffer, headersize, 0)		// e_res2[5]
	EmitInteger16(headerbuffer, headersize, 0)		// e_res2[6]
	EmitInteger16(headerbuffer, headersize, 0)		// e_res2[7]
	EmitInteger16(headerbuffer, headersize, 0)		// e_res2[8]
	EmitInteger16(headerbuffer, headersize, 0)		// e_res2[9]

	EmitInteger(headerbuffer, headersize, 0xb0)		// e_lfanew


	// Begin DOS stub
	EmitByte(headerbuffer, headersize, 0x0e)
	EmitByte(headerbuffer, headersize, 0x1f)
	EmitByte(headerbuffer, headersize, 0xba)
	EmitByte(headerbuffer, headersize, 0x0e)
	EmitByte(headerbuffer, headersize, 0x00)
	EmitByte(headerbuffer, headersize, 0xb4)
	EmitByte(headerbuffer, headersize, 0x09)
	EmitByte(headerbuffer, headersize, 0xcd)
	EmitByte(headerbuffer, headersize, 0x21)
	EmitByte(headerbuffer, headersize, 0xb8)
	EmitByte(headerbuffer, headersize, 0x01)
	EmitByte(headerbuffer, headersize, 0x4c)
	EmitByte(headerbuffer, headersize, 0xcd)
	EmitByte(headerbuffer, headersize, 0x21)

	EmitByte(headerbuffer, headersize, 0x54)
	EmitByte(headerbuffer, headersize, 0x68)
	EmitByte(headerbuffer, headersize, 0x69)
	EmitByte(headerbuffer, headersize, 0x73)
	EmitByte(headerbuffer, headersize, 0x20)
	EmitByte(headerbuffer, headersize, 0x70)
	EmitByte(headerbuffer, headersize, 0x72)
	EmitByte(headerbuffer, headersize, 0x6f)
	EmitByte(headerbuffer, headersize, 0x67)
	EmitByte(headerbuffer, headersize, 0x72)
	EmitByte(headerbuffer, headersize, 0x61)
	EmitByte(headerbuffer, headersize, 0x6d)
	EmitByte(headerbuffer, headersize, 0x20)
	EmitByte(headerbuffer, headersize, 0x69)

	EmitByte(headerbuffer, headersize, 0x73)
	EmitByte(headerbuffer, headersize, 0x20)
	EmitByte(headerbuffer, headersize, 0x66)
	EmitByte(headerbuffer, headersize, 0x72)
	EmitByte(headerbuffer, headersize, 0x6f)
	EmitByte(headerbuffer, headersize, 0x6d)
	EmitByte(headerbuffer, headersize, 0x20)
	EmitByte(headerbuffer, headersize, 0x74)
	EmitByte(headerbuffer, headersize, 0x68)
	EmitByte(headerbuffer, headersize, 0x65)
	EmitByte(headerbuffer, headersize, 0x20)
	EmitByte(headerbuffer, headersize, 0x66)
	EmitByte(headerbuffer, headersize, 0x75)
	EmitByte(headerbuffer, headersize, 0x74)

	EmitByte(headerbuffer, headersize, 0x75)
	EmitByte(headerbuffer, headersize, 0x72)
	EmitByte(headerbuffer, headersize, 0x65)
	EmitByte(headerbuffer, headersize, 0x2e)
	EmitByte(headerbuffer, headersize, 0x0d)
	EmitByte(headerbuffer, headersize, 0x0a)
	EmitByte(headerbuffer, headersize, 0x49)
	EmitByte(headerbuffer, headersize, 0x74)
	EmitByte(headerbuffer, headersize, 0x20)
	EmitByte(headerbuffer, headersize, 0x77)
	EmitByte(headerbuffer, headersize, 0x69)
	EmitByte(headerbuffer, headersize, 0x6c)
	EmitByte(headerbuffer, headersize, 0x6c)
	EmitByte(headerbuffer, headersize, 0x20)

	EmitByte(headerbuffer, headersize, 0x6e)
	EmitByte(headerbuffer, headersize, 0x6f)
	EmitByte(headerbuffer, headersize, 0x74)
	EmitByte(headerbuffer, headersize, 0x20)
	EmitByte(headerbuffer, headersize, 0x72)
	EmitByte(headerbuffer, headersize, 0x75)
	EmitByte(headerbuffer, headersize, 0x6e)
	EmitByte(headerbuffer, headersize, 0x20)
	EmitByte(headerbuffer, headersize, 0x6f)
	EmitByte(headerbuffer, headersize, 0x6e)
	EmitByte(headerbuffer, headersize, 0x20)
	EmitByte(headerbuffer, headersize, 0x79)
	EmitByte(headerbuffer, headersize, 0x6f)
	EmitByte(headerbuffer, headersize, 0x75)

	EmitByte(headerbuffer, headersize, 0x72)
	EmitByte(headerbuffer, headersize, 0x20)
	EmitByte(headerbuffer, headersize, 0x70)
	EmitByte(headerbuffer, headersize, 0x72)
	EmitByte(headerbuffer, headersize, 0x69)
	EmitByte(headerbuffer, headersize, 0x6d)
	EmitByte(headerbuffer, headersize, 0x69)
	EmitByte(headerbuffer, headersize, 0x74)
	EmitByte(headerbuffer, headersize, 0x69)
	EmitByte(headerbuffer, headersize, 0x76)
	EmitByte(headerbuffer, headersize, 0x65)
	EmitByte(headerbuffer, headersize, 0x20)
	EmitByte(headerbuffer, headersize, 0x63)
	EmitByte(headerbuffer, headersize, 0x6f)

	EmitByte(headerbuffer, headersize, 0x6d)
	EmitByte(headerbuffer, headersize, 0x70)
	EmitByte(headerbuffer, headersize, 0x75)
	EmitByte(headerbuffer, headersize, 0x74)
	EmitByte(headerbuffer, headersize, 0x69)
	EmitByte(headerbuffer, headersize, 0x6e)
	EmitByte(headerbuffer, headersize, 0x67)
	EmitByte(headerbuffer, headersize, 0x20)
	EmitByte(headerbuffer, headersize, 0x64)
	EmitByte(headerbuffer, headersize, 0x65)
	EmitByte(headerbuffer, headersize, 0x76)
	EmitByte(headerbuffer, headersize, 0x69)
	EmitByte(headerbuffer, headersize, 0x63)
	EmitByte(headerbuffer, headersize, 0x65)

	EmitByte(headerbuffer, headersize, 0x2e)
	EmitByte(headerbuffer, headersize, 0x0d)
	EmitByte(headerbuffer, headersize, 0x0a)
	EmitByte(headerbuffer, headersize, 0x24)

	EmitPadding(headerbuffer, headersize, 0xb0)


	// Begin NT headers
	EmitInteger(headerbuffer, headersize, 0x00004550)
	EmitInteger16(headerbuffer, headersize, 0x014c)			// Machine
	EmitInteger16(headerbuffer, headersize, 5)			// NumberOfSections
	EmitInteger(headerbuffer, headersize, 0x00000000)		// TimeDateStamp
	EmitInteger(headerbuffer, headersize, 0)			// PointerToSymbolTable
	EmitInteger(headerbuffer, headersize, 0)			// NumberOfSymbols
	EmitInteger16(headerbuffer, headersize, 0xe0)			// SizeOfOptionalHeader
	EmitInteger16(headerbuffer, headersize, 0x0103)			// Characteristics

	EmitInteger16(headerbuffer, headersize, 0x010b)			// Magic
	EmitByte(headerbuffer, headersize, 0x02)			// MajorLinkerVersion
	EmitByte(headerbuffer, headersize, 0x00)			// MinorLinkerVersion

	EmitInteger(headerbuffer, headersize, RoundUp(HackSize))			// SizeOfCode
	EmitInteger(headerbuffer, headersize, 0x1000)			// SizeOfInitializedData
	EmitInteger(headerbuffer, headersize, 0)			// SizeOfUninitializedData
	EmitInteger(headerbuffer, headersize, 0x2000)			// AddressOfEntryPoint
	EmitInteger(headerbuffer, headersize, 0x800)			// BaseOfCode
	EmitInteger(headerbuffer, headersize, 0x1000)			// BaseOfData

	EmitInteger(headerbuffer, headersize, 0x400000)			// ImageBase
	EmitInteger(headerbuffer, headersize, 0x1000)			// SectionAlignment
	EmitInteger(headerbuffer, headersize, 0x200)			// FileAlignment

	EmitInteger16(headerbuffer, headersize, 0x04)			// MajorOperatingSystemVersion
	EmitInteger16(headerbuffer, headersize, 0x00)			// MinorOperatingSystemVersion
	EmitInteger16(headerbuffer, headersize, 0)			// MajorImageVersion
	EmitInteger16(headerbuffer, headersize, 0)			// MinorImageVersion
	EmitInteger16(headerbuffer, headersize, 0x04)			// MajorSubsystemVersion
	EmitInteger16(headerbuffer, headersize, 0x00)			// MinorSubsystemVersion

	EmitInteger(headerbuffer, headersize, 0)			// Win32VersionValue
	EmitInteger(headerbuffer, headersize, imagesize)		// SizeOfImage
	EmitInteger(headerbuffer, headersize, 0x400)			// SizeOfHeaders
	EmitInteger(headerbuffer, headersize, 0xf00d)			// Checksum

	EmitInteger16(headerbuffer, headersize, 3)			// Subsystem
	EmitInteger16(headerbuffer, headersize, 0)			// DllCharacteristics

	EmitInteger(headerbuffer, headersize, 0x800000)			// SizeOfStackReserve
	EmitInteger(headerbuffer, headersize, 0x80000)			// SizeOfStackCommit
	EmitInteger(headerbuffer, headersize, 0x500000)			// SizeOfHeapReserve
	EmitInteger(headerbuffer, headersize, 0x50000)			// SizeOfHeapCommit
	EmitInteger(headerbuffer, headersize, 0)			// LoaderFlags
	EmitInteger(headerbuffer, headersize, 0x10)			// NumberOfRvaAndSizes

	EmitInteger(headerbuffer, headersize, 0)			// RVA virtual address 1
	EmitInteger(headerbuffer, headersize, 0)			// Size

	EmitInteger(headerbuffer, headersize, 0x1200)			// RVA virtual address 2
	EmitInteger(headerbuffer, headersize, 0x28)			// Size

	EmitInteger(headerbuffer, headersize, 0x4000)			// RVA virtual address 3
	EmitInteger(headerbuffer, headersize, resourcesize)		// Size

	EmitInteger(headerbuffer, headersize, 0)			// RVA virtual address 4
	EmitInteger(headerbuffer, headersize, 0)			// Size

	EmitInteger(headerbuffer, headersize, 0)			// RVA virtual address 5
	EmitInteger(headerbuffer, headersize, 0)			// Size

	EmitInteger(headerbuffer, headersize, 0)			// RVA virtual address 6
	EmitInteger(headerbuffer, headersize, 0)			// Size

	EmitInteger(headerbuffer, headersize, 0)			// RVA virtual address 7
	EmitInteger(headerbuffer, headersize, 0)			// Size

	EmitInteger(headerbuffer, headersize, 0)			// RVA virtual address 8
	EmitInteger(headerbuffer, headersize, 0)			// Size

	EmitInteger(headerbuffer, headersize, 0)			// RVA virtual address 9
	EmitInteger(headerbuffer, headersize, 0)			// Size

	EmitInteger(headerbuffer, headersize, 0)			// RVA virtual address 10
	EmitInteger(headerbuffer, headersize, 0)			// Size

	EmitInteger(headerbuffer, headersize, 0)			// RVA virtual address 11
	EmitInteger(headerbuffer, headersize, 0)			// Size

	EmitInteger(headerbuffer, headersize, 0)			// RVA virtual address 12
	EmitInteger(headerbuffer, headersize, 0)			// Size

	EmitInteger(headerbuffer, headersize, 0)			// RVA virtual address 13
	EmitInteger(headerbuffer, headersize, 0)			// Size

	EmitInteger(headerbuffer, headersize, 0)			// RVA virtual address 14
	EmitInteger(headerbuffer, headersize, 0)			// Size

	EmitInteger(headerbuffer, headersize, 0)			// RVA virtual address 15
	EmitInteger(headerbuffer, headersize, 0)			// Size

	EmitInteger(headerbuffer, headersize, 0)			// RVA virtual address 16
	EmitInteger(headerbuffer, headersize, 0)			// Size


	integer written = 0
	WriteFile(filehandle, headerbuffer, headersize, written, 0)

	writtenbytes = headersize
}


EmitInteger : buffer ref b, integer ref size, integer value [nogc]
{
	writebuffer(b, size, (value) & 0xff)
	++size
	writebuffer(b, size, (value / 0x100) & 0xff)
	++size
	writebuffer(b, size, (value / 0x10000) & 0xff)
	++size
	writebuffer(b, size, (value / 0x1000000) & 0xff)
	++size
}

EmitInteger16 : buffer ref b, integer ref size, integer16 value [nogc]
{
	integer v = cast(integer, value)
	writebuffer(b, size, (v) & 0xff)
	++size
	writebuffer(b, size, (v / 0x100) & 0xff)
	++size
}

EmitByte : buffer ref b, integer ref size, integer value [nogc]
{
	writebuffer(b, size, (value) & 0xff)
	++size
}

EmitPadding : buffer ref b, integer ref size, integer targetsize [nogc]
{
	while(size < targetsize)
	{
		EmitByte(b, size, 0x00)
	}
}

EmitSubstring : buffer ref b, integer ref size, string s, integer bytes [nogc]
{
	writebuffer(b, size, s, bytes)
	size += bytes
}

