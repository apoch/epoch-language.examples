//
// The Epoch Language Project
// ERA Integrated Development Environment
//
// Entry point and main setup/tear-down logic for the Era IDE
//


type listnode<type T> : list<T> | nothing

structure list<type T> :
	T ref value,
	listnode<T> next


type simplelistnode<type T> : simplelist<T> | nothing

structure simplelist<type T> :
	T value,
	simplelistnode<T> next


structure WindowClass :
	integer Size,
	integer Style,
	(WindowProc : integer, integer, integer, integer -> integer),
	integer ClassExtra,
	integer WindowExtra,
	integer hInstance,
	integer hIcon,
	integer hCursor,
	integer hBackgroundBrush,
	string MenuName,
	string ClassName,
	integer hIconSmall

structure Point :
	integer x,
	integer y

structure Rect :
	integer left,
	integer top,
	integer right,
	integer bottom

structure MessageInfo :
	integer hwnd,
	integer message,
	integer wparam,
	integer lparam,
	integer time,
	Point point

structure PaintInfo :
	integer hdc,
	boolean erase,
	Rect paintarea,
	boolean restore,
	boolean incupdate,
	integer reserved0,
	integer reserved1,
	integer reserved2,
	integer reserved3,
	integer reserved4,
	integer reserved5,
	integer reserved6,
	integer reserved7

structure OpenFileNameStruct :
	integer structsize,
	integer hwndowner,
	integer hinstance,
	string filter,
	buffer customfilter,
	integer maxcustomfilter,
	integer filterindex,
	buffer file,
	integer maxfile,
	buffer filetitle,
	integer maxfiletitle,
	string initialdir,
	string title,
	integer flags,
	integer16 offset,
	integer16 extension,
	string defext,
	integer customdata,
	integer hook,
	string templatename

structure NotifyMessageHeader :
	integer hwnd,
	integer childid,
	integer code

structure ScintillaNotification :
	integer hwnd,
	integer childid,
	integer code,
	integer position,
	integer ch,
	integer modifiers,
	integer modtype,
	string text,
	integer length,
	integer linesadded,
	integer message,
	integer wparam,
	integer lparam,
	integer line,
	integer foldlevelnow,
	integer foldlevelprev,
	integer margin,
	integer listtype,
	integer x,
	integer y,
	integer token,
	integer annotationlinesadded

structure TreeViewItem :
	integer mask,
	integer handle,
	integer state,
	integer statemask,
	string text,
	integer textmax,
	integer image,
	integer selectedimage,
	integer children,
	integer lparam,
	integer integral,
	integer stateex,
	integer hwnd,
	integer expandedimage,
	integer reserved


structure TreeViewInsert :
	integer parent,
	integer insertafter,
	TreeViewItem item


CloseHandle : integer handle -> boolean ret = false [external("Kernel32.dll", "CloseHandle", "stdcall")]
GetModuleHandle : integer null -> integer handle = 0 [external("Kernel32.dll", "GetModuleHandleW", "stdcall")]
RegisterClassEx : WindowClass wc -> integer16 atom = 0 [external("User32.dll", "RegisterClassExW", "stdcall")]
CreateWindowEx : integer exstyle, string classname, string windowname, integer style, integer x, integer y, integer width, integer height, integer hwndparent, integer hmenu, integer hinstance, integer param -> integer windowhandle = 0 [external("User32.dll", "CreateWindowExW", "stdcall")]
ShowWindow : integer hwnd, integer cmdshow -> boolean success = false [external("User32.dll", "ShowWindow", "stdcall")]
LoadCursor : integer hinstance, integer cursorid -> integer cursorhandle = 0 [external("User32.dll", "LoadCursorW", "stdcall")]
LoadMenu : integer hinstance, integer menuid -> integer menuhandle = 0 [external("User32.dll", "LoadMenuW", "stdcall")]
LoadIcon : integer hinstance, integer iconid -> integer iconhandle = 0 [external("User32.dll", "LoadIconW", "stdcall")]
GetMessage : MessageInfo ref msg, integer hwnd, integer filtermin, integer filtermax -> boolean success = false [external("User32.dll", "GetMessageW", "stdcall")]
TranslateMessage : MessageInfo msg -> boolean success = false [external("User32.dll", "TranslateMessage", "stdcall")]
DispatchMessage : MessageInfo msg -> integer unused = 0 [external("User32.dll", "DispatchMessageW", "stdcall")]
BeginPaint : integer hwnd, PaintInfo ref paintinfo -> integer hdc = 0 [external("User32.dll", "BeginPaint", "stdcall")]
EndPaint : integer hwnd, PaintInfo paintinfo -> boolean success = false [external("User32.dll", "EndPaint", "stdcall")]
PostQuitMessage : integer exitcode [external("User32.dll", "PostQuitMessage", "stdcall")]
DefWindowProc : integer hwnd, integer msg, integer wparam, integer lparam -> integer ret = 0 [external("User32.dll", "DefWindowProcW", "stdcall")]
GetClientRect : integer hwnd, Rect ref rect -> boolean success = false [external("User32.dll", "GetClientRect", "stdcall")]
MoveWindow : integer hwnd, integer x, integer y, integer width, integer height, boolean repaint -> boolean success = false [external("User32.dll", "MoveWindow", "stdcall")]
GetDlgItem : integer hwnd, integer childid -> integer windowhandle = 0 [external("User32.dll", "GetDlgItem", "stdcall")]
LoadLibrary : string dllname -> integer libraryhandle = 0 [external("Kernel32.dll", "LoadLibraryW", "stdcall")]
SetTimer : integer hwnd, integer eventid, integer time, integer func -> integer ret = 0 [external("User32.dll", "SetTimer", "stdcall")]

GetParent : integer hwnd -> integer parenthwnd = 0 [external("User32.dll", "GetParent", "stdcall")]

PostMessage : integer hwnd, integer message, integer wparam, integer lparam -> integer ret = 0 [external("User32.dll", "PostMessageW", "stdcall")]
PostMessage : integer hwnd, integer message, integer wparam, buffer lparam -> integer ret = 0 [external("User32.dll", "PostMessageW", "stdcall")]
PostMessage : integer hwnd, integer message, integer wparam, string lparam -> integer ret = 0 [external("User32.dll", "PostMessageW", "stdcall")]
PostMessage : integer hwnd, integer message, buffer wparam, buffer lparam -> integer ret = 0 [external("User32.dll", "PostMessageW", "stdcall")]

SendMessage : integer hwnd, integer message, integer wparam, integer lparam -> integer ret = 0 [external("User32.dll", "SendMessageW", "stdcall")]
SendMessage : integer hwnd, integer message, integer wparam, buffer ref lparam -> integer ret = 0 [external("User32.dll", "SendMessageW", "stdcall")]
SendMessage : integer hwnd, integer message, integer wparam, TreeViewInsert ref lparam -> integer ret = 0 [external("User32.dll", "SendMessageW", "stdcall")]


MessageBox : integer hwnd, string message, string caption, integer style -> integer ret = 0 [external("User32.dll", "MessageBoxW", "stdcall")]
MessageBox : integer hwnd, buffer message, string caption, integer style -> integer ret = 0 [external("User32.dll", "MessageBoxW", "stdcall")]

CreateFile : string filename, integer access, integer sharemode, integer attributes, integer creation, integer flags, integer template -> integer ret = 0 [external("Kernel32.dll", "CreateFileW", "stdcall")]
CreateFileMapping : integer filehandle, integer attributes, integer protection, integer maxsizehigh, integer maxsizelow, integer name -> integer ret = 0 [external("Kernel32.dll", "CreateFileMappingW", "stdcall")]
MapViewOfFile : integer handle, integer access, integer offsethigh, integer offsetlow, integer bytestomap -> integer ptr = 0 [external("Kernel32.dll", "MapViewOfFile", "stdcall")]
UnmapViewOfFile : integer ptr -> boolean ret = false [external("Kernel32.dll", "UnmapViewOfFile", "stdcall")]
GetFileSize : integer handle, integer ignored -> integer size = 0 [external("Kernel32.dll", "GetFileSize", "stdcall")]

WriteFile : integer handle, buffer ref data, integer numbytes, integer ref written, integer ignored2 -> boolean ret = false [external("Kernel32.dll", "WriteFile", "stdcall")]

DestroyWindow : integer handle -> boolean ret = false [external("User32.dll", "DestroyWindow", "stdcall")]

GetOpenFileName : OpenFileNameStruct ref ofn -> integer ret = 0 [external("comdlg32.dll", "GetOpenFileNameW", "stdcall")]
GetSaveFileName : OpenFileNameStruct ref ofn -> integer ret = 0 [external("comdlg32.dll", "GetSaveFileNameW", "stdcall")]

GetLastError : -> integer ret = 0 [external("Kernel32.dll", "GetLastError", "stdcall")]


GetWindowText : integer hwnd, buffer ref outbuffer, integer buffersize -> integer ret = 0 [external("User32.dll", "GetWindowTextW", "stdcall")]


SetFocus : integer targethwnd -> integer hwndret = 0 [external("User32.dll", "SetFocus", "stdcall")]

InvalidateRect : integer hwnd, Rect ref rect, boolean erase -> boolean ret = false [external("User32.dll", "InvalidateRect", "stdcall")]
DrawEdge : integer hdc, Rect ref rect, integer edge, integer flags -> boolean ret = false [external("User32.dll", "DrawEdge", "stdcall")]
DrawText : integer hdc, string text, integer charcount, Rect ref rect, integer format -> integer ret = 0 [external("User32.dll", "DrawTextW", "stdcall")]
SetBkMode : integer hdc, integer mode -> integer ret = 0 [external("Gdi32.dll", "SetBkMode", "stdcall")]
SelectObject : integer hdc, integer object -> integer oldobject = 0 [external("Gdi32.dll", "SelectObject", "stdcall")]
FillRect : integer hdc, Rect ref rect, integer brush -> integer ret = 0 [external("User32.dll", "FillRect", "stdcall")]

CreateSolidBrush : integer color -> integer brush = 0 [external("Gdi32.dll", "CreateSolidBrush", "stdcall")]

LoadAccelerators : integer hinstance, integer tableid -> integer tablehandle = 0 [external("User32.dll", "LoadAcceleratorsW", "stdcall")]
TranslateAccelerator : integer hwnd, integer accelerators, MessageInfo ref msg -> integer ret = 0 [external("User32.dll", "TranslateAcceleratorW", "stdcall")]


CreateFont : integer height, integer width, integer escapement, integer orientation,
             integer weight, integer italic, integer underline, integer strikeout, integer charset,
             integer outprecision, integer clipprecision, integer quality, integer pitchfamily, string facename
          ->
             integer fonthandle = 0
          [external("Gdi32.dll", "CreateFontW", "stdcall")]


SetWindowText : integer hwnd, string text -> boolean success = false [external("User32.dll", "SetWindowTextW", "stdcall")]

GetTimeFormatEx : integer localenameptr, integer flags, integer timeptr, integer formatstrptr, buffer ref outbuffer, integer buffersize -> integer ret = 0 [external("Kernel32.dll", "GetTimeFormatEx", "stdcall")]
GetTimeFormatEx : integer localenameptr, integer flags, integer timeptr, integer formatstrptr, integer bufferptr, integer buffersize -> integer ret = 0 [external("Kernel32.dll", "GetTimeFormatEx", "stdcall")]


SetCapture : integer hwnd -> integer prevhwnd = 0 [external("User32.dll", "SetCapture", "stdcall")]
ReleaseCapture : -> boolean success = false [external("User32.dll", "ReleaseCapture", "stdcall")]


structure CommonControlInit :
	integer size,
	integer flags


InitCommonControlsEx : CommonControlInit ref init -> boolean ret = false [external("Comctl32.dll", "InitCommonControlsEx", "stdcall")]


SetWindowSubclass : integer hwnd,
                    (proc : integer, integer, integer, integer, integer, integer -> integer),
                    integer id, integer refdata
                 ->
                    boolean ret = false
	         [external("Comctl32.dll", "SetWindowSubclass", "stdcall")]
	         
DefSubclassProc : integer hwnd, integer message, integer wparam, integer lparam -> integer result = 0 [external("Comctl32.dll", "DefSubclassProc", "stdcall")]


structure ParseCallbacks :
	(ParseOKFunc : ),
	(ParseStructureFunc : string)


UDTListReset : [external("EpochLexer.dll", "UDTListReset", "stdcall")]
UDTListAppend : buffer token [external("EpochLexer.dll", "UDTListAppend", "stdcall")]

ParseSource : buffer source, ParseCallbacks callbacks [external("EpochCompiler.dll", "ParseSource", "stdcall")]



structure OpenTab :
	integer ContentsType,
	integer ContentsHWND,
	string FileName,
	string TabTitle


prepend<type T> : list<T> ref thelist, T ref value
{
	list<T> newlist = value, thelist
	thelist = newlist
}

simple_append_recurse<type T> : simplelist<T> ref thelist, nothing, T value
{
	simplelist<T> newlist = value, nothing
	thelist.next = newlist
}

simple_append_recurse<type T> : simplelist<T> ref thelist, simplelist<T> ref tail, T value
{
	simple_append_recurse<T>(tail, tail.next, value)
}


simple_append<type T> : simplelist<T> ref thelist, T value
{
	simple_append_recurse<T>(thelist, thelist.next, value)
}



global
{
	integer TAB_TYPE_SENTINEL = 0
	integer TAB_TYPE_EDITOR = 1
	integer TAB_TYPE_RESOURCES = 2
	integer TAB_TYPE_OPTIONS = 3
	
	OpenTab SentinelTab = TAB_TYPE_SENTINEL, 0, "", ""
	list<OpenTab> CurrentTabs = SentinelTab, nothing
	simplelist<integer> TabEdges = 0, nothing

	integer ActiveTabIndex = 0
	integer HighlightTabIndex = -1
	
	string FileTypeFilters = unescape("Epoch source files (*.epoch)\0*.epoch\0All files (*.*)\0*.*\0")

	integer MB_ICONEXCLAMATION = 0x30

	integer WNDID_PROJECT_TREEVIEW = 0x001
	integer WNDID_STATUS_HISTORY = 0x002
	integer WNDID_TOOLBAR = 0x003

	integer WNDID_TAB_START = 0x1000
	
	integer TOOLID_FIND_EDIT = 0x001
	integer TOOLID_FIND_BUTTON = 0x002

	integer SCN_MARGINCLICK = 2010

	integer SCI_LINEFROMPOSITION = 2166
	integer SCI_TOGGLEFOLD = 2231
	integer SCI_SETPROPERTY = 4004
	integer SCI_SETMARGINWIDTHN = 2242
	integer SCI_SETMARGINTYPEN = 2240
	integer SCI_SETMARGINMASKN = 2244
	integer SCI_MARKERDEFINE = 2040
	integer SCI_SETFOLDFLAGS = 2233
	integer SCI_SETMARGINSENSITIVEN = 2246
	integer SCI_GETLENGTH = 2183
	integer SCI_GETTEXT = 2182
	integer SCI_LINELENGTH = 2350

	integer SC_MARGIN_SYMBOL = 0
	integer SC_MASK_FOLDERS = 0xfe000000
	integer SC_MARKNUM_FOLDER = 30
	integer SC_MARKNUM_FOLDEROPEN = 31
	integer SC_MARKNUM_FOLDEREND = 25
	integer SC_MARKNUM_FOLDERMIDTAIL = 27
	integer SC_MARKNUM_FOLDEROPENMID = 26
	integer SC_MARKNUM_FOLDERSUB = 29
	integer SC_MARKNUM_FOLDERTAIL = 28

	integer SC_MARK_PLUS = 8
	integer SC_MARK_MINUS = 7
	integer SC_MARK_EMPTY = 5


	integer FontUIDefault = 0
	integer FontMonospace = 0
	integer FontUIMarlett = 0
	
	integer BrushBackground = 0
	integer BrushActiveTab = 0

	integer SW_SHOW = 5
	integer SW_HIDE = 0

	integer WM_SIZE = 5
	integer WM_COMMAND = 273
}


entrypoint :
{
	if(!cmdlineisvalid())
	{
		MessageBox(0, "Invalid command line specified; please check for mismatched quotes or other formatting problems.", "ERA Development Environment", MB_ICONEXCLAMATION)
		return()
	}
	
	integer ICC_TREEVIEW_CLASSES = 0x2
	integer ICC_STANDARD_CLASSES = 0x4000

	CommonControlInit ccinit = sizeof(ccinit), ICC_TREEVIEW_CLASSES + ICC_STANDARD_CLASSES
	if(!InitCommonControlsEx(ccinit))
	{
		MessageBox(0, "Failed to init common controls", "ERA Development Environment", MB_ICONEXCLAMATION)
	}

	integer IDI_ICON = 101
	integer IDC_ARROW = 32512
	integer COLOR_BTNFACE = 15
	integer WS_OVERLAPPEDWINDOW = 13565952
	integer CW_USEDEFAULT = -2147483648
	integer SW_SHOWMAXIMIZED = 3
	integer ES_READONLY = 0x800
	integer WM_SETFONT = 0x30
	integer ECM_SETCUEBANNER = 0x1501

	integer hInstance = GetModuleHandle(0)
	
	BrushBackground = CreateSolidBrush(0xffaa9e)
	BrushActiveTab = CreateSolidBrush(0xffccc6)

	WindowClass wc = sizeof(wc), 0, MainWindowProcedure, 0, 0, hInstance, LoadIcon(hInstance, IDI_ICON), LoadCursor(0, IDC_ARROW), BrushBackground, "", "ERAClass", 0
	integer16 fail = 0
	if(RegisterClassEx(wc) == fail)
	{
		MessageBox(0, "Failed to register primary application window class!", "ERA Development Enviroment", MB_ICONEXCLAMATION)
		return()
	}

	integer hMainMenuBar = LoadMenu(hInstance, 1000)

	integer hwnd = CreateWindowEx(0, "ERAClass", "ERA - Epoch Development Environment", WS_OVERLAPPEDWINDOW + 0x02000000, CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, 0, hMainMenuBar, hInstance, 0)

	if(hwnd == 0)
	{
		MessageBox(0, "Failed to create primary application window!", "ERA Development Environment", MB_ICONEXCLAMATION)
		return()
	}

	Rect client = 0, 0, 0, 0
	GetClientRect(hwnd, client)

	integer ScintillaModule = LoadLibrary("SciLexer.DLL")

	
	if(cmdlinegetcount() > 1)
	{
		CreateEditorTab(hwnd, cmdlineget(1))
	}
	else
	{
		CreateEditorTab(hwnd, "")
	}
	
	
	FontUIDefault = CreateFont(20, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, "Segoe UI")
	FontMonospace = CreateFont(20, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, "Consolas")
	FontUIMarlett = CreateFont(15, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, "Marlett")

	integer HistoryHWND = CreateWindowEx(0, "Edit", "", 0x50800000 + ES_READONLY, 0, 0, 100, 100, hwnd, WNDID_STATUS_HISTORY, hInstance, 0)
	PostMessage(HistoryHWND, WM_SETFONT, FontMonospace, 0)
	SetWindowText(HistoryHWND, GetCurrentTimeFormatted() ; ": Era IDE Started")
	
	integer ProjectHWND = CreateWindowEx(0, "SysTreeView32", "ProjectTree", 0x50801007, 0, 0, 100, 100, hwnd, WNDID_PROJECT_TREEVIEW, hInstance, 0)
	
	integer projectroot = TreeViewAddItem(ProjectHWND, 0, "Project")
	integer coderoot = TreeViewAddItem(ProjectHWND, projectroot, "Source Code")
	integer resourceroot = TreeViewAddItem(ProjectHWND, projectroot, "Resources")
	integer optionsroot = TreeViewAddItem(ProjectHWND, projectroot, "Options")
	
	TreeViewAddItem(ProjectHWND, coderoot, "Foo.epoch")
	TreeViewAddItem(ProjectHWND, resourceroot, "Bar.erc")

	TreeViewExpand(ProjectHWND, projectroot)
	TreeViewExpand(ProjectHWND, coderoot)
	TreeViewExpand(ProjectHWND, resourceroot)


	WindowClass tbwc = sizeof(tbwc), 0, ToolbarWindowProcedure, 0, 0, hInstance, 0, LoadCursor(0, IDC_ARROW), BrushBackground, "", "EraToolbarClass", 0
	if(RegisterClassEx(tbwc) == fail)
	{
		return()
	}

	integer ToolbarHWND = CreateWindowEx(0, "EraToolbarClass", "", 0x50000000, 0, 0, 10, 10, hwnd, WNDID_TOOLBAR, hInstance, 0)
	integer FindBoxHWND = CreateWindowEx(0, "Edit", "", 0x50800000, 0, 0, 10, 10, ToolbarHWND, TOOLID_FIND_EDIT, hInstance, 0)
	integer FindButtonHWND = CreateWindowEx(0, "Button", "Go", 0x50008001, 0, 0, 10, 10, ToolbarHWND, TOOLID_FIND_BUTTON, hInstance, 0)

	PostMessage(FindBoxHWND, WM_SETFONT, FontMonospace, 0)
	PostMessage(FindButtonHWND, WM_SETFONT, FontUIDefault, 0)
	
	PostMessage(FindBoxHWND, ECM_SETCUEBANNER, 0, "Search")
	SetWindowSubclass(FindBoxHWND, FindBoxSubclassProc, 0, 0)

	integer accelerators = LoadAccelerators(hInstance, 9000)
	

	ShowWindow(hwnd, SW_SHOWMAXIMIZED)

	SetTimer(hwnd, 1, 1000, 0)

	Point pt = 0, 0
	MessageInfo msg = 0, 0, 0, 0, 0, pt

	while(GetMessage(msg, 0, 0, 0))
	{
		if(TranslateAccelerator(hwnd, accelerators, msg) == 0)
		{
			TranslateMessage(msg)
			DispatchMessage(msg)
		}
	}
}


MainWindowProcedure : integer hwnd, integer message, integer wparam, integer lparam -> integer ret = 0
{
	integer WM_PAINT = 15
	integer WM_DESTROY = 2
	integer WM_CLOSE = 0x10
	integer WM_NOTIFY = 0x4e
	integer WM_TIMER = 0x113
	integer WM_ACTIVATE = 0x06
	integer WM_MOUSEMOVE = 0x200
	integer WM_LBUTTONUP = 0x202

	integer GW_CHILD = 5

	if(message == WM_PAINT)
	{
		integer BDR_RAISED = 0x5
		integer BF_RECT = 0xf
		integer BF_TOP = 0x2
		integer EDGE_ETCHED = 0x6
		integer DT_RIGHT = 0x2
		integer TRANSPARENT = 1

		Rect prect = 0, 0, 0, 0
		PaintInfo ps = 0, false, prect, false, false, 0, 0, 0, 0, 0, 0, 0, 0

		integer hdc = BeginPaint(hwnd, ps)
		
		SetBkMode(hdc, TRANSPARENT)

		Rect client = 0, 0, 0, 0
		GetClientRect(hwnd, client)
		Rect status = client.left, client.bottom - 24, client.right, client.bottom

		FillRect(hdc, status, BrushActiveTab)
		DrawEdge(hdc, status, EDGE_ETCHED, BF_TOP)

		simplelist<integer> newedges = 0, nothing
		TabEdges = newedges
		
		client.top = client.top + 30
		DrawTabList(CurrentTabs, client, client.left + 250 + 3, hdc, 0)

		status.top = status.top + 3
		
		SelectObject(hdc, FontUIDefault)

		integer line = 0
		integer col = 0
		GetScintillaPosition(GetActiveEditorHwnd(), line, col)
		DrawText(hdc, "Line: " ; cast(string, line + 1) ; " Column: " ; cast(string, col + 1) ; " ", -1, status, DT_RIGHT)

		EndPaint(hwnd, ps)
	}
	elseif(message == WM_CLOSE)
	{
		boolean exit = true
		integer scintillahwnd = GetActiveEditorHwnd()
		if(GetScintillaDirty(scintillahwnd))
		{
			exit = PromptToSave(hwnd, scintillahwnd)
		}

		if(exit)
		{
			DestroyWindow(hwnd)
		}
	}
	elseif(message == WM_DESTROY)
	{
		PostQuitMessage(0)
	}
	elseif(message == WM_SIZE)
	{
		Rect client = 0, 0, 0, 0
		GetClientRect(hwnd, client)
		
		integer toolbarhwnd = GetDlgItem(hwnd, WNDID_TOOLBAR)
		MoveWindow(toolbarhwnd, client.left, client.top, client.right - client.left, client.top + 30, true)

		client.top = client.top + 30
		Rect editor = client.left + 250 + 3, client.top + 28, client.right, client.bottom - 150 - 24 - 3
		Rect history = client.left, client.bottom - 150 - 24, client.right, client.bottom - 24
		Rect project = client.left, client.top, client.left + 250, client.bottom - 150 - 24 - 3

		integer scintillahwnd = GetActiveEditorHwnd()
		MoveWindow(scintillahwnd, editor.left, editor.top, editor.right - editor.left, editor.bottom - editor.top, true)
		
		integer historyhwnd = GetDlgItem(hwnd, WNDID_STATUS_HISTORY)
		MoveWindow(historyhwnd, history.left, history.top, history.right - history.left, history.bottom - history.top, true)
		
		integer projecthwnd = GetDlgItem(hwnd, WNDID_PROJECT_TREEVIEW)
		MoveWindow(projecthwnd, project.left, project.top, project.right - project.left, project.bottom - project.top, true)

		integer width = client.right - client.left
		SetScintillaScrolling(scintillahwnd, width - 64)

		InvalidateRect(hwnd, client, true)
	}
	elseif(message == WM_COMMAND)
	{
		wparam = wparam & 0xffff
		if(wparam == 1001)
		{
			CreateEditorTab(hwnd, "")
		}
		elseif(wparam == 1002)
		{
			integer customfilterbuffersize = 256
			buffer customfilterbuffer = customfilterbuffersize

			integer filebuffersize = 2048
			buffer filebuffer = filebuffersize

			integer filetitlebuffersize = 2048
			buffer filetitlebuffer = filetitlebuffersize

			integer16 word = 0

			OpenFileNameStruct ofn = sizeof(ofn), hwnd, GetModuleHandle(0), FileTypeFilters,
						 customfilterbuffer, customfilterbuffersize, 1, filebuffer, filebuffersize,
						 filetitlebuffer, filetitlebuffersize, "", "Open File", 0, word, word, "", 0, 0, ""

			integer ofnret = GetOpenFileName(ofn)
			if(ofnret != 0)
			{
				CreateEditorTab(hwnd, cast(string, ofn.file))
			}
		}
		elseif(wparam == 1003)
		{
			integer scintillahwnd = GetActiveEditorHwnd()
			SaveDocument(hwnd, scintillahwnd)
		}
		elseif(wparam == 1004)
		{
			integer scintillahwnd = GetActiveEditorHwnd()
			SaveDocumentAs(hwnd, scintillahwnd)
		}
		elseif(wparam == 1005)
		{
			// TODO - check ALL tabs for dirty docs and prompt to save each
			boolean exit = true
			integer scintillahwnd = GetActiveEditorHwnd()
			if(GetScintillaDirty(scintillahwnd))
			{
				exit = PromptToSave(hwnd, scintillahwnd)
			}

			if(exit)
			{
				DestroyWindow(hwnd)
			}
		}
		elseif(wparam == 2001)
		{
			integer findwnd = GetDlgItem(GetDlgItem(hwnd, WNDID_TOOLBAR), TOOLID_FIND_EDIT)
			SetWindowText(findwnd, "")
			SetFocus(findwnd)
		}
		elseif(wparam == 2002)
		{
			integer findwnd = GetDlgItem(GetDlgItem(hwnd, WNDID_TOOLBAR), TOOLID_FIND_EDIT)
			buffer needlebuffer = 512
			GetWindowText(findwnd, needlebuffer, 512)
			ScintillaFind(GetActiveEditorHwnd(), cast(string, needlebuffer))
		}
		elseif(wparam == 2003)
		{
			integer findwnd = GetDlgItem(GetDlgItem(hwnd, WNDID_TOOLBAR), TOOLID_FIND_EDIT)
			buffer needlebuffer = 512
			GetWindowText(findwnd, needlebuffer, 512)
			ScintillaFindReverse(GetActiveEditorHwnd(), cast(string, needlebuffer))
		}
		elseif(wparam == 3001)
		{
			MessageBox(hwnd, "Era is the prototype Integrated Development Environment for the Epoch programming language.", "About Era", 64)
		}
	}
	elseif(message == WM_NOTIFY)
	{
		NotifyMessageHeader nmhdr = 0, 0, 0
		marshalstructure(nmhdr, lparam)
		
		if(nmhdr.childid == GetActiveEditorChildCode())
		{
			integer SCN_UPDATEUI = 2007
			integer SCN_CHARADDED = 2001

			if(nmhdr.code == SCN_MARGINCLICK)
			{
				ScintillaNotification scn = 0, 0, 0, 0, 0, 0, 0, "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
				marshalstructure(scn, lparam)

				if(scn.margin == 1)
				{
					integer scintillawnd = GetActiveEditorHwnd()
					integer linenumber = SendMessage(scintillawnd, SCI_LINEFROMPOSITION, scn.position, 0)
					PostMessage(scintillawnd, SCI_TOGGLEFOLD, linenumber, 0)
				}
			}
			elseif(nmhdr.code == SCN_UPDATEUI)
			{
				Rect client = 0, 0, 0, 0
				GetClientRect(hwnd, client)
				Rect status = client.left, client.bottom - 24, client.right, client.bottom

				InvalidateRect(hwnd, status, true)
			}
			elseif(nmhdr.code == SCN_CHARADDED)
			{
				ScintillaNotification scn = 0, 0, 0, 0, 0, 0, 0, "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
				marshalstructure(scn, lparam)

				if(scn.ch == 10)		// Linefeed
				{
					PerformAutoIndent(GetActiveEditorHwnd())
				}
				elseif(scn.ch == 0x7d)		// Right curly brace
				{
					PerformAutoUnindent(GetActiveEditorHwnd())
				}
			}
		}
	}
	elseif(message == WM_TIMER)
	{
		integer scintillahwnd = GetActiveEditorHwnd()
		integer doclength = SendMessage(scintillahwnd, SCI_GETLENGTH, 0, 0) + 1
		buffer output = doclength
		SendMessage(scintillahwnd, SCI_GETTEXT, doclength, output)

		ParseCallbacks callbacks = ParseOK, ParseStructure
		ParseSource(output, callbacks)
		ScintillaColorize(scintillahwnd)
	}
	elseif(message == WM_ACTIVATE)
	{
		ret = DefWindowProc(hwnd, message, wparam, lparam)
		SetFocus(GetActiveEditorHwnd())
	}
	elseif(message == WM_MOUSEMOVE)
	{
		Rect client = 0, 0, 0, 0
		GetClientRect(hwnd, client)
		Rect tabbar = client.left + 250 + 3, client.top + 30, client.right, client.top + 24 + 30

		integer xcoord = lparam & 0xffff
		integer ycoord = (lparam & 0xffff0000) / 0x10000
		
		if(ycoord < tabbar.top)
		{
			HighlightTabIndex = -1
		}
		elseif(ycoord > tabbar.bottom)
		{
			HighlightTabIndex = -1
		}
		elseif(xcoord < tabbar.left)
		{
			HighlightTabIndex = -1
		}
		elseif(xcoord > tabbar.right)
		{
			HighlightTabIndex = -1
		}
		else
		{
			HighlightTabIndex = TestForMouseOverTab(TabEdges, xcoord)
		}

		InvalidateRect(hwnd, tabbar, true)
		
		if(HighlightTabIndex < 0)
		{
			ReleaseCapture()
		}
		else
		{
			SetCapture(hwnd)
		}
	}
	elseif(message == WM_LBUTTONUP)
	{
		integer xcoord = lparam & 0xffff
		integer newtabindex = TestForMouseOverTab(TabEdges, xcoord)
		if(!(newtabindex < 0))
		{
			SetActiveTab(newtabindex)
		}
	}
	else
	{
		ret = DefWindowProc(hwnd, message, wparam, lparam)
	}
}


ToolbarWindowProcedure : integer hwnd, integer message, integer wparam, integer lparam -> integer ret = 0
{
	if(message == WM_SIZE)
	{
		Rect client = 0, 0, 0, 0
		GetClientRect(hwnd, client)
		
		MoveWindow(GetDlgItem(hwnd, TOOLID_FIND_BUTTON), client.right - 30 - 3, client.top + 3, 30, client.bottom - client.top - 6, true)
		MoveWindow(GetDlgItem(hwnd, TOOLID_FIND_EDIT), client.right - 30 - 2 - 300 - 3, client.top + 3, 300, client.bottom - client.top - 6, true)
	}
	elseif(message == WM_COMMAND)
	{
		wparam = wparam & 0xffff
		if(wparam == TOOLID_FIND_BUTTON)
		{
			buffer needlebuffer = 512
			GetWindowText(GetDlgItem(hwnd, TOOLID_FIND_EDIT), needlebuffer, 512)
			
			ScintillaFind(GetActiveEditorHwnd(), cast(string, needlebuffer))
		}
	}
	else
	{
		ret = DefWindowProc(hwnd, message, wparam, lparam)
	}
}

FindBoxSubclassProc : integer hwnd, integer message, integer wparam, integer lparam, integer id, integer refdata -> integer result = 0
{
	integer WM_CHAR = 0x102
	integer VK_RETURN = 0xd
	
	if((message == WM_CHAR) && (wparam == VK_RETURN))
	{
		PostMessage(GetParent(GetParent(hwnd)), WM_COMMAND, 2002, 0)
		result = 0
	}
	else
	{
		result = DefSubclassProc(hwnd, message, wparam, lparam)
	}
}


SetScintillaScrolling : integer hwnd, integer width
{
	integer SCI_SETSCROLLWIDTH = 2274
	integer SCI_SETSCROLLWIDTHTRACKING = 2516

	PostMessage(hwnd, SCI_SETSCROLLWIDTH, width, 0)
	PostMessage(hwnd, SCI_SETSCROLLWIDTHTRACKING, 1, 0)
}


SetScintillaFont : integer hwnd, string fontname, integer fontsize
{
	integer SCI_STYLESETFONT = 2056
	integer SCI_STYLECLEARALL = 2050
	integer SCI_STYLERESETDEFAULT = 2058
	integer SCI_STYLESETSIZE = 2055
	integer SCI_STYLESETFORE = 2051
	integer SCI_STYLESETBOLD = 2053

	PostMessage(hwnd, SCI_STYLERESETDEFAULT, 0, 0)
	PostMessage(hwnd, SCI_STYLESETFONT, 32, narrowstring(fontname))
	PostMessage(hwnd, SCI_STYLESETSIZE, 32, fontsize)
	PostMessage(hwnd, SCI_STYLECLEARALL, 0, 0)

	PostMessage(hwnd, SCI_STYLESETFORE, 1, 32768)
	PostMessage(hwnd, SCI_STYLESETFORE, 2, 0xff5b77)
	PostMessage(hwnd, SCI_STYLESETFORE, 3, 1381795)

	PostMessage(hwnd, SCI_STYLESETBOLD, 4, 1)

	PostMessage(hwnd, SCI_STYLESETFORE, 5, 8421376)
	PostMessage(hwnd, SCI_STYLESETFORE, 6, 8421376)
	PostMessage(hwnd, SCI_STYLESETFORE, 7, 16744576)

	PostMessage(hwnd, SCI_STYLESETFORE, 8, 16711680)
}

SetScintillaLexer : integer hwnd
{
	integer SCI_SETLEXERLANGUAGE = 4006
	integer SCI_LOADLEXERLIBRARY = 4007

	PostMessage(hwnd, SCI_LOADLEXERLIBRARY, 0, narrowstring("epochlexer.dll"))
	PostMessage(hwnd, SCI_SETLEXERLANGUAGE, 0, narrowstring("epoch"))

	PostMessage(hwnd, SCI_SETPROPERTY, narrowstring("fold"), narrowstring("1"))
	PostMessage(hwnd, SCI_SETPROPERTY, narrowstring("fold.compact"), narrowstring("0"))

	PostMessage(hwnd, SCI_SETMARGINWIDTHN, 1, 0)
	PostMessage(hwnd, SCI_SETMARGINTYPEN, 1, SC_MARGIN_SYMBOL)
	PostMessage(hwnd, SCI_SETMARGINMASKN, 1, SC_MASK_FOLDERS)
	PostMessage(hwnd, SCI_SETMARGINWIDTHN, 1, 20)

	PostMessage(hwnd, SCI_MARKERDEFINE, SC_MARKNUM_FOLDER, SC_MARK_PLUS)
	PostMessage(hwnd, SCI_MARKERDEFINE, SC_MARKNUM_FOLDEROPEN, SC_MARK_MINUS)
	PostMessage(hwnd, SCI_MARKERDEFINE, SC_MARKNUM_FOLDEREND, SC_MARK_EMPTY)
	PostMessage(hwnd, SCI_MARKERDEFINE, SC_MARKNUM_FOLDERMIDTAIL, SC_MARK_EMPTY)
	PostMessage(hwnd, SCI_MARKERDEFINE, SC_MARKNUM_FOLDEROPENMID, SC_MARK_EMPTY)
	PostMessage(hwnd, SCI_MARKERDEFINE, SC_MARKNUM_FOLDERSUB, SC_MARK_EMPTY)
	PostMessage(hwnd, SCI_MARKERDEFINE, SC_MARKNUM_FOLDERTAIL, SC_MARK_EMPTY)

	PostMessage(hwnd, SCI_SETFOLDFLAGS, 16, 0)

	PostMessage(hwnd, SCI_SETMARGINSENSITIVEN, 1, 1)
}

ScintillaColorize : integer hwnd
{
	integer SCI_COLOURISE = 4003

	PostMessage(hwnd, SCI_COLOURISE, 0, -1)
}

SetScintillaText : integer hwnd, integer ptr, integer len
{
	ClearScintillaText(hwnd)

	integer SCI_ADDTEXT = 2001
	SendMessage(hwnd, SCI_ADDTEXT, len, ptr)
}

ClearScintillaText : integer hwnd
{
	integer SCI_CLEARALL = 2004

	SendMessage(hwnd, SCI_CLEARALL, 0, 0)
}


GetScintillaPosition : integer hwnd, integer ref outline, integer ref outcol
{
	integer SCI_GETCURRENTPOS = 2008
	integer SCI_GETCOLUMN = 2129

	integer pos = SendMessage(hwnd, SCI_GETCURRENTPOS, 0, 0)
	outline = SendMessage(hwnd, SCI_LINEFROMPOSITION, pos, 0)
	outcol = SendMessage(hwnd, SCI_GETCOLUMN, pos, 0)
}


Open : integer hwnd, integer ScintillaHWND, string filename
{
	integer INVALID_HANDLE_VALUE = 0xffffffff
	integer FILE_SHARE_READ = 0x01
	integer OPEN_EXISTING = 3
	integer GENERIC_READ = 0x80000000

	integer filehandle = CreateFile(filename, GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0)
	if(filehandle != INVALID_HANDLE_VALUE)
	{
		integer PAGE_READONLY = 0x02
		
		integer len = GetFileSize(filehandle, 0)

		if(len > 0)
		{
			integer mappinghandle = CreateFileMapping(filehandle, 0, PAGE_READONLY, 0, 0, 0)
			if(mappinghandle != 0)
			{
				integer FILE_MAP_READ = 0x04
				integer ptr = MapViewOfFile(mappinghandle, FILE_MAP_READ, 0, 0, len)

				if(ptr != 0)
				{					
					SetScintillaText(ScintillaHWND, ptr, len)
					SetScintillaNonDirty(ScintillaHWND)
					UnmapViewOfFile(ptr)
				}
				CloseHandle(mappinghandle)
			}
			else
			{
				MessageBox(hwnd, "Failed to create mapping of file: " ; filename, "ERA Development Environment", MB_ICONEXCLAMATION)
			}
		}
		else
		{
			ClearScintillaText(ScintillaHWND)
			SetScintillaNonDirty(ScintillaHWND)
		}
		CloseHandle(filehandle)
	}
	else
	{
		MessageBox(hwnd, "Could not open file: " ; filename, "ERA Development Environment", MB_ICONEXCLAMATION)
	}
}


DoSave : integer hwnd
{
	integer GENERIC_WRITE = 0x40000000
	integer CREATE_ALWAYS = 2
	integer MB_ICONSTOP = 0x10

	OpenTab tab = 0, 0, "", ""
	FindTabAtIndex(CurrentTabs, ActiveTabIndex, tab)

	integer filehandle = CreateFile(tab.FileName, GENERIC_WRITE, 0, 0, CREATE_ALWAYS, 0, 0)
	if(filehandle == 0)
	{
		MessageBox(hwnd, "Unexpected error while saving file!", "ERA Development Environment", MB_ICONSTOP)
		return()
	}

	integer doclength = SendMessage(hwnd, SCI_GETLENGTH, 0, 0) + 1
	buffer output = doclength
	SendMessage(hwnd, SCI_GETTEXT, doclength, output)

	integer written = 0
	WriteFile(filehandle, output, doclength - 1, written, 0)

	CloseHandle(filehandle)

	SetScintillaNonDirty(hwnd)
}

SaveDocument : integer hwnd, integer scintillahwnd
{
	OpenTab tab = 0, 0, "", ""
	FindTabAtIndex(CurrentTabs, ActiveTabIndex, tab)
	
	if(length(tab.FileName) == 0)
	{
		SaveDocumentAs(hwnd, scintillahwnd)
	}
	else
	{
		DoSave(scintillahwnd)
	}
}

SaveDocumentAs : integer hwnd, integer scintillahwnd
{
	integer customfilterbuffersize = 256
	buffer customfilterbuffer = customfilterbuffersize

	integer filebuffersize = 2048
	buffer filebuffer = filebuffersize

	integer filetitlebuffersize = 2048
	buffer filetitlebuffer = filetitlebuffersize

	integer16 word = 0

	OpenFileNameStruct ofn = sizeof(ofn), hwnd, GetModuleHandle(0), FileTypeFilters,
				 customfilterbuffer, customfilterbuffersize, 1, filebuffer, filebuffersize,
				 filetitlebuffer, filetitlebuffersize, "", "Save File", 0, word, word, "", 0, 0, ""

	integer ofnret = GetSaveFileName(ofn)
	if(ofnret != 0)
	{
		string filename = cast(string, ofn.file)
		SetActiveTabInfo(filename, TrimFilePath(filename))
		DoSave(scintillahwnd)
	}
}


SetScintillaNonDirty : integer hwnd
{
	integer SCI_SETSAVEPOINT = 2014
	PostMessage(hwnd, SCI_SETSAVEPOINT, 0, 0)	
}

GetScintillaDirty : integer hwnd -> boolean dirty = false
{
	integer SCI_GETMODIFY = 2159
	if(SendMessage(hwnd, SCI_GETMODIFY, 0, 0) != 0)
	{
		dirty = true
	}
}


PromptToSave : integer hwnd, integer scintillahwnd -> boolean ret = false
{
	integer MB_ICONQUESTION = 0x020
	integer MB_YESNOCANCEL = 0x003
	integer YES = 6
	integer NO = 7
	integer CANCEL = 2

	integer prompt = MessageBox(hwnd, "The current document has unsaved changes. Would you like to save them first?", "ERA Development Environment", MB_ICONQUESTION + MB_YESNOCANCEL)
	if(prompt == YES)
	{
		SaveDocument(hwnd, scintillahwnd)
		ret = true
	}
	elseif(prompt == NO)
	{
		ret = true
	}
}

ParseOK :
{
	UDTListReset()
}

ParseStructure : string name
{
	UDTListAppend(narrowstring(name))
}


PerformAutoIndent : integer hwnd
{
	integer SCI_GETCURRENTPOS = 2008
	integer SCI_GETLINE = 2153
	integer SCI_REPLACESEL = 2170

	integer editpos = SendMessage(hwnd, SCI_GETCURRENTPOS, 0, 0)
	integer line = SendMessage(hwnd, SCI_LINEFROMPOSITION, editpos, 0)

	if(line > 0)
	{
		integer len = SendMessage(hwnd, SCI_LINELENGTH, line - 1, 0)
		buffer prevline = len + 1

		SendMessage(hwnd, SCI_GETLINE, line - 1, prevline)

		string prevlinestr = widenfrombuffer(prevline, len)
		integer pos = 0

		boolean indent = true
		while(indent)
		{
			string ch = substring(prevlinestr, pos, 1)
			if((ch != " ") && (ch != unescape("\t")))
			{
				indent = false
			}
			else
			{
				++pos
			}
		}
		
		string suffix = ""
		if(substring(prevlinestr, len - 3, 1) == "{")
		{
			suffix = unescape("\t")
		}

		if(pos > 0)
		{
			string indentprefix = substring(prevlinestr, 0, pos)
			PostMessage(hwnd, SCI_REPLACESEL, 0, narrowstring(indentprefix ; suffix))
		}
		else
		{
			PostMessage(hwnd, SCI_REPLACESEL, 0, narrowstring(suffix))
		}
	}
}

PerformAutoUnindent : integer hwnd
{
	integer SCI_GETCURRENTPOS = 2008
	integer SCI_GETLINE = 2153
	integer SCI_SETTARGETSTART = 2190
	integer SCI_SETTARGETEND = 2192
	integer SCI_REPLACETARGET = 2194

	integer editpos = SendMessage(hwnd, SCI_GETCURRENTPOS, 0, 0)
	integer line = SendMessage(hwnd, SCI_LINEFROMPOSITION, editpos, 0)
	
	integer len = SendMessage(hwnd, SCI_LINELENGTH, line, 0)
	buffer linebuffer = len + 1

	SendMessage(hwnd, SCI_GETLINE, line, linebuffer)

	string linestr = widenfrombuffer(linebuffer, len)
	
	if(substring(linestr, 0, 1) == unescape("\t"))
	{
		PostMessage(hwnd, SCI_SETTARGETSTART, editpos - 2, 0)
		PostMessage(hwnd, SCI_SETTARGETEND, editpos - 1, 0)
		PostMessage(hwnd, SCI_REPLACETARGET, 0, narrowstring(""))
	}
}


TrimFilePath : string fullpath -> string filename = ""
{
	integer lastslashpos = 0
	integer pos = 0
	
	while(pos < length(fullpath))
	{
		string ch = substring(fullpath, pos, 1)
		
		if(ch == "\")
		{
			lastslashpos = pos + 1
		}
		elseif(ch == "/")
		{
			lastslashpos = pos + 1
		}
		
		++pos
	}
	
	filename = substring(fullpath, lastslashpos)
}


GetCurrentTimeFormatted : -> string ret = ""
{
	integer reqlen = GetTimeFormatEx(0, 0, 0, 0, 0, 0) + 1
	buffer timestr = reqlen
	
	GetTimeFormatEx(0, 0, 0, 0, timestr, reqlen - 1)
	
	ret = cast(string, timestr)
	ret = substring(ret, 0, length(ret) - 2)
}


	
TreeViewAddItem : integer tvhwnd, integer hparent, string text -> integer newhandle = 0
{
	integer TVIF_TEXT = 0x01
	integer TVIM_INSERTITEM = 0x1100 + 50
	
	TreeViewItem item = TVIF_TEXT, 0, 0, 0, text, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	TreeViewInsert insert = hparent, 0, item
	
	newhandle = SendMessage(tvhwnd, TVIM_INSERTITEM, 0, insert)
}


TreeViewExpand : integer tvhwnd, integer node
{
	integer TVM_EXPAND = 0x1100 + 2
	integer TVE_EXPAND = 0x2
	SendMessage(tvhwnd, TVM_EXPAND, TVE_EXPAND, node)
}


CountTabs : list<OpenTab> ref tabs -> integer ret = 0
{
	if(tabs.value.ContentsType != TAB_TYPE_SENTINEL)
	{
		++ret
	}

	ret += CountTabs(tabs.next)
}

CountTabs : nothing -> 0


CreateEditorTab : integer parenthwnd, string filename -> integer editorhwnd = 0
{
	editorhwnd = CreateWindowEx(0, "Scintilla", "", 0x52810000, 0, 0, 600, 600, parenthwnd, WNDID_TAB_START + CountTabs(CurrentTabs), GetHInstance(), 0)
	SetScintillaFont(editorhwnd, "Consolas", 10)
	SetScintillaLexer(editorhwnd)
	ScintillaColorize(editorhwnd)

	OpenTab tab = TAB_TYPE_EDITOR, editorhwnd, filename, TrimFilePath(filename)

	if(length(filename) == 0)
	{
		tab.TabTitle = "(Untitled)"
	}
	else
	{
		Open(parenthwnd, editorhwnd, filename)
	}
	
	AppendTab(CurrentTabs, CurrentTabs.next, tab, 0)
}


GetHInstance : -> integer hinstance = GetModuleHandle(0)



AppendTab : list<OpenTab> ref tabs, list<OpenTab> ref tail, OpenTab ref tab, integer counter
{
	if(tabs.value.ContentsType == TAB_TYPE_SENTINEL)
	{
		tabs.value = tab
		SetActiveTab(counter)
	}
	else
	{
		++counter
		AppendTab(tail, tail.next, tab, counter)
	}
}

AppendTab : list<OpenTab> ref tabs, nothing, OpenTab ref tab, integer counter
{
	if(tabs.value.ContentsType == TAB_TYPE_SENTINEL)
	{
		tabs.value = tab
		SetActiveTab(counter)
	}
	else
	{
		list<OpenTab> newlist = tab, nothing
		tabs.next = newlist
		SetActiveTab(counter + 1)
	}
}



SetActiveTab : integer counter
{
	ActiveTabIndex = counter
	ShowOnlyTab(CurrentTabs, counter)
}

ShowOnlyTab : list<OpenTab> ref tabs, integer counter
{
	if(counter == 0)
	{
		ShowWindow(tabs.value.ContentsHWND, SW_SHOW)
		SendMessage(GetParent(tabs.value.ContentsHWND), WM_SIZE, 0, 0)
		ShowOnlyTab(tabs.next, -1)
	}
	else
	{
		ShowWindow(tabs.value.ContentsHWND, SW_HIDE)
		ShowOnlyTab(tabs.next, counter - 1)
	}
}

ShowOnlyTab : nothing, integer counter



DrawTabList : list<OpenTab> ref tabs, Rect ref client, integer left, integer hdc, integer counter
{
	if(tabs.value.ContentsType != TAB_TYPE_SENTINEL)
	{
		left = DrawTab(tabs.value, client, left, hdc, counter)

		simple_append<integer>(TabEdges, left)
	}
	
	DrawTabList(tabs.next, client, left, hdc, counter + 1)
}

DrawTabList : nothing, Rect ref client, integer left, integer hdc, integer counter


DrawTab : OpenTab ref thetab, Rect ref client, integer left, integer hdc, integer index -> integer right = 0
{
	SelectObject(hdc, FontUIDefault)

	integer BDR_RAISED = 0x5
	integer BF_RECT = 0xf

	Rect tab = left, client.top, left + 400, client.top + 28

	Rect textsize = 0, 0, 5000, 5000
	DrawText(hdc, thetab.TabTitle, -1, textsize, 0x420)

	tab.right = tab.left + (textsize.right - textsize.left) + 26

	if(index == ActiveTabIndex)
	{
		FillRect(hdc, tab, BrushActiveTab)
		DrawEdge(hdc, tab, BDR_RAISED, BF_RECT)
	}
	elseif(index == HighlightTabIndex)
	{
		FillRect(hdc, tab, BrushActiveTab)
	}
	else
	{
		FillRect(hdc, tab, BrushBackground)
	}
	
	right = tab.right

	tab.top = tab.top + 3
	tab.left = tab.left + 3
	tab.bottom = tab.bottom - 3
	tab.right = tab.right - 3

	DrawText(hdc, thetab.TabTitle, -1, tab, 0x24)

	Rect xarea = tab.right - 20, tab.top, tab.right, tab.bottom
	
	SelectObject(hdc, FontUIMarlett)
	DrawText(hdc, "r", -1, xarea, 0x26)
}

GetActiveEditorHwnd : -> integer hwnd = 0
{
	OpenTab tab = 0, 0, "", ""
	FindTabAtIndex(CurrentTabs, ActiveTabIndex, tab)
	hwnd = tab.ContentsHWND
}

GetActiveEditorChildCode : -> WNDID_TAB_START + ActiveTabIndex


FindTabAtIndex : list<OpenTab> ref tabs, integer offset, OpenTab ref out
{
	if(offset == 0)
	{
		out = tabs.value
		return()
	}
	
	FindTabAtIndex(tabs.next, offset - 1, out)
}

SetActiveTabInfo : string filename, string tabtitle
{
	FindTabAndSetInfo(CurrentTabs, ActiveTabIndex, filename, tabtitle)
}

FindTabAndSetInfo : list<OpenTab> ref tabs, integer offset, string filename, string tabtitle
{
	if(offset == 0)
	{
		tabs.value.FileName = filename
		tabs.value.TabTitle = tabtitle
		return()
	}
	
	FindTabAndSetInfo(tabs.next, offset - 1, filename, tabtitle)
}

TestForMouseOverTab : simplelist<integer> ref edges, integer xcoord -> integer tabindex = WalkEdgeListForActiveTab(edges, xcoord, 0)

WalkEdgeListForActiveTab : simplelist<integer> ref edges, integer xcoord, integer index -> integer active = -1
{
	if(xcoord < edges.value)
	{
		active = index - 1
	}
	else
	{
		active = WalkEdgeListForActiveTab(edges.next, xcoord, index + 1)
	}
}

WalkEdgeListForActiveTab : nothing, integer xcoord, integer index -> -1


ScintillaFind : integer hwnd, string needle
{
	integer SCI_SEARCHANCHOR = 2366
	integer SCI_SEARCHNEXT = 2367
	integer SCI_SCROLLCARET = 2169

	integer SCI_SETSELECTIONSTART = 2142
	integer SCI_GETSELECTIONEND = 2145
	
	buffer narrowneedle = narrowstring(needle)
	
	SetFocus(hwnd)
	
	SendMessage(hwnd, SCI_SETSELECTIONSTART, SendMessage(hwnd, SCI_GETSELECTIONEND, 0, 0), 0)

	SendMessage(hwnd, SCI_SEARCHANCHOR, 0, 0)
	integer findpos = SendMessage(hwnd, SCI_SEARCHNEXT, 0, narrowneedle)
	if(findpos != -1)
	{
		PostMessage(hwnd, SCI_SCROLLCARET, 0, 0)
	}
}

ScintillaFindReverse : integer hwnd, string needle
{
	integer SCI_SEARCHANCHOR = 2366
	integer SCI_SEARCHPREV = 2368
	integer SCI_SCROLLCARET = 2169

	integer SCI_SETSELECTIONSTART = 2142
	integer SCI_GETSELECTIONEND = 2145
	
	buffer narrowneedle = narrowstring(needle)
	
	SetFocus(hwnd)
	
	SendMessage(hwnd, SCI_SEARCHANCHOR, 0, 0)
	integer findpos = SendMessage(hwnd, SCI_SEARCHPREV, 0, narrowneedle)
	if(findpos != -1)
	{
		PostMessage(hwnd, SCI_SCROLLCARET, 0, 0)
	}
}
