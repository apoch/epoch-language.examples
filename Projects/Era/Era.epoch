//
// The Epoch Language Project
// ERA Integrated Development Environment
//
// Entry point and main setup/tear-down logic for the Era IDE
//


structure WindowClass :
(
	integer(Size),
	integer(Style),
	WindowProc : (integer, integer, integer, integer) -> (integer),
	integer(ClassExtra),
	integer(WindowExtra),
	integer(hInstance),
	integer(hIcon),
	integer(hCursor),
	integer(hBackgroundBrush),
	string(MenuName),
	string(ClassName),
	integer(hIconSmall)
)

structure Point :
(
	integer(x),
	integer(y)
)

structure Rect :
(
	integer(left),
	integer(top),
	integer(right),
	integer(bottom)
)

structure MessageInfo :
(
	integer(hwnd),
	integer(message),
	integer(wparam),
	integer(lparam),
	integer(time),
	Point(point)
)

structure PaintInfo :
(
	integer(hdc),
	boolean(erase),
	Rect(paintarea),
	boolean(restore),
	boolean(incupdate),
	integer(reserved0),
	integer(reserved1),
	integer(reserved2),
	integer(reserved3),
	integer(reserved4),
	integer(reserved5),
	integer(reserved6),
	integer(reserved7)
)

structure OpenFileNameStruct :
(
	integer(structsize),
	integer(hwndowner),
	integer(hinstance),
	string(filter),
	buffer(customfilter),
	integer(maxcustomfilter),
	integer(filterindex),
	buffer(file),
	integer(maxfile),
	buffer(filetitle),
	integer(maxfiletitle),
	string(initialdir),
	string(title),
	integer(flags),
	integer16(offset),
	integer16(extension),
	string(defext),
	integer(customdata),
	integer(hook),
	string(templatename)
)

structure NotifyMessageHeader :
(
	integer(hwnd),
	integer(childid),
	integer(code)
)

structure ScintillaNotification :
(
	integer(hwnd),
	integer(childid),
	integer(code),
	integer(position),
	integer(ch),
	integer(modifiers),
	integer(modtype),
	string(text),
	integer(length),
	integer(linesadded),
	integer(message),
	integer(wparam),
	integer(lparam),
	integer(line),
	integer(foldlevelnow),
	integer(foldlevelprev),
	integer(margin),
	integer(listtype),
	integer(x),
	integer(y),
	integer(token),
	integer(annotationlinesadded)
)


CloseHandle : (integer(handle)) -> (boolean(ret, false)) [external("Kernel32.dll", "CloseHandle")]
GetModuleHandle : (integer(null)) -> (integer(handle, 0)) [external("Kernel32.dll", "GetModuleHandleW")]
RegisterClassEx : (WindowClass(wc)) -> (integer16(atom, 0)) [external("User32.dll", "RegisterClassExW")]
CreateWindowEx : (integer(exstyle), string(classname), string(windowname), integer(style), integer(x), integer(y), integer(width), integer(height), integer(hwndparent), integer(hmenu), integer(hinstance), integer(param)) -> (integer(windowhandle, 0)) [external("User32.dll", "CreateWindowExW")]
ShowWindow : (integer(hwnd), integer(cmdshow)) -> (boolean(success, false)) [external("User32.dll", "ShowWindow")]
LoadCursor : (integer(hinstance), integer(cursorid)) -> (integer(cursorhandle, 0)) [external("User32.dll", "LoadCursorW")]
LoadMenu : (integer(hinstance), integer(menuid)) -> (integer(menuhandle, 0)) [external("User32.dll", "LoadMenuW")]
LoadIcon : (integer(hinstance), integer(iconid)) -> (integer(iconhandle, 0)) [external("User32.dll", "LoadIconW")]
GetMessage : (MessageInfo ref(msg), integer(hwnd), integer(filtermin), integer(filtermax)) -> (boolean(success, false)) [external("User32.dll", "GetMessageW")]
TranslateMessage : (MessageInfo(msg)) -> (boolean(success, false)) [external("User32.dll", "TranslateMessage")]
DispatchMessage : (MessageInfo(msg)) -> (integer(unused, 0)) [external("User32.dll", "DispatchMessageW")]
BeginPaint : (integer(hwnd), PaintInfo ref(paintinfo)) -> (integer(hdc, 0)) [external("User32.dll", "BeginPaint")]
EndPaint : (integer(hwnd), PaintInfo(paintinfo)) -> (boolean(success, false)) [external("User32.dll", "EndPaint")]
PostQuitMessage : (integer(exitcode)) -> () [external("User32.dll", "PostQuitMessage")]
DefWindowProc : (integer(hwnd), integer(msg), integer(wparam), integer(lparam)) -> (integer(ret, 0)) [external("User32.dll", "DefWindowProcW")]
GetClientRect : (integer(hwnd), Rect ref(rect)) -> (boolean(success, false)) [external("User32.dll", "GetClientRect")]
MoveWindow : (integer(hwnd), integer(x), integer(y), integer(width), integer(height), boolean(repaint)) -> (boolean(success, false)) [external("User32.dll", "MoveWindow")]
GetDlgItem : (integer(hwnd), integer(childid)) -> (integer(windowhandle, 0)) [external("User32.dll", "GetDlgItem")]
LoadLibrary : (string(dllname)) -> (integer(libraryhandle, 0)) [external("Kernel32.dll", "LoadLibraryW")]
SetTimer : (integer(hwnd), integer(eventid), integer(time), integer(func)) -> (integer(ret, 0)) [external("User32.dll", "SetTimer")]

PostMessage : (integer(hwnd), integer(message), integer(wparam), integer(lparam)) -> (integer(ret, 0)) [external("User32.dll", "PostMessageW")]
PostMessage : (integer(hwnd), integer(message), integer(wparam), buffer(lparam)) -> (integer(ret, 0)) [external("User32.dll", "PostMessageW")]
PostMessage : (integer(hwnd), integer(message), buffer(wparam), buffer(lparam)) -> (integer(ret, 0)) [external("User32.dll", "PostMessageW")]

SendMessage : (integer(hwnd), integer(message), integer(wparam), integer(lparam)) -> (integer(ret, 0)) [external("User32.dll", "SendMessageW")]
SendMessage : (integer(hwnd), integer(message), integer(wparam), buffer ref(lparam)) -> (integer(ret, 0)) [external("User32.dll", "SendMessageW")]

MessageBox : (integer(hwnd), string(message), string(caption), integer(style)) -> (integer(ret, 0)) [external("User32.dll", "MessageBoxW")]
MessageBox : (integer(hwnd), buffer(message), string(caption), integer(style)) -> (integer(ret, 0)) [external("User32.dll", "MessageBoxW")]

CreateFile : (string(filename), integer(access), integer(sharemode), integer(attributes), integer(creation), integer(flags), integer(template)) -> (integer(ret, 0)) [external("Kernel32.dll", "CreateFileW")]
CreateFileMapping : (integer(filehandle), integer(attributes), integer(protection), integer(maxsizehigh), integer(maxsizelow), integer(name)) -> (integer(ret, 0)) [external("Kernel32.dll", "CreateFileMappingW")]
MapViewOfFile : (integer(handle), integer(access), integer(offsethigh), integer(offsetlow), integer(bytestomap)) -> (integer(ptr, 0)) [external("Kernel32.dll", "MapViewOfFile")]
UnmapViewOfFile : (integer(ptr)) -> (boolean(ret, false)) [external("Kernel32.dll", "UnmapViewOfFile")]
GetFileSize : (integer(handle), integer(ignored)) -> (integer(size, 0)) [external("Kernel32.dll", "GetFileSize")]

WriteFile : (integer(handle), buffer ref(data), integer(numbytes), integer ref(written), integer(ignored2)) -> (boolean(ret, false)) [external("Kernel32.dll", "WriteFile")]

DestroyWindow : (integer(handle)) -> (boolean(ret, false)) [external("User32.dll", "DestroyWindow")]

GetOpenFileName : (OpenFileNameStruct ref(ofn)) -> (integer(ret, 0)) [external("comdlg32.dll", "GetOpenFileNameW")]
GetSaveFileName : (OpenFileNameStruct ref(ofn)) -> (integer(ret, 0)) [external("comdlg32.dll", "GetSaveFileNameW")]



global
{
	string(OpenFileName, "")

	string(FileTypeFilters, unescape("Epoch source files (*.epoch)\0*.epoch\0All files (*.*)\0*.*\0"))

	integer(MB_ICONEXCLAMATION, 0x30)

	integer(WNDID_SCINTILLA, 0x001)

	integer(SCN_MARGINCLICK, 2010)

	integer(SCI_LINEFROMPOSITION, 2166)
	integer(SCI_TOGGLEFOLD, 2231)
	integer(SCI_SETPROPERTY, 4004)
	integer(SCI_SETMARGINWIDTHN, 2242)
	integer(SCI_SETMARGINTYPEN, 2240)
	integer(SCI_SETMARGINMASKN, 2244)
	integer(SCI_MARKERDEFINE, 2040)
	integer(SCI_SETFOLDFLAGS, 2233)
	integer(SCI_SETMARGINSENSITIVEN, 2246)

	integer(SC_MARGIN_SYMBOL, 0)
	integer(SC_MASK_FOLDERS, 0xfe000000)
	integer(SC_MARKNUM_FOLDER, 30)
	integer(SC_MARKNUM_FOLDEROPEN, 31)
	integer(SC_MARKNUM_FOLDEREND, 25)
	integer(SC_MARKNUM_FOLDERMIDTAIL, 27)
	integer(SC_MARKNUM_FOLDEROPENMID, 26)
	integer(SC_MARKNUM_FOLDERSUB, 29)
	integer(SC_MARKNUM_FOLDERTAIL, 28)

	integer(SC_MARK_PLUS, 8)
	integer(SC_MARK_MINUS, 7)
	integer(SC_MARK_EMPTY, 5)
}


entrypoint : () -> ()
{
	if(!cmdlineisvalid())
	{
		MessageBox(0, "Invalid command line specified; please check for mismatched quotes or other formatting problems.", "ERA Development Environment", MB_ICONEXCLAMATION)
		return()
	}

	integer(IDI_ICON, 101)
	integer(IDC_ARROW, 32512)
	integer(COLOR_WINDOWFRAME, 6)
	integer(WS_OVERLAPPEDWINDOW, 13565952)
	integer(CW_USEDEFAULT, -2147483648)
	integer(SW_SHOW, 5)

	integer(hInstance, GetModuleHandle(0))

	WindowClass(wc, sizeof(wc), 0, MainWindowProcedure, 0, 0, hInstance, LoadIcon(hInstance, IDI_ICON), LoadCursor(0, IDC_ARROW), COLOR_WINDOWFRAME, "", "ERAClass", 0)
	integer16(fail, 0)
	if(RegisterClassEx(wc) == fail)
	{
		MessageBox(0, "Failed to register primary application window class!", "ERA Development Enviroment", MB_ICONEXCLAMATION)
		return()
	}

	integer(hMainMenuBar, LoadMenu(hInstance, 1000))

	integer(hwnd, CreateWindowEx(0, "ERAClass", "ERA - Epoch Development Environment", WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, 0, hMainMenuBar, hInstance, 0))

	if(hwnd == 0)
	{
		MessageBox(0, "Failed to create primary application window!", "ERA Development Environment", MB_ICONEXCLAMATION)
		return()
	}

	Rect(client, 0, 0, 0, 0)
	GetClientRect(hwnd, client)

	integer(ScintillaModule, LoadLibrary("SciLexer.DLL"))
	integer(ScintillaHWND, CreateWindowEx(0, "Scintilla", "", 1375797248, client.left, client.top, client.right - client.left, client.bottom - client.top, hwnd, WNDID_SCINTILLA, hInstance, 0))

	SetScintillaFont(ScintillaHWND, "Consolas", 10)
	SetScintillaLexer(ScintillaHWND)
	ScintillaColorize(ScintillaHWND)

	ShowWindow(hwnd, SW_SHOW)

	if(cmdlinegetcount() > 1)
	{
		Open(hwnd, ScintillaHWND, cmdlineget(1))
	}

	Point(pt, 0, 0)
	MessageInfo(msg, 0, 0, 0, 0, 0, pt)

	while(GetMessage(msg, 0, 0, 0))
	{
		TranslateMessage(msg)
		DispatchMessage(msg)
	}
}


MainWindowProcedure : (integer(hwnd), integer(message), integer(wparam), integer(lparam)) -> (integer(ret, 0))
{
	integer(WM_PAINT, 15)
	integer(WM_DESTROY, 2)
	integer(WM_SIZE, 5)
	integer(WM_COMMAND, 273)
	integer(WM_CLOSE, 0x10)
	integer(WM_NOTIFY, 0x4e)

	integer(GW_CHILD, 5)

	if(message == WM_PAINT)
	{
		Rect(prect, 0, 0, 0, 0)
		PaintInfo(ps, 0, false, prect, false, false, 0, 0, 0, 0, 0, 0, 0, 0)

		BeginPaint(hwnd, ps)
		EndPaint(hwnd, ps)
	}
	elseif(message == WM_CLOSE)
	{
		boolean(exit, true)
		integer(scintillahwnd, GetDlgItem(hwnd, WNDID_SCINTILLA))
		if(GetScintillaDirty(scintillahwnd))
		{
			exit = PromptToSave(hwnd, scintillahwnd)
		}

		if(exit)
		{
			DestroyWindow(hwnd)
		}
	}
	elseif(message == WM_DESTROY)
	{
		PostQuitMessage(0)
	}
	elseif(message == WM_SIZE)
	{
		Rect(client, 0, 0, 0, 0)
		GetClientRect(hwnd, client)		

		integer(scintillahwnd, GetDlgItem(hwnd, WNDID_SCINTILLA))
		MoveWindow(scintillahwnd, client.left, client.top, client.right - client.left, client.bottom - client.top, true)

		SetScintillaScrolling(scintillahwnd, client.right - client.left - 64)
	}
	elseif(message == WM_COMMAND)
	{
		if(wparam == 1001)
		{
			boolean(clear, true)
			integer(scintillahwnd, GetDlgItem(hwnd, WNDID_SCINTILLA))
			if(GetScintillaDirty(scintillahwnd))
			{
				clear = PromptToSave(hwnd, scintillahwnd)
			}

			if(clear)
			{
				ClearScintillaText(scintillahwnd)
				SetScintillaNonDirty(scintillahwnd)
				OpenFileName = ""
			}
		}
		elseif(wparam == 1002)
		{
			boolean(open, true)
			integer(scintillahwnd, GetDlgItem(hwnd, WNDID_SCINTILLA))
			if(GetScintillaDirty(scintillahwnd))
			{
				open = PromptToSave(hwnd, scintillahwnd)
			}

			if(open)
			{
				integer(customfilterbuffersize, 256)
				buffer(customfilterbuffer, customfilterbuffersize)

				integer(filebuffersize, 2048)
				buffer(filebuffer, filebuffersize)

				integer(filetitlebuffersize, 2048)
				buffer(filetitlebuffer, filetitlebuffersize)

				integer16(word, 0)

				OpenFileNameStruct(ofn, sizeof(ofn), hwnd, GetModuleHandle(0), FileTypeFilters,
							customfilterbuffer, customfilterbuffersize, 1, filebuffer, filebuffersize,
							filetitlebuffer, filetitlebuffersize, "", "Open File", 0, word, word, "", 0, 0, "")

				integer(ofnret, GetOpenFileName(ofn))
				if(ofnret != 0)
				{
					Open(hwnd, scintillahwnd, cast(string, ofn.file))
				}
			}
		}
		elseif(wparam == 1003)
		{
			integer(scintillahwnd, GetDlgItem(hwnd, WNDID_SCINTILLA))
			SaveDocument(hwnd, scintillahwnd)
		}
		elseif(wparam == 1004)
		{
			integer(scintillahwnd, GetDlgItem(hwnd, WNDID_SCINTILLA))
			SaveDocumentAs(hwnd, scintillahwnd)
		}
		elseif(wparam == 1005)
		{
			boolean(exit, true)
			integer(scintillahwnd, GetDlgItem(hwnd, WNDID_SCINTILLA))
			if(GetScintillaDirty(scintillahwnd))
			{
				exit = PromptToSave(hwnd, scintillahwnd)
			}

			if(exit)
			{
				DestroyWindow(hwnd)
			}
		}
		elseif(wparam == 1101)
		{
			MessageBox(hwnd, "Era is the prototype Integrated Development Environment for the Epoch programming language.", "About Era", 64)
		}
	}
	elseif(message == WM_NOTIFY)
	{
		NotifyMessageHeader(nmhdr, 0, 0, 0)
		marshalstructure(nmhdr, lparam)
		
		if(nmhdr.childid == WNDID_SCINTILLA)
		{
			if(nmhdr.code == SCN_MARGINCLICK)
			{
				ScintillaNotification(scn, 0, 0, 0, 0, 0, 0, 0, "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
				marshalstructure(scn, lparam)

				if(scn.margin == 1)
				{
					integer(scintillawnd, GetDlgItem(hwnd, WNDID_SCINTILLA))
					integer(linenumber, SendMessage(scintillawnd, SCI_LINEFROMPOSITION, scn.position, 0))
					PostMessage(scintillawnd, SCI_TOGGLEFOLD, linenumber, 0)
				}
			}
		}
	}
	else
	{
		ret = DefWindowProc(hwnd, message, wparam, lparam)
	}
}

SetScintillaScrolling : (integer(hwnd), integer(width)) -> ()
{
	integer(SCI_SETSCROLLWIDTH, 2274)
	integer(SCI_SETSCROLLWIDTHTRACKING, 2516)

	PostMessage(hwnd, SCI_SETSCROLLWIDTH, width, 0)
	PostMessage(hwnd, SCI_SETSCROLLWIDTHTRACKING, 1, 0)
}


SetScintillaFont : (integer(hwnd), string(fontname), integer(fontsize)) -> ()
{
	integer(SCI_STYLESETFONT, 2056)
	integer(SCI_STYLECLEARALL, 2050)
	integer(SCI_STYLERESETDEFAULT, 2058)
	integer(SCI_STYLESETSIZE, 2055)
	integer(SCI_STYLESETFORE, 2051)
	integer(SCI_STYLESETBOLD, 2053)

	PostMessage(hwnd, SCI_STYLERESETDEFAULT, 0, 0)
	PostMessage(hwnd, SCI_STYLESETFONT, 32, narrowstring(fontname))
	PostMessage(hwnd, SCI_STYLESETSIZE, 32, fontsize)
	PostMessage(hwnd, SCI_STYLECLEARALL, 0, 0)

	PostMessage(hwnd, SCI_STYLESETFORE, 1, 32768)
	PostMessage(hwnd, SCI_STYLESETFORE, 2, 0xff5b77)
	PostMessage(hwnd, SCI_STYLESETFORE, 3, 1381795)

	PostMessage(hwnd, SCI_STYLESETBOLD, 4, 1)

	PostMessage(hwnd, SCI_STYLESETFORE, 5, 8421376)
	PostMessage(hwnd, SCI_STYLESETFORE, 6, 8421376)
	PostMessage(hwnd, SCI_STYLESETFORE, 7, 16744576)

	PostMessage(hwnd, SCI_STYLESETFORE, 8, 16711680)
}

SetScintillaLexer : (integer(hwnd)) -> ()
{
	integer(SCI_SETLEXERLANGUAGE, 4006)
	integer(SCI_LOADLEXERLIBRARY, 4007)

	PostMessage(hwnd, SCI_LOADLEXERLIBRARY, 0, narrowstring("epochlexer.dll"))
	PostMessage(hwnd, SCI_SETLEXERLANGUAGE, 0, narrowstring("epoch"))

	PostMessage(hwnd, SCI_SETPROPERTY, narrowstring("fold"), narrowstring("1"))
	PostMessage(hwnd, SCI_SETPROPERTY, narrowstring("fold.compact"), narrowstring("0"))

	PostMessage(hwnd, SCI_SETMARGINWIDTHN, 1, 0)
	PostMessage(hwnd, SCI_SETMARGINTYPEN, 1, SC_MARGIN_SYMBOL)
	PostMessage(hwnd, SCI_SETMARGINMASKN, 1, SC_MASK_FOLDERS)
	PostMessage(hwnd, SCI_SETMARGINWIDTHN, 1, 20)

	PostMessage(hwnd, SCI_MARKERDEFINE, SC_MARKNUM_FOLDER, SC_MARK_PLUS)
	PostMessage(hwnd, SCI_MARKERDEFINE, SC_MARKNUM_FOLDEROPEN, SC_MARK_MINUS)
	PostMessage(hwnd, SCI_MARKERDEFINE, SC_MARKNUM_FOLDEREND, SC_MARK_EMPTY)
	PostMessage(hwnd, SCI_MARKERDEFINE, SC_MARKNUM_FOLDERMIDTAIL, SC_MARK_EMPTY)
	PostMessage(hwnd, SCI_MARKERDEFINE, SC_MARKNUM_FOLDEROPENMID, SC_MARK_EMPTY)
	PostMessage(hwnd, SCI_MARKERDEFINE, SC_MARKNUM_FOLDERSUB, SC_MARK_EMPTY)
	PostMessage(hwnd, SCI_MARKERDEFINE, SC_MARKNUM_FOLDERTAIL, SC_MARK_EMPTY)

	PostMessage(hwnd, SCI_SETFOLDFLAGS, 16, 0)

	PostMessage(hwnd, SCI_SETMARGINSENSITIVEN, 1, 1)
}

ScintillaColorize : (integer(hwnd)) -> ()
{
	integer(SCI_COLOURISE, 4003)

	PostMessage(hwnd, SCI_COLOURISE, 0, -1)
}

SetScintillaText : (integer(hwnd), integer(ptr), integer(len)) -> ()
{
	ClearScintillaText(hwnd)

	integer(SCI_ADDTEXT, 2001)
	SendMessage(hwnd, SCI_ADDTEXT, len, ptr)
}

ClearScintillaText : (integer(hwnd)) -> ()
{
	integer(SCI_CLEARALL, 2004)

	SendMessage(hwnd, SCI_CLEARALL, 0, 0)
}

Open : (integer(hwnd), integer(ScintillaHWND), string(filename)) -> ()
{
	integer(INVALID_HANDLE_VALUE, 0xffffffff)
	integer(FILE_SHARE_READ, 0x01)
	integer(OPEN_EXISTING, 3)
	integer(GENERIC_READ, 0x80000000)

	integer(filehandle, CreateFile(filename, GENERIC_READ, FILE_SHARE_READ, 0, OPEN_EXISTING, 0, 0))
	if(filehandle != INVALID_HANDLE_VALUE)
	{
		integer(PAGE_READONLY, 0x02)
		
		integer(mappinghandle, CreateFileMapping(filehandle, 0, PAGE_READONLY, 0, 0, 0))
		if(mappinghandle != 0)
		{
			integer(FILE_MAP_READ, 0x04)
			integer(len, GetFileSize(filehandle, 0))
			integer(ptr, MapViewOfFile(mappinghandle, FILE_MAP_READ, 0, 0, len))

			if(ptr != 0)
			{
				OpenFileName = filename
				SetScintillaText(ScintillaHWND, ptr, len)
				SetScintillaNonDirty(ScintillaHWND)
				UnmapViewOfFile(ptr)
			}
			CloseHandle(mappinghandle)
		}
		else
		{
			MessageBox(hwnd, "Failed to create mapping of file: " ; filename, "ERA Development Environment", MB_ICONEXCLAMATION)
		}
		CloseHandle(filehandle)
	}
	else
	{
		MessageBox(hwnd, "Could not open file: " ; filename, "ERA Development Environment", MB_ICONEXCLAMATION)
	}
}


DoSave : (integer(hwnd)) -> ()
{
	integer(GENERIC_WRITE, 0x40000000)
	integer(CREATE_ALWAYS, 2)
	integer(MB_ICONSTOP, 0x10)
	integer(SCI_GETLENGTH, 2183)
	integer(SCI_GETTEXT, 2182)

	integer(filehandle, CreateFile(OpenFileName, GENERIC_WRITE, 0, 0, CREATE_ALWAYS, 0, 0))
	if(filehandle == 0)
	{
		MessageBox(hwnd, "Unexpected error while saving file!", "ERA Development Environment", MB_ICONSTOP)
		return()
	}

	integer(doclength, SendMessage(hwnd, SCI_GETLENGTH, 0, 0) + 1)
	buffer(output, doclength)
	SendMessage(hwnd, SCI_GETTEXT, doclength, output)

	integer(written, 0)
	WriteFile(filehandle, output, doclength - 1, written, 0)

	CloseHandle(filehandle)

	SetScintillaNonDirty(hwnd)
}

SaveDocument : (integer(hwnd), integer(scintillahwnd)) -> ()
{
	if(length(OpenFileName) == 0)
	{
		SaveDocumentAs(hwnd, scintillahwnd)
	}
	else
	{
		DoSave(scintillahwnd)
	}
}

SaveDocumentAs : (integer(hwnd), integer(scintillahwnd)) -> ()
{
	integer(customfilterbuffersize, 256)
	buffer(customfilterbuffer, customfilterbuffersize)

	integer(filebuffersize, 2048)
	buffer(filebuffer, filebuffersize)

	integer(filetitlebuffersize, 2048)
	buffer(filetitlebuffer, filetitlebuffersize)

	integer16(word, 0)

	OpenFileNameStruct(ofn, sizeof(ofn), hwnd, GetModuleHandle(0), FileTypeFilters,
				customfilterbuffer, customfilterbuffersize, 1, filebuffer, filebuffersize,
				filetitlebuffer, filetitlebuffersize, "", "Save File", 0, word, word, "", 0, 0, "")

	integer(ofnret, GetSaveFileName(ofn))
	if(ofnret != 0)
	{
		OpenFileName = cast(string, ofn.file)
		DoSave(scintillahwnd)
	}
}


SetScintillaNonDirty : (integer(hwnd)) -> ()
{
	integer(SCI_SETSAVEPOINT, 2014)
	PostMessage(hwnd, SCI_SETSAVEPOINT, 0, 0)	
}

GetScintillaDirty : (integer(hwnd)) -> (boolean(dirty, false))
{
	integer(SCI_GETMODIFY, 2159)
	if(SendMessage(hwnd, SCI_GETMODIFY, 0, 0) != 0)
	{
		dirty = true
	}
}


PromptToSave : (integer(hwnd), integer(scintillahwnd)) -> (boolean(ret, false))
{
	integer(MB_ICONQUESTION, 0x020)
	integer(MB_YESNOCANCEL, 0x003)
	integer(YES, 6)
	integer(NO, 7)
	integer(CANCEL, 2)

	integer(prompt, MessageBox(hwnd, "The current document has unsaved changes. Would you like to save them first?", "ERA Development Environment", MB_ICONQUESTION + MB_YESNOCANCEL))
	if(prompt == YES)
	{
		SaveDocument(hwnd, scintillahwnd)
		ret = true
	}
	elseif(prompt == NO)
	{
		ret = true
	}
}

