//
// The Epoch Language Project
// Epoch Development Tools - Compiler Core
//
// BYTECODE.EPOCH
// Collecting point for all logic related to emitting Epoch bytecode
//
// Epoch bytecode targets a "mythical machine" that is fairly high-level
// and abstract. When an Epoch program launches, this bytecode stream is
// converted into LLVM instructions by the JIT runtime. The LLVM bitcode
// is in turn converted into native machine code. After this is complete
// the entrypoint function is called and the program proper runs.
//
// A good way to think about this bytecode is as a shorthand for bitcode
// sequences in LLVM. Optimization, native code generation, etc. are all
// the responsibility of LLVM rather than the compiler "front-end."
//
// So even though this compiler generates a form of executable code (for
// a machine which doesn't exist) it's really more a form of IR, instead
// of a final target code sequence.
//


// Everything below this line is ancient cruftiness that needs cleanup.

OnBytecodeEmitReal : real value [nogc]
{
	writebuffer(Hack, HackSize, value)
	HackSize = HackSize + 4
}

OnBytecodeEmitString : string value [nogc]
{
	integer len = (length(value) + 1) * 2
	writebuffer(Hack, HackSize, value, len)
	HackSize += len
}

OnBytecodeEmitBoolean : boolean value [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, cast(integer, value))
}

OnBytecodePoolString : integer handle, string data [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x10) // PoolString instruction
	ByteStreamEmitInteger(Hack, HackSize, handle)
	OnBytecodeEmitString(data)
}

OnBytecodeLexicalScope : integer name, integer parent, integer count [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x11)			// DefineLexicalScope instruction
	ByteStreamEmitInteger(Hack, HackSize, name)
	ByteStreamEmitInteger(Hack, HackSize, parent)
	ByteStreamEmitInteger(Hack, HackSize, count)
}

OnBytecodeLexicalScopeEntry : integer varname, integer vartype, integer origin [nogc]
{
	ByteStreamEmitInteger(Hack, HackSize, varname)
	ByteStreamEmitInteger(Hack, HackSize, vartype)
	ByteStreamEmitInteger(Hack, HackSize, origin)
	OnBytecodeEmitBoolean(false)
}

OnBytecodeInvokeOffset : integer name [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x27)			// InvokeOffset instruction
	ByteStreamEmitInteger(Hack, HackSize, name)
	ByteStreamEmitInteger(Hack, HackSize, 0)
	
	Echo("INVOKE_OFFSET " ; cast(string, name))
}

OnBytecodeHalt : [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x00)			// Halt instruction
	
	Echo("HALT")
}

OnBytecodeEnterFunction : integer name [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x0b)			// BeginEntity instruction
	ByteStreamEmitInteger(Hack, HackSize, 0x01)			// EntityTags::Function
	ByteStreamEmitInteger(Hack, HackSize, name)
	
	Echo("FUNCTION " ; cast(string, name))
}

OnBytecodeExitFunction : [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x09)			// Return instruction
	ByteStreamEmitByte(Hack, HackSize, 0x0c)			// EndEntity instruction
	
	Echo("END FUNCTION")
}

OnBytecodeInvoke : integer target [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x07)			// Invoke instruction
	ByteStreamEmitInteger(Hack, HackSize, target)
	
	Echo("INVOKE " ; cast(string, target))
}

OnBytecodeEnterEntity : integer tag, integer name [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x0b)			// BeginEntity instruction
	ByteStreamEmitInteger(Hack, HackSize, tag)
	ByteStreamEmitInteger(Hack, HackSize, name)
	
	Echo("ENTITY " ; cast(string, tag) ; " " ; cast(string, name))
}

OnBytecodeExitEntity : [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x0c)			// EndEntity instruction
	Echo("END ENTITY")
}

OnBytecodeBeginChain : [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x0d)			// BeginChain instruction
	Echo("CHAIN")
}

OnBytecodeEndChain : [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x0e)			// EndChain instruction
	Echo("END CHAIN")
}

OnBytecodeDefineStructure : integer typeid, integer nummembers [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x14)			// DefineStructure instruction
	ByteStreamEmitInteger(Hack, HackSize, typeid)
	ByteStreamEmitInteger(Hack, HackSize, nummembers)
}

OnBytecodeStructureMember : integer name, integer typeid [nogc]
{
	ByteStreamEmitInteger(Hack, HackSize, name)
	ByteStreamEmitInteger(Hack, HackSize, typeid)
}

OnBytecodeReadReference : [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x17)			// ReadRef instruction
	Echo("READREF")
}

OnBytecodeReadReferenceAnnotated : [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x24)			// ReadRefAnnotated instruction
	Echo("READREFANNOTATED")
}

OnBytecodeAllocStructure : integer typeid [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x13)			// AllocStructure instruction
	ByteStreamEmitInteger(Hack, HackSize, typeid)
	
	Echo("ALLOCSTRUCT " ; cast(string, typeid))
}

OnBytecodeBindReference : integer frameskip, integer index [nogc]
{
	if(index < 0)
	{
		print("Binding reference to a missing variable!")
		assert(false)
	}

	ByteStreamEmitByte(Hack, HackSize, 0x03)			// BindRef instruction
	ByteStreamEmitInteger(Hack, HackSize, frameskip)
	ByteStreamEmitInteger(Hack, HackSize, index)
	
	Echo("BINDREF")
}

OnBytecodeAssign : [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x06)			// Assign instruction
	
	Echo("ASSIGN")
}

OnBytecodePushVarValueNoCopy : integer name [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x05)			// Read instruction
	ByteStreamEmitInteger(Hack, HackSize, name)
	
	Echo("PUSH_NOCOPY")
}

OnBytecodePushVarValue : integer name, integer typeid [nogc]
{
	OnBytecodePushVarValueNoCopy(name)

	integer family = typeid & 0xff000000

	if(typeid == 0x02000001)			// Buffer type signature
	{
		OnBytecodeCopyBuffer()
	}
	elseif(family == 0x03000000)			// Structure family signature
	{
		//OnBytecodeCopyStructure()		// TODO - un-break value semantics!
	}
	elseif(family == 0x08000000)			// Template instance family signature
	{
		//OnBytecodeCopyStructure()
	}
}

OnBytecodeCopyBuffer : [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x19)			// CopyBuffer instruction
	
	Echo("COPYBUFFER")
}

OnBytecodeCopyStructure : [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x1b)			// CopyStructure instruction
	
	Echo("COPYSTRUCT")
}

OnBytecodeCopyToStructure : integer structurename, integer membername [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x16)			// CopyToStructure instruction
	ByteStreamEmitInteger(Hack, HackSize, structurename)
	ByteStreamEmitInteger(Hack, HackSize, membername)
	
	Echo("COPYTOSTRUCT")
}

OnBytecodeSetReturnRegister : integer varindex [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x0a)			// SetRetVal instruction
	ByteStreamEmitInteger(Hack, HackSize, varindex)
	
	Echo("SETRET")
}

OnBytecodeInvokeIndirect : integer varname [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x08)			// InvokeIndirect instruction
	ByteStreamEmitInteger(Hack, HackSize, varname)
	
	Echo("INVOKE INDIRECT" ; cast(string, varname))
}

OnBytecodeEnterPatternResolver : integer name [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x0b)			// BeginEntity instruction
	ByteStreamEmitInteger(Hack, HackSize, 0x02)			// EntityTags::PatternMatchingResolver
	ByteStreamEmitInteger(Hack, HackSize, name)
}

OnBytecodeExitPatternResolver : [nogc]
{
	OnBytecodeHalt()
	ByteStreamEmitByte(Hack, HackSize, 0x0c)			// EndEntity instruction
}

OnBytecodeConstructSumType : [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x21)			// ConstructSumType instruction
}

OnBytecodeEnterTypeResolver : integer name [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x0b)			// BeginEntity instruction
	ByteStreamEmitInteger(Hack, HackSize, 0x05)			// EntityTags::TypeResolver
	ByteStreamEmitInteger(Hack, HackSize, name)
}

OnBytecodeExitTypeResolver : [nogc]
{
	OnBytecodeHalt()
	ByteStreamEmitByte(Hack, HackSize, 0x0c)			// EndEntity instruction
}

OnBytecodePopStack : integer bytes [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x04)			// Pop instruction
	ByteStreamEmitInteger(Hack, HackSize, bytes)
	
	Echo("POP " ; cast(string, bytes))
}

OnBytecodeBindRefByHandle : integer id [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x1d)
	ByteStreamEmitInteger(Hack, HackSize, id)
	
	Echo("BINDREF BY HANDLE " ; cast(string, id))
}

OnBytecodeBindStructReference : integer membertype, integer memberoffset [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x18)			// BindMemberRef instruction
	ByteStreamEmitInteger(Hack, HackSize, MakeNonReferenceType(membertype))
	ByteStreamEmitInteger(Hack, HackSize, memberoffset)
	
	Echo("BINDMEMBERREF")
}

OnBytecodePushType : integer typeid [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x02)			// Push instruction
	ByteStreamEmitInteger(Hack, HackSize, 0x01000001)		// Integer type signature
	ByteStreamEmitInteger(Hack, HackSize, typeid)
	
	Echo("PUSH TYPE")
}

OnBytecodeAssignSumType : [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x23)			// AssignSumType instruction
}

OnBytecodePushLocal : integer frameskip, integer offset [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x25)			// ReadStack instruction
	ByteStreamEmitInteger(Hack, HackSize, frameskip)
	ByteStreamEmitInteger(Hack, HackSize, offset)
	ByteStreamEmitInteger(Hack, HackSize, 0)
	
	Echo("PUSH LOCAL")
}

OnBytecodePushBoolean : boolean literal [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x02)			// Push instruction
	ByteStreamEmitInteger(Hack, HackSize, 0x01000003)		// Boolean type signature
	OnBytecodeEmitBoolean(literal)
	
	Echo("PUSH LITERAL BOOLEAN")
}

OnBytecodePushLiteralString : integer literalhandle [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x02)			// Push instruction
	ByteStreamEmitInteger(Hack, HackSize, 0x02000000)		// String type signature
	ByteStreamEmitInteger(Hack, HackSize, literalhandle)
	
	Echo("PUSH LITERAL STRING")
}

OnBytecodePushLiteralInteger : integer literal [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x02)			// Push instruction
	ByteStreamEmitInteger(Hack, HackSize, 0x01000001)		// Integer type signature
	ByteStreamEmitInteger(Hack, HackSize, literal)
	
	Echo("PUSH LITERAL INTEGER")
}

OnBytecodePushLiteralInteger16 : integer16 literal [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x02)			// Push instruction
	ByteStreamEmitInteger(Hack, HackSize, 0x01000002)		// Integer16 type signature
	ByteStreamEmitInteger16(Hack, HackSize, literal)
}

OnBytecodePushTypeAnnotation : integer annotation [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x02)			// Push instruction
	ByteStreamEmitInteger(Hack, HackSize, 0x01000001)		// Integer type signature
	ByteStreamEmitInteger(Hack, HackSize, annotation)
	
	Echo("PUSH TYPE ANNOTATIONS")
}

OnBytecodePushLiteralFunction : integer name [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x02)			// Push instruction
	ByteStreamEmitInteger(Hack, HackSize, 0x09000000)		// Function family signature (N.B. not the actual function type!)
	ByteStreamEmitInteger(Hack, HackSize, name)
	
	Echo("PUSH LITERAL FUNCTION")
}

OnBytecodePushLiteralReal : real value [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x02)			// Push instruction
	ByteStreamEmitInteger(Hack, HackSize, 0x01000004)		// Real type signature
	OnBytecodeEmitReal(value)
}

OnBytecodeEmitFunctionSignature : integer typeid, integer rettype, integer paramcount [nogc]
{
	ByteStreamEmitByte(Hack, HackSize, 0x28)			// FuncSig instruction
	ByteStreamEmitInteger(Hack, HackSize, typeid)
	ByteStreamEmitInteger(Hack, HackSize, rettype)
	ByteStreamEmitInteger(Hack, HackSize, paramcount)
}

OnBytecodeEmitFunctionSigParam : integer paramtype [nogc]
{
	ByteStreamEmitInteger(Hack, HackSize, paramtype)
	OnBytecodeEmitBoolean(false)
}



Echo : string s
{
	//print(s)
}


