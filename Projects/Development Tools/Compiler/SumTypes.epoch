
FindSumTypeAndAddBase : integer sumtypename, integer sumtypeid, integer basetypeid, boolean templated [nogc]
{
	FindSumTypeAndAddBase(SumTypes, sumtypename, sumtypeid, basetypeid, templated)
}


FindSumTypeAndAddBase : list<SumType> ref sumtypes, integer sumtypename, integer sumtypeid, integer basetypeid, boolean templated [nogc]
{
	if(sumtypes.value.Type == sumtypeid)
	{
		SumTypeBase base = basetypeid, nothing

		if(templated)
		{
			PopTemplateArgList(ScratchTemplateArgumentStack.value.Args, ScratchTemplateArgumentStack.value.Args.next)
			TemplateArgumentList arglist = ScratchTemplateArgumentStack.value
			base.TemplateArgs = arglist

			PopTemplateArgStack(ScratchTemplateArgumentStack, ScratchTemplateArgumentStack.next)
		}

		prepend<SumTypeBase>(sumtypes.value.Bases, base)
	}
	else
	{
		FindSumTypeAndAddBase(sumtypes.next, sumtypename, sumtypeid, basetypeid, templated)
	}
}

FindSumTypeAndAddBase : nothing, integer sumtypename, integer sumtypeid, integer basetypeid, boolean templated [nogc]
{
	SumTypeBase base = basetypeid, nothing
	if(templated)
	{
		PopTemplateArgList(ScratchTemplateArgumentStack.value.Args, ScratchTemplateArgumentStack.value.Args.next)
		TemplateArgumentList arglist = ScratchTemplateArgumentStack.value
		base.TemplateArgs = arglist

		PopTemplateArgStack(ScratchTemplateArgumentStack, ScratchTemplateArgumentStack.next)
	}

	list<SumTypeBase> bases = base, nothing
	SumType st = sumtypename, sumtypeid, bases, false
	prepend<SumType>(SumTypes, st)
	InsertIntoBinaryTree<SumType>(SumTypesWhichExist, sumtypename, st)
}



SetUpSumTypeTemplate : integer sumtypeid
{
	SetUpSumTypeTemplate(SumTypes, sumtypeid)
}

SetUpSumTypeTemplate : list<SumType> ref sumtypes, integer sumtypeid
{
	if(sumtypes.value.Type == sumtypeid)
	{
		sumtypes.value.IsTemplate = true
		CreateSumTypeTemplateAndAttachParams(sumtypes.value.Name, TemplateParameterQueue)

		// Reset template parameter queue
		list<TemplateParameter> dummylist = scratchtemplateparam, nothing
		TemplateParameterQueue = dummylist
	}
	else
	{
		SetUpSumTypeTemplate(sumtypes.next, sumtypeid)
	}
}

SetUpSumTypeTemplate : nothing, integer sumtypeid
{
	print("Sum type not found!")
	assert(false)
}



CountSumTypeBases : list<SumTypeBase> ref bases -> integer count = 0 [nogc]
{
	count = CountSumTypeBases(bases.next)

	if(bases.value.Name != 0)
	{
		++count
	}
}

CountSumTypeBases : nothing -> integer count = 0 [nogc]


SumTypeExists : integer typename -> boolean exists = SearchBinaryTree<SumType>(SumTypesWhichExist, typename) [nogc]


FindSumTypeName : integer typeid -> integer name = FindSumTypeName(SumTypes, typeid) [nogc]

FindSumTypeName : list<SumType> ref sumtypes, integer typeid -> integer name = 0 [nogc]
{
	if(sumtypes.value.Type == typeid)
	{
		name = sumtypes.value.Name
	}
	else
	{
		name = FindSumTypeName(sumtypes.next, typeid)
	}
}

FindSumTypeName : nothing, integer typeid -> 0 [nogc]


SumTypeHasBase : list<SumType> ref sumtypes, integer sumtypeid, integer basetypeid -> boolean hasbase = false [nogc]
{
	if(basetypeid == 0)
	{
		return()
	}

	if(sumtypeid == 0)
	{
		return()
	}

	if(sumtypes.value.Type == sumtypeid)
	{
		hasbase = CheckBaseTypes(sumtypes.value.Bases, basetypeid)
	}
	else
	{
		hasbase = SumTypeHasBase(sumtypes.next, sumtypeid, basetypeid)
	}
}

SumTypeHasBase : nothing, integer sumtypeid, integer basetypeid -> false [nogc]


CheckBaseTypes : list<SumTypeBase> ref bases, integer basetypeid -> boolean hasbase = false [nogc]
{
	if(bases.value.Name == basetypeid)
	{
		hasbase = true
	}
	else
	{
		hasbase = CheckBaseTypes(bases.next, basetypeid)
	}
}

CheckBaseTypes : nothing, integer basetypeid -> false [nogc]


FindSumTypeByName : integer name -> integer typeid = 0 [nogc]
{
	ContextNode<SumType> wrap = nothing
	if(SearchBinaryTreeForPayload<SumType>(SumTypesWhichExist, name, wrap))
	{
		typeid = GrabSumTypeID(wrap)
	}
}

GrabSumTypeID : SumType ref st -> integer typeid = st.Type [nogc]


GetLargestSumTypeBaseSize : integer typeid -> integer size = FindSumTypeAndGetBaseMaxSize(SumTypes, typeid) [nogc]

FindSumTypeAndGetBaseMaxSize : list<SumType> ref sumtypes, integer typeid -> integer size = 0 [nogc]
{
	if(sumtypes.value.Type == typeid)
	{
		GetBaseMaxSize(sumtypes.value.Bases, size)
	}
	else
	{
		size = FindSumTypeAndGetBaseMaxSize(sumtypes.next, typeid)
	}
}

FindSumTypeAndGetBaseMaxSize : nothing, integer typeid -> 0 [nogc]


GetBaseMaxSize : list<SumTypeBase> ref basetypes, integer ref outsize [nogc]
{
	integer typename = basetypes.value.Name
	if(typename != 0)
	{
		integer thissize = GetTypeSize(typename)
		if(thissize > outsize)
		{
			outsize = thissize
		}
	}

	GetBaseMaxSize(basetypes.next, outsize)
}

GetBaseMaxSize : nothing, integer ref outsize [nogc]

ResolveSumTypeBases : list<SumTypeBase> ref bases -> boolean success = true
{
	if(bases.value.Name != 0)
	{
		integer resolvedtype = ResolveSingleBase(bases.value, bases.value.TemplateArgs)

		if(resolvedtype == 0)
		{
			print("Sum type has unknown base type")
			success = false
		}

		bases.value.Name = resolvedtype
	}

	if(!ResolveSumTypeBases(bases.next))
	{
		success = false
	}
}

ResolveSumTypeBases : nothing -> true

ResolveSingleBase : SumTypeBase ref base, nothing -> integer ret = GetTypeByName(base.Name)
ResolveSingleBase : SumTypeBase ref base, TemplateArgumentList ref args -> integer ret = GetTypeByName(InstantiateStructureTemplate(base.Name, args))




PrependSumTypeBases : simplelist<integer> ref input, list<SumTypeBase> ref newentries [nogc]
{
	simpleprepend<integer>(input, newentries.value.Name)
	PrependSumTypeBases(input, newentries.next)
}

PrependSumTypeBases : simplelist<integer> ref input, nothing [nogc]


FindSumTypeAndPrependTypesToList : list<SumType> ref sumtypes, integer sumtypeid, simplelist<integer> ref types [nogc]
{
	if(sumtypes.value.Type == sumtypeid)
	{
		PrependSumTypeBases(types, sumtypes.value.Bases)
	}
	else
	{
		FindSumTypeAndPrependTypesToList(sumtypes.next, sumtypeid, types)
	}
}


